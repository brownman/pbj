/** \file
 *  This C source file was generated by $ANTLR version 3.1.3 Mar 18, 2009 10:09:25
 *
 *     -  From the grammar source file : PBJ.g
 *     -                            On : 2009-08-28 22:34:40
 *     -                for the parser : PBJParserParser *
 * Editing it, at least manually, is not wise. 
 *
 * C language generator and runtime by Jim Idle, jimi|hereisanat|idle|dotgoeshere|ws.
 *
 *
*/
// [The "BSD licence"]
// Copyright (c) 2005-2009 Jim Idle, Temporal Wave LLC
// http://www.temporal-wave.com
// http://www.linkedin.com/in/jimidle
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

/* -----------------------------------------
 * Include the ANTLR3 generated header file.
 */
#include    "PBJParser.h"
/* ----------------------------------------- */





/* MACROS that hide the C interface implementations from the
 * generated code, which makes it a little more understandable to the human eye.
 * I am very much against using C pre-processor macros for function calls and bits
 * of code as you cannot see what is happening when single stepping in debuggers
 * and so on. The exception (in my book at least) is for generated code, where you are
 * not maintaining it, but may wish to read and understand it. If you single step it, you know that input()
 * hides some indirect calls, but is always referring to the input stream. This is
 * probably more readable than ctx->input->istream->input(snarfle0->blarg) and allows me to rejig
 * the runtime interfaces without changing the generated code too often, without
 * confusing the reader of the generated output, who may not wish to know the gory
 * details of the interface inheritance.
 */
 
#define		CTX	ctx

/* Aids in accessing scopes for grammar programmers
 */
#undef	SCOPE_TYPE
#undef	SCOPE_STACK
#undef	SCOPE_TOP
#define	SCOPE_TYPE(scope)   pPBJParser_##scope##_SCOPE
#define SCOPE_STACK(scope)  pPBJParser_##scope##Stack
#define	SCOPE_TOP(scope)    ctx->pPBJParser_##scope##Top
#define	SCOPE_SIZE(scope)			(ctx->SCOPE_STACK(scope)->size(ctx->SCOPE_STACK(scope)))
#define SCOPE_INSTANCE(scope, i)	(ctx->SCOPE_STACK(scope)->get(ctx->SCOPE_STACK(scope),i))

/* Macros for accessing things in the parser
 */
 
#undef	    PARSER		    
#undef	    RECOGNIZER		    
#undef	    HAVEPARSEDRULE
#undef		MEMOIZE
#undef	    INPUT
#undef	    STRSTREAM
#undef	    HASEXCEPTION
#undef	    EXCEPTION
#undef	    MATCHT
#undef	    MATCHANYT
#undef	    FOLLOWSTACK
#undef	    FOLLOWPUSH
#undef	    FOLLOWPOP
#undef	    PRECOVER
#undef	    PREPORTERROR
#undef	    LA
#undef	    LT
#undef	    CONSTRUCTEX
#undef	    CONSUME
#undef	    MARK
#undef	    REWIND
#undef	    REWINDLAST
#undef	    PERRORRECOVERY
#undef	    HASFAILED
#undef	    FAILEDFLAG
#undef	    RECOVERFROMMISMATCHEDSET
#undef	    RECOVERFROMMISMATCHEDELEMENT
#undef		INDEX
#undef      ADAPTOR
#undef		SEEK
#undef	    RULEMEMO		    
#undef		DBG

#define	    PARSER							ctx->pParser  
#define	    RECOGNIZER						PARSER->rec
#define		PSRSTATE						RECOGNIZER->state
#define	    HAVEPARSEDRULE(r)				RECOGNIZER->alreadyParsedRule(RECOGNIZER, r)
#define		MEMOIZE(ri,si)					RECOGNIZER->memoize(RECOGNIZER, ri, si)
#define	    INPUT							PARSER->tstream
#define	    STRSTREAM						INPUT
#define		ISTREAM							INPUT->istream
#define		INDEX()							ISTREAM->index(INPUT->istream)
#define	    HASEXCEPTION()					(PSRSTATE->error == ANTLR3_TRUE)
#define	    EXCEPTION						PSRSTATE->exception
#define	    MATCHT(t, fs)					RECOGNIZER->match(RECOGNIZER, t, fs)
#define	    MATCHANYT()						RECOGNIZER->matchAny(RECOGNIZER)
#define	    FOLLOWSTACK					    PSRSTATE->following
#define	    FOLLOWPUSH(x)					FOLLOWSTACK->push(FOLLOWSTACK, ((void *)(&(x))), NULL)
#define	    FOLLOWPOP()						FOLLOWSTACK->pop(FOLLOWSTACK)
#define	    PRECOVER()						RECOGNIZER->recover(RECOGNIZER)
#define	    PREPORTERROR()					RECOGNIZER->reportError(RECOGNIZER)
#define	    LA(n)							INPUT->istream->_LA(ISTREAM, n)
#define	    LT(n)							INPUT->_LT(INPUT, n)
#define	    CONSTRUCTEX()					RECOGNIZER->exConstruct(RECOGNIZER)
#define	    CONSUME()						ISTREAM->consume(ISTREAM)
#define	    MARK()							ISTREAM->mark(ISTREAM)
#define	    REWIND(m)						ISTREAM->rewind(ISTREAM, m)
#define	    REWINDLAST()					ISTREAM->rewindLast(ISTREAM)
#define		SEEK(n)							ISTREAM->seek(ISTREAM, n)
#define	    PERRORRECOVERY					PSRSTATE->errorRecovery
#define	    FAILEDFLAG						PSRSTATE->failed
#define	    HASFAILED()						(FAILEDFLAG == ANTLR3_TRUE)
#define	    BACKTRACKING					PSRSTATE->backtracking
#define	    RECOVERFROMMISMATCHEDSET(s)		RECOGNIZER->recoverFromMismatchedSet(RECOGNIZER, s)
#define	    RECOVERFROMMISMATCHEDELEMENT(e)	RECOGNIZER->recoverFromMismatchedElement(RECOGNIZER, s)
#define     ADAPTOR                         ctx->adaptor
#define		RULEMEMO						PSRSTATE->ruleMemo
#define		DBG								RECOGNIZER->debugger

#define		TOKTEXT(tok, txt)				tok, (pANTLR3_UINT8)txt

/* The 4 tokens defined below may well clash with your own #defines or token types. If so
 * then for the present you must use different names for your defines as these are hard coded
 * in the code generator. It would be better not to use such names internally, and maybe
 * we can change this in a forthcoming release. I deliberately do not #undef these
 * here as this will at least give you a redefined error somewhere if they clash.
 */
#define	    UP	    ANTLR3_TOKEN_UP
#define	    DOWN    ANTLR3_TOKEN_DOWN
#define	    EOR	    ANTLR3_TOKEN_EOR
#define	    INVALID ANTLR3_TOKEN_INVALID


/* =============================================================================
 * Functions to create and destroy scopes. First come the rule scopes, followed
 * by the global declared scopes.
 */

/* ruleAttributeScopeFuncDecl(scope)
 */
/* -----------------------------------------------------------------------------
 * Function declarations for creating a PBJParser_message scope set 
 */
static pPBJParser_message_SCOPE   pPBJParser_messagePush(pPBJParser ctx);
static void ANTLR3_CDECL messageFree(pPBJParser_message_SCOPE scope);
/* ----------------------------------------------------------------------------- */

/* ruleAttributeScopeFuncs(scope)
 */
/* attributeFuncs(scope)
 */

static void ANTLR3_CDECL messageFree(pPBJParser_message_SCOPE scope)
{
    ANTLR3_FREE(scope);
}

/** \brief Allocate initial memory for a PBJParser message scope variable stack entry and
 *         add it to the top of the stack.
 *
 * \remark
 * By default the structure is freed with ANTLR_FREE(), but you can use the
 * the \@init action to install a pointer to a custom free() routine by
 * adding the code: 
 * \code 
 *   ctx->pPBJParser_messageTop->free = myroutine;
 * \endcode
 *
 * With lots of comments of course! The routine should be declared in
 * \@members { } as: 
 * \code
 *   void ANTLR3_CDECL myfunc( pPBJParser_message_SCOPE ptr). 
 * \endcode
 *
 * It should perform any custom freeing stuff that you need (call ANTLR_FREE3, not free()
 * NB: It should not free the pointer it is given, which is the scope stack entry itself
 * and will be freed by the function that calls your custom free routine.
 * 
 */ 
static pPBJParser_message_SCOPE
pPBJParser_messagePush(pPBJParser ctx)
{
    /* Pointer used to create a new set of attributes
     */
    pPBJParser_message_SCOPE      newAttributes;

    /* Allocate the memory for a new structure if we need one.
     */
    if (ctx->pPBJParser_messageStack->size(ctx->pPBJParser_messageStack) > ctx->pPBJParser_messageStack_limit)
    {
        // The current limit value was less than the number of scopes available on the stack so
        // we can just reuse one. Our limit tracks the stack count, so the index of the entry we want
        // is one less than that, or conveniently, the current value of limit.
        //
        newAttributes = (pPBJParser_message_SCOPE)ctx->pPBJParser_messageStack->get(ctx->pPBJParser_messageStack, ctx->pPBJParser_messageStack_limit);
    }
    else
    {
        // Need a new allocation
        //
        newAttributes = (pPBJParser_message_SCOPE) ANTLR3_MALLOC(sizeof(PBJParser_message_SCOPE));
        if  (newAttributes != NULL)
        {
            /* Standard ANTLR3 library implementation
             */
            ctx->pPBJParser_messageStack->push(ctx->pPBJParser_messageStack, newAttributes, (void (*)(void *))messageFree);
        }
    }

    // Blank out any previous free pointer, the user might or might install a new one.
    //
    newAttributes->free = NULL;

    // Indicate the position in the available stack that the current level is at
    //
    ctx->pPBJParser_messageStack_limit++;

	/* Return value is the pointer to the new entry, which may be used locally
	 * without de-referencing via the context.
     */
    return  newAttributes;
}

/* ruleAttributeScopeFuncDecl(scope)
 */
/* -----------------------------------------------------------------------------
 * Function declarations for creating a PBJParser_enum_def scope set 
 */
static pPBJParser_enum_def_SCOPE   pPBJParser_enum_defPush(pPBJParser ctx);
static void ANTLR3_CDECL enum_defFree(pPBJParser_enum_def_SCOPE scope);
/* ----------------------------------------------------------------------------- */

/* ruleAttributeScopeFuncs(scope)
 */
/* attributeFuncs(scope)
 */

static void ANTLR3_CDECL enum_defFree(pPBJParser_enum_def_SCOPE scope)
{
    ANTLR3_FREE(scope);
}

/** \brief Allocate initial memory for a PBJParser enum_def scope variable stack entry and
 *         add it to the top of the stack.
 *
 * \remark
 * By default the structure is freed with ANTLR_FREE(), but you can use the
 * the \@init action to install a pointer to a custom free() routine by
 * adding the code: 
 * \code 
 *   ctx->pPBJParser_enum_defTop->free = myroutine;
 * \endcode
 *
 * With lots of comments of course! The routine should be declared in
 * \@members { } as: 
 * \code
 *   void ANTLR3_CDECL myfunc( pPBJParser_enum_def_SCOPE ptr). 
 * \endcode
 *
 * It should perform any custom freeing stuff that you need (call ANTLR_FREE3, not free()
 * NB: It should not free the pointer it is given, which is the scope stack entry itself
 * and will be freed by the function that calls your custom free routine.
 * 
 */ 
static pPBJParser_enum_def_SCOPE
pPBJParser_enum_defPush(pPBJParser ctx)
{
    /* Pointer used to create a new set of attributes
     */
    pPBJParser_enum_def_SCOPE      newAttributes;

    /* Allocate the memory for a new structure if we need one.
     */
    if (ctx->pPBJParser_enum_defStack->size(ctx->pPBJParser_enum_defStack) > ctx->pPBJParser_enum_defStack_limit)
    {
        // The current limit value was less than the number of scopes available on the stack so
        // we can just reuse one. Our limit tracks the stack count, so the index of the entry we want
        // is one less than that, or conveniently, the current value of limit.
        //
        newAttributes = (pPBJParser_enum_def_SCOPE)ctx->pPBJParser_enum_defStack->get(ctx->pPBJParser_enum_defStack, ctx->pPBJParser_enum_defStack_limit);
    }
    else
    {
        // Need a new allocation
        //
        newAttributes = (pPBJParser_enum_def_SCOPE) ANTLR3_MALLOC(sizeof(PBJParser_enum_def_SCOPE));
        if  (newAttributes != NULL)
        {
            /* Standard ANTLR3 library implementation
             */
            ctx->pPBJParser_enum_defStack->push(ctx->pPBJParser_enum_defStack, newAttributes, (void (*)(void *))enum_defFree);
        }
    }

    // Blank out any previous free pointer, the user might or might install a new one.
    //
    newAttributes->free = NULL;

    // Indicate the position in the available stack that the current level is at
    //
    ctx->pPBJParser_enum_defStack_limit++;

	/* Return value is the pointer to the new entry, which may be used locally
	 * without de-referencing via the context.
     */
    return  newAttributes;
}

/* ruleAttributeScopeFuncDecl(scope)
 */
/* -----------------------------------------------------------------------------
 * Function declarations for creating a PBJParser_flags_def scope set 
 */
static pPBJParser_flags_def_SCOPE   pPBJParser_flags_defPush(pPBJParser ctx);
static void ANTLR3_CDECL flags_defFree(pPBJParser_flags_def_SCOPE scope);
/* ----------------------------------------------------------------------------- */

/* ruleAttributeScopeFuncs(scope)
 */
/* attributeFuncs(scope)
 */

static void ANTLR3_CDECL flags_defFree(pPBJParser_flags_def_SCOPE scope)
{
    ANTLR3_FREE(scope);
}

/** \brief Allocate initial memory for a PBJParser flags_def scope variable stack entry and
 *         add it to the top of the stack.
 *
 * \remark
 * By default the structure is freed with ANTLR_FREE(), but you can use the
 * the \@init action to install a pointer to a custom free() routine by
 * adding the code: 
 * \code 
 *   ctx->pPBJParser_flags_defTop->free = myroutine;
 * \endcode
 *
 * With lots of comments of course! The routine should be declared in
 * \@members { } as: 
 * \code
 *   void ANTLR3_CDECL myfunc( pPBJParser_flags_def_SCOPE ptr). 
 * \endcode
 *
 * It should perform any custom freeing stuff that you need (call ANTLR_FREE3, not free()
 * NB: It should not free the pointer it is given, which is the scope stack entry itself
 * and will be freed by the function that calls your custom free routine.
 * 
 */ 
static pPBJParser_flags_def_SCOPE
pPBJParser_flags_defPush(pPBJParser ctx)
{
    /* Pointer used to create a new set of attributes
     */
    pPBJParser_flags_def_SCOPE      newAttributes;

    /* Allocate the memory for a new structure if we need one.
     */
    if (ctx->pPBJParser_flags_defStack->size(ctx->pPBJParser_flags_defStack) > ctx->pPBJParser_flags_defStack_limit)
    {
        // The current limit value was less than the number of scopes available on the stack so
        // we can just reuse one. Our limit tracks the stack count, so the index of the entry we want
        // is one less than that, or conveniently, the current value of limit.
        //
        newAttributes = (pPBJParser_flags_def_SCOPE)ctx->pPBJParser_flags_defStack->get(ctx->pPBJParser_flags_defStack, ctx->pPBJParser_flags_defStack_limit);
    }
    else
    {
        // Need a new allocation
        //
        newAttributes = (pPBJParser_flags_def_SCOPE) ANTLR3_MALLOC(sizeof(PBJParser_flags_def_SCOPE));
        if  (newAttributes != NULL)
        {
            /* Standard ANTLR3 library implementation
             */
            ctx->pPBJParser_flags_defStack->push(ctx->pPBJParser_flags_defStack, newAttributes, (void (*)(void *))flags_defFree);
        }
    }

    // Blank out any previous free pointer, the user might or might install a new one.
    //
    newAttributes->free = NULL;

    // Indicate the position in the available stack that the current level is at
    //
    ctx->pPBJParser_flags_defStack_limit++;

	/* Return value is the pointer to the new entry, which may be used locally
	 * without de-referencing via the context.
     */
    return  newAttributes;
}

/* ruleAttributeScopeFuncDecl(scope)
 */
/* -----------------------------------------------------------------------------
 * Function declarations for creating a PBJParser_field scope set 
 */
static pPBJParser_field_SCOPE   pPBJParser_fieldPush(pPBJParser ctx);
static void ANTLR3_CDECL fieldFree(pPBJParser_field_SCOPE scope);
/* ----------------------------------------------------------------------------- */

/* ruleAttributeScopeFuncs(scope)
 */
/* attributeFuncs(scope)
 */

static void ANTLR3_CDECL fieldFree(pPBJParser_field_SCOPE scope)
{
    ANTLR3_FREE(scope);
}

/** \brief Allocate initial memory for a PBJParser field scope variable stack entry and
 *         add it to the top of the stack.
 *
 * \remark
 * By default the structure is freed with ANTLR_FREE(), but you can use the
 * the \@init action to install a pointer to a custom free() routine by
 * adding the code: 
 * \code 
 *   ctx->pPBJParser_fieldTop->free = myroutine;
 * \endcode
 *
 * With lots of comments of course! The routine should be declared in
 * \@members { } as: 
 * \code
 *   void ANTLR3_CDECL myfunc( pPBJParser_field_SCOPE ptr). 
 * \endcode
 *
 * It should perform any custom freeing stuff that you need (call ANTLR_FREE3, not free()
 * NB: It should not free the pointer it is given, which is the scope stack entry itself
 * and will be freed by the function that calls your custom free routine.
 * 
 */ 
static pPBJParser_field_SCOPE
pPBJParser_fieldPush(pPBJParser ctx)
{
    /* Pointer used to create a new set of attributes
     */
    pPBJParser_field_SCOPE      newAttributes;

    /* Allocate the memory for a new structure if we need one.
     */
    if (ctx->pPBJParser_fieldStack->size(ctx->pPBJParser_fieldStack) > ctx->pPBJParser_fieldStack_limit)
    {
        // The current limit value was less than the number of scopes available on the stack so
        // we can just reuse one. Our limit tracks the stack count, so the index of the entry we want
        // is one less than that, or conveniently, the current value of limit.
        //
        newAttributes = (pPBJParser_field_SCOPE)ctx->pPBJParser_fieldStack->get(ctx->pPBJParser_fieldStack, ctx->pPBJParser_fieldStack_limit);
    }
    else
    {
        // Need a new allocation
        //
        newAttributes = (pPBJParser_field_SCOPE) ANTLR3_MALLOC(sizeof(PBJParser_field_SCOPE));
        if  (newAttributes != NULL)
        {
            /* Standard ANTLR3 library implementation
             */
            ctx->pPBJParser_fieldStack->push(ctx->pPBJParser_fieldStack, newAttributes, (void (*)(void *))fieldFree);
        }
    }

    // Blank out any previous free pointer, the user might or might install a new one.
    //
    newAttributes->free = NULL;

    // Indicate the position in the available stack that the current level is at
    //
    ctx->pPBJParser_fieldStack_limit++;

	/* Return value is the pointer to the new entry, which may be used locally
	 * without de-referencing via the context.
     */
    return  newAttributes;
}



/* globalAttributeScopeFuncDecl(scope)
 */
/* -----------------------------------------------------------------------------
 * Function declaration for creating a PBJParser_Symbols scope set 
 */
static pPBJParser_Symbols_SCOPE   pPBJParser_SymbolsPush(pPBJParser ctx);
static void ANTLR3_CDECL SymbolsFree(pPBJParser_Symbols_SCOPE scope);
/* ----------------------------------------------------------------------------- */

/* globalAttributeScopeFuncs(scope)
 */
/* attributeFuncs(scope)
 */

static void ANTLR3_CDECL SymbolsFree(pPBJParser_Symbols_SCOPE scope)
{
    ANTLR3_FREE(scope);
}

/** \brief Allocate initial memory for a PBJParser Symbols scope variable stack entry and
 *         add it to the top of the stack.
 *
 * \remark
 * By default the structure is freed with ANTLR_FREE(), but you can use the
 * the \@init action to install a pointer to a custom free() routine by
 * adding the code: 
 * \code 
 *   ctx->pPBJParser_SymbolsTop->free = myroutine;
 * \endcode
 *
 * With lots of comments of course! The routine should be declared in
 * \@members { } as: 
 * \code
 *   void ANTLR3_CDECL myfunc( pPBJParser_Symbols_SCOPE ptr). 
 * \endcode
 *
 * It should perform any custom freeing stuff that you need (call ANTLR_FREE3, not free()
 * NB: It should not free the pointer it is given, which is the scope stack entry itself
 * and will be freed by the function that calls your custom free routine.
 * 
 */ 
static pPBJParser_Symbols_SCOPE
pPBJParser_SymbolsPush(pPBJParser ctx)
{
    /* Pointer used to create a new set of attributes
     */
    pPBJParser_Symbols_SCOPE      newAttributes;

    /* Allocate the memory for a new structure if we need one.
     */
    if (ctx->pPBJParser_SymbolsStack->size(ctx->pPBJParser_SymbolsStack) > ctx->pPBJParser_SymbolsStack_limit)
    {
        // The current limit value was less than the number of scopes available on the stack so
        // we can just reuse one. Our limit tracks the stack count, so the index of the entry we want
        // is one less than that, or conveniently, the current value of limit.
        //
        newAttributes = (pPBJParser_Symbols_SCOPE)ctx->pPBJParser_SymbolsStack->get(ctx->pPBJParser_SymbolsStack, ctx->pPBJParser_SymbolsStack_limit);
    }
    else
    {
        // Need a new allocation
        //
        newAttributes = (pPBJParser_Symbols_SCOPE) ANTLR3_MALLOC(sizeof(PBJParser_Symbols_SCOPE));
        if  (newAttributes != NULL)
        {
            /* Standard ANTLR3 library implementation
             */
            ctx->pPBJParser_SymbolsStack->push(ctx->pPBJParser_SymbolsStack, newAttributes, (void (*)(void *))SymbolsFree);
        }
    }

    // Blank out any previous free pointer, the user might or might install a new one.
    //
    newAttributes->free = NULL;

    // Indicate the position in the available stack that the current level is at
    //
    ctx->pPBJParser_SymbolsStack_limit++;

	/* Return value is the pointer to the new entry, which may be used locally
	 * without de-referencing via the context.
     */
    return  newAttributes;
}

/* globalAttributeScopeFuncDecl(scope)
 */
/* -----------------------------------------------------------------------------
 * Function declaration for creating a PBJParser_NameSpace scope set 
 */
static pPBJParser_NameSpace_SCOPE   pPBJParser_NameSpacePush(pPBJParser ctx);
static void ANTLR3_CDECL NameSpaceFree(pPBJParser_NameSpace_SCOPE scope);
/* ----------------------------------------------------------------------------- */

/* globalAttributeScopeFuncs(scope)
 */
/* attributeFuncs(scope)
 */

static void ANTLR3_CDECL NameSpaceFree(pPBJParser_NameSpace_SCOPE scope)
{
    ANTLR3_FREE(scope);
}

/** \brief Allocate initial memory for a PBJParser NameSpace scope variable stack entry and
 *         add it to the top of the stack.
 *
 * \remark
 * By default the structure is freed with ANTLR_FREE(), but you can use the
 * the \@init action to install a pointer to a custom free() routine by
 * adding the code: 
 * \code 
 *   ctx->pPBJParser_NameSpaceTop->free = myroutine;
 * \endcode
 *
 * With lots of comments of course! The routine should be declared in
 * \@members { } as: 
 * \code
 *   void ANTLR3_CDECL myfunc( pPBJParser_NameSpace_SCOPE ptr). 
 * \endcode
 *
 * It should perform any custom freeing stuff that you need (call ANTLR_FREE3, not free()
 * NB: It should not free the pointer it is given, which is the scope stack entry itself
 * and will be freed by the function that calls your custom free routine.
 * 
 */ 
static pPBJParser_NameSpace_SCOPE
pPBJParser_NameSpacePush(pPBJParser ctx)
{
    /* Pointer used to create a new set of attributes
     */
    pPBJParser_NameSpace_SCOPE      newAttributes;

    /* Allocate the memory for a new structure if we need one.
     */
    if (ctx->pPBJParser_NameSpaceStack->size(ctx->pPBJParser_NameSpaceStack) > ctx->pPBJParser_NameSpaceStack_limit)
    {
        // The current limit value was less than the number of scopes available on the stack so
        // we can just reuse one. Our limit tracks the stack count, so the index of the entry we want
        // is one less than that, or conveniently, the current value of limit.
        //
        newAttributes = (pPBJParser_NameSpace_SCOPE)ctx->pPBJParser_NameSpaceStack->get(ctx->pPBJParser_NameSpaceStack, ctx->pPBJParser_NameSpaceStack_limit);
    }
    else
    {
        // Need a new allocation
        //
        newAttributes = (pPBJParser_NameSpace_SCOPE) ANTLR3_MALLOC(sizeof(PBJParser_NameSpace_SCOPE));
        if  (newAttributes != NULL)
        {
            /* Standard ANTLR3 library implementation
             */
            ctx->pPBJParser_NameSpaceStack->push(ctx->pPBJParser_NameSpaceStack, newAttributes, (void (*)(void *))NameSpaceFree);
        }
    }

    // Blank out any previous free pointer, the user might or might install a new one.
    //
    newAttributes->free = NULL;

    // Indicate the position in the available stack that the current level is at
    //
    ctx->pPBJParser_NameSpaceStack_limit++;

	/* Return value is the pointer to the new entry, which may be used locally
	 * without de-referencing via the context.
     */
    return  newAttributes;
}



/* ============================================================================= */

/* =============================================================================
 * Start of recognizer
 */



/** \brief Table of all token names in symbolic order, mainly used for
 *         error reporting.
 */
pANTLR3_UINT8   PBJParserTokenNames[82+4]
     = {
        (pANTLR3_UINT8) "<invalid>",       /* String to print to indicate an invalid token */
        (pANTLR3_UINT8) "<EOR>",
        (pANTLR3_UINT8) "<DOWN>", 
        (pANTLR3_UINT8) "<UP>", 
        (pANTLR3_UINT8) "PROTO",
        (pANTLR3_UINT8) "PACKAGELITERAL",
        (pANTLR3_UINT8) "QUALIFIEDIDENTIFIER",
        (pANTLR3_UINT8) "ITEM_TERMINATOR",
        (pANTLR3_UINT8) "IMPORTLITERAL",
        (pANTLR3_UINT8) "STRING_LITERAL",
        (pANTLR3_UINT8) "BLOCK_OPEN",
        (pANTLR3_UINT8) "BLOCK_CLOSE",
        (pANTLR3_UINT8) "MESSAGE",
        (pANTLR3_UINT8) "EXTEND",
        (pANTLR3_UINT8) "IDENTIFIER",
        (pANTLR3_UINT8) "EXTENSIONS",
        (pANTLR3_UINT8) "TO",
        (pANTLR3_UINT8) "RESERVE",
        (pANTLR3_UINT8) "ENUM",
        (pANTLR3_UINT8) "EQUALS",
        (pANTLR3_UINT8) "PBJOPTIONAL",
        (pANTLR3_UINT8) "REQUIRED",
        (pANTLR3_UINT8) "REPEATED",
        (pANTLR3_UINT8) "SQBRACKET_OPEN",
        (pANTLR3_UINT8) "SQBRACKET_CLOSE",
        (pANTLR3_UINT8) "DEFAULT",
        (pANTLR3_UINT8) "UINT32",
        (pANTLR3_UINT8) "INT32",
        (pANTLR3_UINT8) "SINT32",
        (pANTLR3_UINT8) "FIXED32",
        (pANTLR3_UINT8) "SFIXED32",
        (pANTLR3_UINT8) "UINT64",
        (pANTLR3_UINT8) "INT64",
        (pANTLR3_UINT8) "SINT64",
        (pANTLR3_UINT8) "FIXED64",
        (pANTLR3_UINT8) "SFIXED64",
        (pANTLR3_UINT8) "FLOAT",
        (pANTLR3_UINT8) "DOUBLE",
        (pANTLR3_UINT8) "BOOL",
        (pANTLR3_UINT8) "STRING",
        (pANTLR3_UINT8) "BYTES",
        (pANTLR3_UINT8) "NORMAL",
        (pANTLR3_UINT8) "VECTOR2F",
        (pANTLR3_UINT8) "VECTOR2D",
        (pANTLR3_UINT8) "VECTOR3F",
        (pANTLR3_UINT8) "VECTOR3D",
        (pANTLR3_UINT8) "VECTOR4F",
        (pANTLR3_UINT8) "VECTOR4D",
        (pANTLR3_UINT8) "QUATERNION",
        (pANTLR3_UINT8) "BOUNDINGSPHERE3F",
        (pANTLR3_UINT8) "BOUNDINGSPHERE3D",
        (pANTLR3_UINT8) "BOUNDINGBOX3F3F",
        (pANTLR3_UINT8) "BOUNDINGBOX3D3F",
        (pANTLR3_UINT8) "UINT8",
        (pANTLR3_UINT8) "INT8",
        (pANTLR3_UINT8) "SINT8",
        (pANTLR3_UINT8) "FIXED8",
        (pANTLR3_UINT8) "SFIXED8",
        (pANTLR3_UINT8) "INT16",
        (pANTLR3_UINT8) "SINT16",
        (pANTLR3_UINT8) "FIXED16",
        (pANTLR3_UINT8) "SFIXED16",
        (pANTLR3_UINT8) "UINT16",
        (pANTLR3_UINT8) "ANGLE",
        (pANTLR3_UINT8) "TIME",
        (pANTLR3_UINT8) "DURATION",
        (pANTLR3_UINT8) "UUID",
        (pANTLR3_UINT8) "SHA256",
        (pANTLR3_UINT8) "HEX_LITERAL",
        (pANTLR3_UINT8) "DECIMAL_LITERAL",
        (pANTLR3_UINT8) "OCTAL_LITERAL",
        (pANTLR3_UINT8) "FLOATING_POINT_LITERAL",
        (pANTLR3_UINT8) "BOOL_LITERAL",
        (pANTLR3_UINT8) "DOT",
        (pANTLR3_UINT8) "FLAGS8",
        (pANTLR3_UINT8) "FLAGS16",
        (pANTLR3_UINT8) "FLAGS32",
        (pANTLR3_UINT8) "FLAGS64",
        (pANTLR3_UINT8) "STRING_GUTS",
        (pANTLR3_UINT8) "EscapeSequence",
        (pANTLR3_UINT8) "HexDigit",
        (pANTLR3_UINT8) "Exponent",
        (pANTLR3_UINT8) "OctalEscape",
        (pANTLR3_UINT8) "UnicodeEscape",
        (pANTLR3_UINT8) "COMMENT",
        (pANTLR3_UINT8) "WS"
       };

        
/* ruleAttributeScopeFuncMacro(scope)
 */
/** Function for popping the top value from a pPBJParser_messageStack
 */
void
pPBJParser_messagePop(pPBJParser ctx)
{
    // First see if the user defined a function they want to be called when a
    // scope is popped/freed.
    //
	// If the user supplied the scope entries with a free function,then call it first
	//
    if	(SCOPE_TOP(message)->free != NULL)
	{
        SCOPE_TOP(message)->free(SCOPE_TOP(message));
	}

    // Now we decrement the scope's upper limit bound. We do not actually pop the scope as
    // we want to reuse scope entries if we do continuous push and pops. Most scopes don't
    // next too far so we don't want to keep freeing and allocating them
    //
    ctx->pPBJParser_messageStack_limit--;
    SCOPE_TOP(message) = (pPBJParser_message_SCOPE)(ctx->pPBJParser_messageStack->get(ctx->pPBJParser_messageStack, ctx->pPBJParser_messageStack_limit - 1));
}
/* ruleAttributeScopeFuncMacro(scope)
 */
/** Function for popping the top value from a pPBJParser_enum_defStack
 */
void
pPBJParser_enum_defPop(pPBJParser ctx)
{
    // First see if the user defined a function they want to be called when a
    // scope is popped/freed.
    //
	// If the user supplied the scope entries with a free function,then call it first
	//
    if	(SCOPE_TOP(enum_def)->free != NULL)
	{
        SCOPE_TOP(enum_def)->free(SCOPE_TOP(enum_def));
	}

    // Now we decrement the scope's upper limit bound. We do not actually pop the scope as
    // we want to reuse scope entries if we do continuous push and pops. Most scopes don't
    // next too far so we don't want to keep freeing and allocating them
    //
    ctx->pPBJParser_enum_defStack_limit--;
    SCOPE_TOP(enum_def) = (pPBJParser_enum_def_SCOPE)(ctx->pPBJParser_enum_defStack->get(ctx->pPBJParser_enum_defStack, ctx->pPBJParser_enum_defStack_limit - 1));
}
/* ruleAttributeScopeFuncMacro(scope)
 */
/** Function for popping the top value from a pPBJParser_flags_defStack
 */
void
pPBJParser_flags_defPop(pPBJParser ctx)
{
    // First see if the user defined a function they want to be called when a
    // scope is popped/freed.
    //
	// If the user supplied the scope entries with a free function,then call it first
	//
    if	(SCOPE_TOP(flags_def)->free != NULL)
	{
        SCOPE_TOP(flags_def)->free(SCOPE_TOP(flags_def));
	}

    // Now we decrement the scope's upper limit bound. We do not actually pop the scope as
    // we want to reuse scope entries if we do continuous push and pops. Most scopes don't
    // next too far so we don't want to keep freeing and allocating them
    //
    ctx->pPBJParser_flags_defStack_limit--;
    SCOPE_TOP(flags_def) = (pPBJParser_flags_def_SCOPE)(ctx->pPBJParser_flags_defStack->get(ctx->pPBJParser_flags_defStack, ctx->pPBJParser_flags_defStack_limit - 1));
}
/* ruleAttributeScopeFuncMacro(scope)
 */
/** Function for popping the top value from a pPBJParser_fieldStack
 */
void
pPBJParser_fieldPop(pPBJParser ctx)
{
    // First see if the user defined a function they want to be called when a
    // scope is popped/freed.
    //
	// If the user supplied the scope entries with a free function,then call it first
	//
    if	(SCOPE_TOP(field)->free != NULL)
	{
        SCOPE_TOP(field)->free(SCOPE_TOP(field));
	}

    // Now we decrement the scope's upper limit bound. We do not actually pop the scope as
    // we want to reuse scope entries if we do continuous push and pops. Most scopes don't
    // next too far so we don't want to keep freeing and allocating them
    //
    ctx->pPBJParser_fieldStack_limit--;
    SCOPE_TOP(field) = (pPBJParser_field_SCOPE)(ctx->pPBJParser_fieldStack->get(ctx->pPBJParser_fieldStack, ctx->pPBJParser_fieldStack_limit - 1));
}

/* globalAttributeScopeFuncMacro(scope)
 */
/** Function  for popping the top value from a pPBJParser_SymbolsStack
 */
void
pPBJParser_SymbolsPop(pPBJParser ctx)
{
    // First see if the user defined a function they want to be called when a
    // scope is popped/freed.
    //
	// If the user supplied the scope entries with a free function,then call it first
	//
    if	(SCOPE_TOP(Symbols)->free != NULL)
	{
        SCOPE_TOP(Symbols)->free(SCOPE_TOP(Symbols));
	}

    // Now we decrement the scope's upper limit bound. We do not actually pop the scope as
    // we want to reuse scope entries if we do continuous push and pops. Most scopes don't
    // next too far so we don't want to keep freeing and allocating them
    //
    ctx->pPBJParser_SymbolsStack_limit--;
    SCOPE_TOP(Symbols) = (pPBJParser_Symbols_SCOPE)(ctx->pPBJParser_SymbolsStack->get(ctx->pPBJParser_SymbolsStack, ctx->pPBJParser_SymbolsStack_limit - 1));
}/* globalAttributeScopeFuncMacro(scope)
 */
/** Function  for popping the top value from a pPBJParser_NameSpaceStack
 */
void
pPBJParser_NameSpacePop(pPBJParser ctx)
{
    // First see if the user defined a function they want to be called when a
    // scope is popped/freed.
    //
	// If the user supplied the scope entries with a free function,then call it first
	//
    if	(SCOPE_TOP(NameSpace)->free != NULL)
	{
        SCOPE_TOP(NameSpace)->free(SCOPE_TOP(NameSpace));
	}

    // Now we decrement the scope's upper limit bound. We do not actually pop the scope as
    // we want to reuse scope entries if we do continuous push and pops. Most scopes don't
    // next too far so we don't want to keep freeing and allocating them
    //
    ctx->pPBJParser_NameSpaceStack_limit--;
    SCOPE_TOP(NameSpace) = (pPBJParser_NameSpace_SCOPE)(ctx->pPBJParser_NameSpaceStack->get(ctx->pPBJParser_NameSpaceStack, ctx->pPBJParser_NameSpaceStack_limit - 1));
}

// Forward declare the locally static matching functions we have generated.
//
static PBJParser_protocol_return	protocol    (pPBJParser ctx);
static PBJParser_protoroot_return	protoroot    (pPBJParser ctx);
static PBJParser_package_return	package    (pPBJParser ctx);
static PBJParser_importrule_return	importrule    (pPBJParser ctx);
static PBJParser_message_return	message    (pPBJParser ctx);
static PBJParser_message_or_extend_return	message_or_extend    (pPBJParser ctx);
static PBJParser_message_identifier_return	message_identifier    (pPBJParser ctx);
static PBJParser_message_elements_return	message_elements    (pPBJParser ctx);
static PBJParser_message_element_return	message_element    (pPBJParser ctx);
static PBJParser_extensions_return	extensions    (pPBJParser ctx);
static PBJParser_reservations_return	reservations    (pPBJParser ctx);
static PBJParser_integer_inclusive_return	integer_inclusive    (pPBJParser ctx);
static PBJParser_enum_def_return	enum_def    (pPBJParser ctx);
static PBJParser_enum_element_return	enum_element    (pPBJParser ctx);
static PBJParser_enum_identifier_return	enum_identifier    (pPBJParser ctx);
static PBJParser_flags_def_return	flags_def    (pPBJParser ctx);
static PBJParser_flag_identifier_return	flag_identifier    (pPBJParser ctx);
static PBJParser_flag_element_return	flag_element    (pPBJParser ctx);
static PBJParser_field_return	field    (pPBJParser ctx);
static PBJParser_field_offset_return	field_offset    (pPBJParser ctx);
static PBJParser_field_name_return	field_name    (pPBJParser ctx);
static PBJParser_field_type_return	field_type    (pPBJParser ctx);
static PBJParser_multiplicitive_type_return	multiplicitive_type    (pPBJParser ctx);
static PBJParser_array_spec_return	array_spec    (pPBJParser ctx);
static PBJParser_default_value_return	default_value    (pPBJParser ctx);
static PBJParser_numeric_type_return	numeric_type    (pPBJParser ctx);
static PBJParser_array_type_return	array_type    (pPBJParser ctx);
static PBJParser_multiplicitive_advanced_type_return	multiplicitive_advanced_type    (pPBJParser ctx);
static PBJParser_advanced_numeric_type_return	advanced_numeric_type    (pPBJParser ctx);
static PBJParser_advanced_array_type_return	advanced_array_type    (pPBJParser ctx);
static PBJParser_literal_value_return	literal_value    (pPBJParser ctx);
static PBJParser_flags_return	flags    (pPBJParser ctx);
static PBJParser_integer_return	integer    (pPBJParser ctx);
static void	PBJParserFree(pPBJParser ctx);
/* For use in tree output where we are accumulating rule labels via label += ruleRef
 * we need a function that knows how to free a return scope when the list is destroyed. 
 * We cannot just use ANTLR3_FREE because in debug tracking mode, this is a macro.
 */
static	void ANTLR3_CDECL freeScope(void * scope)
{
    ANTLR3_FREE(scope);
}

/** \brief Name of the grammar file that generated this code
 */
static const char fileName[] = "PBJ.g";

/** \brief Return the name of the grammar file that generated this code.
 */
static const char * getGrammarFileName()
{
	return fileName;
}
/** \brief Create a new PBJParser parser and return a context for it.
 *
 * \param[in] instream Pointer to an input stream interface.
 *
 * \return Pointer to new parser context upon success.
 */
ANTLR3_API pPBJParser
PBJParserNew   (pANTLR3_COMMON_TOKEN_STREAM instream)
{
	// See if we can create a new parser with the standard constructor
	//
	return PBJParserNewSSD(instream, NULL);
}

/** \brief Create a new PBJParser parser and return a context for it.
 *
 * \param[in] instream Pointer to an input stream interface.
 *
 * \return Pointer to new parser context upon success.
 */
ANTLR3_API pPBJParser
PBJParserNewSSD   (pANTLR3_COMMON_TOKEN_STREAM instream, pANTLR3_RECOGNIZER_SHARED_STATE state)
{
    pPBJParser ctx;	    /* Context structure we will build and return   */
    
    ctx	= (pPBJParser) ANTLR3_CALLOC(1, sizeof(PBJParser));
    
    if	(ctx == NULL)
    {
		// Failed to allocate memory for parser context
		//
        return  NULL;
    }
    
    /* -------------------------------------------------------------------
     * Memory for basic structure is allocated, now to fill in
     * the base ANTLR3 structures. We initialize the function pointers
     * for the standard ANTLR3 parser function set, but upon return
     * from here, the programmer may set the pointers to provide custom
     * implementations of each function. 
     *
     * We don't use the macros defined in PBJParser.h here, in order that you can get a sense
     * of what goes where.
     */

    /* Create a base parser/recognizer, using the supplied token stream
     */
    ctx->pParser	    = antlr3ParserNewStream(ANTLR3_SIZE_HINT, instream->tstream, state);
    /* Install the implementation of our PBJParser interface
     */
    ctx->protocol	= protocol;
    ctx->protoroot	= protoroot;
    ctx->package	= package;
    ctx->importrule	= importrule;
    ctx->message	= message;
    ctx->message_or_extend	= message_or_extend;
    ctx->message_identifier	= message_identifier;
    ctx->message_elements	= message_elements;
    ctx->message_element	= message_element;
    ctx->extensions	= extensions;
    ctx->reservations	= reservations;
    ctx->integer_inclusive	= integer_inclusive;
    ctx->enum_def	= enum_def;
    ctx->enum_element	= enum_element;
    ctx->enum_identifier	= enum_identifier;
    ctx->flags_def	= flags_def;
    ctx->flag_identifier	= flag_identifier;
    ctx->flag_element	= flag_element;
    ctx->field	= field;
    ctx->field_offset	= field_offset;
    ctx->field_name	= field_name;
    ctx->field_type	= field_type;
    ctx->multiplicitive_type	= multiplicitive_type;
    ctx->array_spec	= array_spec;
    ctx->default_value	= default_value;
    ctx->numeric_type	= numeric_type;
    ctx->array_type	= array_type;
    ctx->multiplicitive_advanced_type	= multiplicitive_advanced_type;
    ctx->advanced_numeric_type	= advanced_numeric_type;
    ctx->advanced_array_type	= advanced_array_type;
    ctx->literal_value	= literal_value;
    ctx->flags	= flags;
    ctx->integer	= integer;
    ctx->free			= PBJParserFree;
    ctx->getGrammarFileName	= getGrammarFileName;
    
    /* Install the scope pushing methods.
     */
    /* ruleAttributeScope(scope)
     */
    ctx->pPBJParser_messagePush     = pPBJParser_messagePush;
    ctx->pPBJParser_messageStack    = antlr3StackNew(0);
    ctx->pPBJParser_messageStack_limit    = 0;
    ctx->pPBJParser_messageTop      = NULL;
    /* ruleAttributeScope(scope)
     */
    ctx->pPBJParser_enum_defPush     = pPBJParser_enum_defPush;
    ctx->pPBJParser_enum_defStack    = antlr3StackNew(0);
    ctx->pPBJParser_enum_defStack_limit    = 0;
    ctx->pPBJParser_enum_defTop      = NULL;
    /* ruleAttributeScope(scope)
     */
    ctx->pPBJParser_flags_defPush     = pPBJParser_flags_defPush;
    ctx->pPBJParser_flags_defStack    = antlr3StackNew(0);
    ctx->pPBJParser_flags_defStack_limit    = 0;
    ctx->pPBJParser_flags_defTop      = NULL;
    /* ruleAttributeScope(scope)
     */
    ctx->pPBJParser_fieldPush     = pPBJParser_fieldPush;
    ctx->pPBJParser_fieldStack    = antlr3StackNew(0);
    ctx->pPBJParser_fieldStack_limit    = 0;
    ctx->pPBJParser_fieldTop      = NULL;

    /* globalAttributeScope(scope)
     */
    ctx->pPBJParser_SymbolsPush     = pPBJParser_SymbolsPush;
    ctx->pPBJParser_SymbolsStack    = antlr3StackNew(0);
    ctx->pPBJParser_SymbolsStack_limit    = 0;
    ctx->pPBJParser_SymbolsTop      = NULL;
    /* globalAttributeScope(scope)
     */
    ctx->pPBJParser_NameSpacePush     = pPBJParser_NameSpacePush;
    ctx->pPBJParser_NameSpaceStack    = antlr3StackNew(0);
    ctx->pPBJParser_NameSpaceStack_limit    = 0;
    ctx->pPBJParser_NameSpaceTop      = NULL;

    ADAPTOR	= ANTLR3_TREE_ADAPTORNew(instream->tstream->tokenSource->strFactory);
    ctx->vectors	= antlr3VectorFactoryNew(0);
    

	
    /* Install the token table
     */
    PSRSTATE->tokenNames   = PBJParserTokenNames;
    
    
    /* Return the newly built parser to the caller
     */
    return  ctx;
}

/** Free the parser resources
 */
 static void
 PBJParserFree(pPBJParser ctx)
 {
    /* Free any scope memory
     */
    /* ruleAttributeScope(scope)
     */
    ctx->pPBJParser_messageStack->free(ctx->pPBJParser_messageStack);
    /* ruleAttributeScope(scope)
     */
    ctx->pPBJParser_enum_defStack->free(ctx->pPBJParser_enum_defStack);
    /* ruleAttributeScope(scope)
     */
    ctx->pPBJParser_flags_defStack->free(ctx->pPBJParser_flags_defStack);
    /* ruleAttributeScope(scope)
     */
    ctx->pPBJParser_fieldStack->free(ctx->pPBJParser_fieldStack);

    /* globalAttributeScope(scope)  
     */
    ctx->pPBJParser_SymbolsStack->free(ctx->pPBJParser_SymbolsStack);
    /* globalAttributeScope(scope)  
     */
    ctx->pPBJParser_NameSpaceStack->free(ctx->pPBJParser_NameSpaceStack);

    
    ctx->vectors->close(ctx->vectors);
    /* We created the adaptor so we must free it
     */
    ADAPTOR->free(ADAPTOR);
	// Free this parser
	//
    ctx->pParser->free(ctx->pParser);
    ANTLR3_FREE(ctx);

    /* Everything is released, so we can return
     */
    return;
 }
 
/** Return token names used by this parser
 *
 * The returned pointer is used as an index into the token names table (using the token 
 * number as the index).
 * 
 * \return Pointer to first char * in the table.
 */
static pANTLR3_UINT8    *getTokenNames() 
{
        return PBJParserTokenNames; 
}


        #include "PBJParseUtil.h"

    
/* Declare the bitsets
 */

/** Bitset defining follow set for error recovery in rule state: FOLLOW_protoroot_in_protocol104  */
static	ANTLR3_BITWORD FOLLOW_protoroot_in_protocol104_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_protoroot_in_protocol104	= { FOLLOW_protoroot_in_protocol104_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_importrule_in_protoroot139  */
static	ANTLR3_BITWORD FOLLOW_importrule_in_protoroot139_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000120) };
static  ANTLR3_BITSET_LIST FOLLOW_importrule_in_protoroot139	= { FOLLOW_importrule_in_protoroot139_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_package_in_protoroot142  */
static	ANTLR3_BITWORD FOLLOW_package_in_protoroot142_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000003122) };
static  ANTLR3_BITSET_LIST FOLLOW_package_in_protoroot142	= { FOLLOW_package_in_protoroot142_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_importrule_in_protoroot144  */
static	ANTLR3_BITWORD FOLLOW_importrule_in_protoroot144_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000003122) };
static  ANTLR3_BITSET_LIST FOLLOW_importrule_in_protoroot144	= { FOLLOW_importrule_in_protoroot144_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_message_in_protoroot147  */
static	ANTLR3_BITWORD FOLLOW_message_in_protoroot147_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000003002) };
static  ANTLR3_BITSET_LIST FOLLOW_message_in_protoroot147	= { FOLLOW_message_in_protoroot147_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_importrule_in_protoroot160  */
static	ANTLR3_BITWORD FOLLOW_importrule_in_protoroot160_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000003122) };
static  ANTLR3_BITSET_LIST FOLLOW_importrule_in_protoroot160	= { FOLLOW_importrule_in_protoroot160_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_message_in_protoroot163  */
static	ANTLR3_BITWORD FOLLOW_message_in_protoroot163_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000003002) };
static  ANTLR3_BITSET_LIST FOLLOW_message_in_protoroot163	= { FOLLOW_message_in_protoroot163_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_PACKAGELITERAL_in_package214  */
static	ANTLR3_BITWORD FOLLOW_PACKAGELITERAL_in_package214_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000040) };
static  ANTLR3_BITSET_LIST FOLLOW_PACKAGELITERAL_in_package214	= { FOLLOW_PACKAGELITERAL_in_package214_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_QUALIFIEDIDENTIFIER_in_package216  */
static	ANTLR3_BITWORD FOLLOW_QUALIFIEDIDENTIFIER_in_package216_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000080) };
static  ANTLR3_BITSET_LIST FOLLOW_QUALIFIEDIDENTIFIER_in_package216	= { FOLLOW_QUALIFIEDIDENTIFIER_in_package216_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ITEM_TERMINATOR_in_package218  */
static	ANTLR3_BITWORD FOLLOW_ITEM_TERMINATOR_in_package218_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_ITEM_TERMINATOR_in_package218	= { FOLLOW_ITEM_TERMINATOR_in_package218_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_IMPORTLITERAL_in_importrule269  */
static	ANTLR3_BITWORD FOLLOW_IMPORTLITERAL_in_importrule269_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000200) };
static  ANTLR3_BITSET_LIST FOLLOW_IMPORTLITERAL_in_importrule269	= { FOLLOW_IMPORTLITERAL_in_importrule269_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_STRING_LITERAL_in_importrule271  */
static	ANTLR3_BITWORD FOLLOW_STRING_LITERAL_in_importrule271_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000080) };
static  ANTLR3_BITSET_LIST FOLLOW_STRING_LITERAL_in_importrule271	= { FOLLOW_STRING_LITERAL_in_importrule271_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ITEM_TERMINATOR_in_importrule273  */
static	ANTLR3_BITWORD FOLLOW_ITEM_TERMINATOR_in_importrule273_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_ITEM_TERMINATOR_in_importrule273	= { FOLLOW_ITEM_TERMINATOR_in_importrule273_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_message_or_extend_in_message326  */
static	ANTLR3_BITWORD FOLLOW_message_or_extend_in_message326_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000004000) };
static  ANTLR3_BITSET_LIST FOLLOW_message_or_extend_in_message326	= { FOLLOW_message_or_extend_in_message326_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_message_identifier_in_message328  */
static	ANTLR3_BITWORD FOLLOW_message_identifier_in_message328_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000400) };
static  ANTLR3_BITSET_LIST FOLLOW_message_identifier_in_message328	= { FOLLOW_message_identifier_in_message328_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_BLOCK_OPEN_in_message330  */
static	ANTLR3_BITWORD FOLLOW_BLOCK_OPEN_in_message330_bits[]	= { ANTLR3_UINT64_LIT(0x000000000076B800), ANTLR3_UINT64_LIT(0x0000000000003C00) };
static  ANTLR3_BITSET_LIST FOLLOW_BLOCK_OPEN_in_message330	= { FOLLOW_BLOCK_OPEN_in_message330_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_message_elements_in_message332  */
static	ANTLR3_BITWORD FOLLOW_message_elements_in_message332_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000800) };
static  ANTLR3_BITSET_LIST FOLLOW_message_elements_in_message332	= { FOLLOW_message_elements_in_message332_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_BLOCK_CLOSE_in_message334  */
static	ANTLR3_BITWORD FOLLOW_BLOCK_CLOSE_in_message334_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_BLOCK_CLOSE_in_message334	= { FOLLOW_BLOCK_CLOSE_in_message334_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_MESSAGE_in_message_or_extend389  */
static	ANTLR3_BITWORD FOLLOW_MESSAGE_in_message_or_extend389_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_MESSAGE_in_message_or_extend389	= { FOLLOW_MESSAGE_in_message_or_extend389_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_EXTEND_in_message_or_extend411  */
static	ANTLR3_BITWORD FOLLOW_EXTEND_in_message_or_extend411_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_EXTEND_in_message_or_extend411	= { FOLLOW_EXTEND_in_message_or_extend411_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_IDENTIFIER_in_message_identifier434  */
static	ANTLR3_BITWORD FOLLOW_IDENTIFIER_in_message_identifier434_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_IDENTIFIER_in_message_identifier434	= { FOLLOW_IDENTIFIER_in_message_identifier434_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_message_element_in_message_elements476  */
static	ANTLR3_BITWORD FOLLOW_message_element_in_message_elements476_bits[]	= { ANTLR3_UINT64_LIT(0x000000000076B002), ANTLR3_UINT64_LIT(0x0000000000003C00) };
static  ANTLR3_BITSET_LIST FOLLOW_message_element_in_message_elements476	= { FOLLOW_message_element_in_message_elements476_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_field_in_message_element497  */
static	ANTLR3_BITWORD FOLLOW_field_in_message_element497_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_field_in_message_element497	= { FOLLOW_field_in_message_element497_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_message_in_message_element502  */
static	ANTLR3_BITWORD FOLLOW_message_in_message_element502_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_message_in_message_element502	= { FOLLOW_message_in_message_element502_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_enum_def_in_message_element507  */
static	ANTLR3_BITWORD FOLLOW_enum_def_in_message_element507_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_enum_def_in_message_element507	= { FOLLOW_enum_def_in_message_element507_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_flags_def_in_message_element512  */
static	ANTLR3_BITWORD FOLLOW_flags_def_in_message_element512_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_flags_def_in_message_element512	= { FOLLOW_flags_def_in_message_element512_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_extensions_in_message_element522  */
static	ANTLR3_BITWORD FOLLOW_extensions_in_message_element522_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_extensions_in_message_element522	= { FOLLOW_extensions_in_message_element522_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_reservations_in_message_element532  */
static	ANTLR3_BITWORD FOLLOW_reservations_in_message_element532_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_reservations_in_message_element532	= { FOLLOW_reservations_in_message_element532_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_EXTENSIONS_in_extensions561  */
static	ANTLR3_BITWORD FOLLOW_EXTENSIONS_in_extensions561_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000070) };
static  ANTLR3_BITSET_LIST FOLLOW_EXTENSIONS_in_extensions561	= { FOLLOW_EXTENSIONS_in_extensions561_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_integer_in_extensions563  */
static	ANTLR3_BITWORD FOLLOW_integer_in_extensions563_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000010000) };
static  ANTLR3_BITSET_LIST FOLLOW_integer_in_extensions563	= { FOLLOW_integer_in_extensions563_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_TO_in_extensions565  */
static	ANTLR3_BITWORD FOLLOW_TO_in_extensions565_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000070) };
static  ANTLR3_BITSET_LIST FOLLOW_TO_in_extensions565	= { FOLLOW_TO_in_extensions565_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_integer_inclusive_in_extensions567  */
static	ANTLR3_BITWORD FOLLOW_integer_inclusive_in_extensions567_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000080) };
static  ANTLR3_BITSET_LIST FOLLOW_integer_inclusive_in_extensions567	= { FOLLOW_integer_inclusive_in_extensions567_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ITEM_TERMINATOR_in_extensions569  */
static	ANTLR3_BITWORD FOLLOW_ITEM_TERMINATOR_in_extensions569_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_ITEM_TERMINATOR_in_extensions569	= { FOLLOW_ITEM_TERMINATOR_in_extensions569_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_RESERVE_in_reservations626  */
static	ANTLR3_BITWORD FOLLOW_RESERVE_in_reservations626_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000070) };
static  ANTLR3_BITSET_LIST FOLLOW_RESERVE_in_reservations626	= { FOLLOW_RESERVE_in_reservations626_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_integer_in_reservations628  */
static	ANTLR3_BITWORD FOLLOW_integer_in_reservations628_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000010000) };
static  ANTLR3_BITSET_LIST FOLLOW_integer_in_reservations628	= { FOLLOW_integer_in_reservations628_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_TO_in_reservations630  */
static	ANTLR3_BITWORD FOLLOW_TO_in_reservations630_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000070) };
static  ANTLR3_BITSET_LIST FOLLOW_TO_in_reservations630	= { FOLLOW_TO_in_reservations630_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_integer_inclusive_in_reservations632  */
static	ANTLR3_BITWORD FOLLOW_integer_inclusive_in_reservations632_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000080) };
static  ANTLR3_BITSET_LIST FOLLOW_integer_inclusive_in_reservations632	= { FOLLOW_integer_inclusive_in_reservations632_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ITEM_TERMINATOR_in_reservations634  */
static	ANTLR3_BITWORD FOLLOW_ITEM_TERMINATOR_in_reservations634_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_ITEM_TERMINATOR_in_reservations634	= { FOLLOW_ITEM_TERMINATOR_in_reservations634_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_integer_in_integer_inclusive665  */
static	ANTLR3_BITWORD FOLLOW_integer_in_integer_inclusive665_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_integer_in_integer_inclusive665	= { FOLLOW_integer_in_integer_inclusive665_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ENUM_in_enum_def713  */
static	ANTLR3_BITWORD FOLLOW_ENUM_in_enum_def713_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000004000) };
static  ANTLR3_BITSET_LIST FOLLOW_ENUM_in_enum_def713	= { FOLLOW_ENUM_in_enum_def713_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_enum_identifier_in_enum_def715  */
static	ANTLR3_BITWORD FOLLOW_enum_identifier_in_enum_def715_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000400) };
static  ANTLR3_BITSET_LIST FOLLOW_enum_identifier_in_enum_def715	= { FOLLOW_enum_identifier_in_enum_def715_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_BLOCK_OPEN_in_enum_def717  */
static	ANTLR3_BITWORD FOLLOW_BLOCK_OPEN_in_enum_def717_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000004000) };
static  ANTLR3_BITSET_LIST FOLLOW_BLOCK_OPEN_in_enum_def717	= { FOLLOW_BLOCK_OPEN_in_enum_def717_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_enum_element_in_enum_def719  */
static	ANTLR3_BITWORD FOLLOW_enum_element_in_enum_def719_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000004800) };
static  ANTLR3_BITSET_LIST FOLLOW_enum_element_in_enum_def719	= { FOLLOW_enum_element_in_enum_def719_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_BLOCK_CLOSE_in_enum_def722  */
static	ANTLR3_BITWORD FOLLOW_BLOCK_CLOSE_in_enum_def722_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_BLOCK_CLOSE_in_enum_def722	= { FOLLOW_BLOCK_CLOSE_in_enum_def722_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_IDENTIFIER_in_enum_element782  */
static	ANTLR3_BITWORD FOLLOW_IDENTIFIER_in_enum_element782_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000080000) };
static  ANTLR3_BITSET_LIST FOLLOW_IDENTIFIER_in_enum_element782	= { FOLLOW_IDENTIFIER_in_enum_element782_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_EQUALS_in_enum_element784  */
static	ANTLR3_BITWORD FOLLOW_EQUALS_in_enum_element784_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000070) };
static  ANTLR3_BITSET_LIST FOLLOW_EQUALS_in_enum_element784	= { FOLLOW_EQUALS_in_enum_element784_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_integer_in_enum_element786  */
static	ANTLR3_BITWORD FOLLOW_integer_in_enum_element786_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000080) };
static  ANTLR3_BITSET_LIST FOLLOW_integer_in_enum_element786	= { FOLLOW_integer_in_enum_element786_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ITEM_TERMINATOR_in_enum_element788  */
static	ANTLR3_BITWORD FOLLOW_ITEM_TERMINATOR_in_enum_element788_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_ITEM_TERMINATOR_in_enum_element788	= { FOLLOW_ITEM_TERMINATOR_in_enum_element788_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_IDENTIFIER_in_enum_identifier835  */
static	ANTLR3_BITWORD FOLLOW_IDENTIFIER_in_enum_identifier835_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_IDENTIFIER_in_enum_identifier835	= { FOLLOW_IDENTIFIER_in_enum_identifier835_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_flags_in_flags_def882  */
static	ANTLR3_BITWORD FOLLOW_flags_in_flags_def882_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000004000) };
static  ANTLR3_BITSET_LIST FOLLOW_flags_in_flags_def882	= { FOLLOW_flags_in_flags_def882_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_flag_identifier_in_flags_def884  */
static	ANTLR3_BITWORD FOLLOW_flag_identifier_in_flags_def884_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000400) };
static  ANTLR3_BITSET_LIST FOLLOW_flag_identifier_in_flags_def884	= { FOLLOW_flag_identifier_in_flags_def884_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_BLOCK_OPEN_in_flags_def886  */
static	ANTLR3_BITWORD FOLLOW_BLOCK_OPEN_in_flags_def886_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000004000) };
static  ANTLR3_BITSET_LIST FOLLOW_BLOCK_OPEN_in_flags_def886	= { FOLLOW_BLOCK_OPEN_in_flags_def886_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_flag_element_in_flags_def888  */
static	ANTLR3_BITWORD FOLLOW_flag_element_in_flags_def888_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000004800) };
static  ANTLR3_BITSET_LIST FOLLOW_flag_element_in_flags_def888	= { FOLLOW_flag_element_in_flags_def888_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_BLOCK_CLOSE_in_flags_def891  */
static	ANTLR3_BITWORD FOLLOW_BLOCK_CLOSE_in_flags_def891_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_BLOCK_CLOSE_in_flags_def891	= { FOLLOW_BLOCK_CLOSE_in_flags_def891_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_IDENTIFIER_in_flag_identifier952  */
static	ANTLR3_BITWORD FOLLOW_IDENTIFIER_in_flag_identifier952_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_IDENTIFIER_in_flag_identifier952	= { FOLLOW_IDENTIFIER_in_flag_identifier952_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_IDENTIFIER_in_flag_element975  */
static	ANTLR3_BITWORD FOLLOW_IDENTIFIER_in_flag_element975_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000080000) };
static  ANTLR3_BITSET_LIST FOLLOW_IDENTIFIER_in_flag_element975	= { FOLLOW_IDENTIFIER_in_flag_element975_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_EQUALS_in_flag_element977  */
static	ANTLR3_BITWORD FOLLOW_EQUALS_in_flag_element977_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000070) };
static  ANTLR3_BITSET_LIST FOLLOW_EQUALS_in_flag_element977	= { FOLLOW_EQUALS_in_flag_element977_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_integer_in_flag_element979  */
static	ANTLR3_BITWORD FOLLOW_integer_in_flag_element979_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000080) };
static  ANTLR3_BITSET_LIST FOLLOW_integer_in_flag_element979	= { FOLLOW_integer_in_flag_element979_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ITEM_TERMINATOR_in_flag_element981  */
static	ANTLR3_BITWORD FOLLOW_ITEM_TERMINATOR_in_flag_element981_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_ITEM_TERMINATOR_in_flag_element981	= { FOLLOW_ITEM_TERMINATOR_in_flag_element981_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_PBJOPTIONAL_in_field1050  */
static	ANTLR3_BITWORD FOLLOW_PBJOPTIONAL_in_field1050_bits[]	= { ANTLR3_UINT64_LIT(0x001FFE0000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_PBJOPTIONAL_in_field1050	= { FOLLOW_PBJOPTIONAL_in_field1050_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_multiplicitive_type_in_field1052  */
static	ANTLR3_BITWORD FOLLOW_multiplicitive_type_in_field1052_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000004000) };
static  ANTLR3_BITSET_LIST FOLLOW_multiplicitive_type_in_field1052	= { FOLLOW_multiplicitive_type_in_field1052_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_field_name_in_field1054  */
static	ANTLR3_BITWORD FOLLOW_field_name_in_field1054_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000080000) };
static  ANTLR3_BITSET_LIST FOLLOW_field_name_in_field1054	= { FOLLOW_field_name_in_field1054_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_EQUALS_in_field1056  */
static	ANTLR3_BITWORD FOLLOW_EQUALS_in_field1056_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000070) };
static  ANTLR3_BITSET_LIST FOLLOW_EQUALS_in_field1056	= { FOLLOW_EQUALS_in_field1056_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_field_offset_in_field1058  */
static	ANTLR3_BITWORD FOLLOW_field_offset_in_field1058_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000800080) };
static  ANTLR3_BITSET_LIST FOLLOW_field_offset_in_field1058	= { FOLLOW_field_offset_in_field1058_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_default_value_in_field1060  */
static	ANTLR3_BITWORD FOLLOW_default_value_in_field1060_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000080) };
static  ANTLR3_BITSET_LIST FOLLOW_default_value_in_field1060	= { FOLLOW_default_value_in_field1060_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ITEM_TERMINATOR_in_field1063  */
static	ANTLR3_BITWORD FOLLOW_ITEM_TERMINATOR_in_field1063_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_ITEM_TERMINATOR_in_field1063	= { FOLLOW_ITEM_TERMINATOR_in_field1063_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_REQUIRED_in_field1072  */
static	ANTLR3_BITWORD FOLLOW_REQUIRED_in_field1072_bits[]	= { ANTLR3_UINT64_LIT(0x001FFE0000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_REQUIRED_in_field1072	= { FOLLOW_REQUIRED_in_field1072_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_REPEATED_in_field1074  */
static	ANTLR3_BITWORD FOLLOW_REPEATED_in_field1074_bits[]	= { ANTLR3_UINT64_LIT(0x001FFE0000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_REPEATED_in_field1074	= { FOLLOW_REPEATED_in_field1074_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_multiplicitive_type_in_field1077  */
static	ANTLR3_BITWORD FOLLOW_multiplicitive_type_in_field1077_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000004000) };
static  ANTLR3_BITSET_LIST FOLLOW_multiplicitive_type_in_field1077	= { FOLLOW_multiplicitive_type_in_field1077_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_field_name_in_field1079  */
static	ANTLR3_BITWORD FOLLOW_field_name_in_field1079_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000080000) };
static  ANTLR3_BITSET_LIST FOLLOW_field_name_in_field1079	= { FOLLOW_field_name_in_field1079_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_EQUALS_in_field1081  */
static	ANTLR3_BITWORD FOLLOW_EQUALS_in_field1081_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000070) };
static  ANTLR3_BITSET_LIST FOLLOW_EQUALS_in_field1081	= { FOLLOW_EQUALS_in_field1081_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_field_offset_in_field1083  */
static	ANTLR3_BITWORD FOLLOW_field_offset_in_field1083_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000080) };
static  ANTLR3_BITSET_LIST FOLLOW_field_offset_in_field1083	= { FOLLOW_field_offset_in_field1083_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ITEM_TERMINATOR_in_field1085  */
static	ANTLR3_BITWORD FOLLOW_ITEM_TERMINATOR_in_field1085_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_ITEM_TERMINATOR_in_field1085	= { FOLLOW_ITEM_TERMINATOR_in_field1085_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_PBJOPTIONAL_in_field1166  */
static	ANTLR3_BITWORD FOLLOW_PBJOPTIONAL_in_field1166_bits[]	= { ANTLR3_UINT64_LIT(0xFFE001FFFC004000), ANTLR3_UINT64_LIT(0x000000000000000F) };
static  ANTLR3_BITSET_LIST FOLLOW_PBJOPTIONAL_in_field1166	= { FOLLOW_PBJOPTIONAL_in_field1166_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_field_type_in_field1168  */
static	ANTLR3_BITWORD FOLLOW_field_type_in_field1168_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000004000) };
static  ANTLR3_BITSET_LIST FOLLOW_field_type_in_field1168	= { FOLLOW_field_type_in_field1168_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_field_name_in_field1170  */
static	ANTLR3_BITWORD FOLLOW_field_name_in_field1170_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000080000) };
static  ANTLR3_BITSET_LIST FOLLOW_field_name_in_field1170	= { FOLLOW_field_name_in_field1170_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_EQUALS_in_field1172  */
static	ANTLR3_BITWORD FOLLOW_EQUALS_in_field1172_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000070) };
static  ANTLR3_BITSET_LIST FOLLOW_EQUALS_in_field1172	= { FOLLOW_EQUALS_in_field1172_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_field_offset_in_field1174  */
static	ANTLR3_BITWORD FOLLOW_field_offset_in_field1174_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000800080) };
static  ANTLR3_BITSET_LIST FOLLOW_field_offset_in_field1174	= { FOLLOW_field_offset_in_field1174_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_default_value_in_field1176  */
static	ANTLR3_BITWORD FOLLOW_default_value_in_field1176_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000080) };
static  ANTLR3_BITSET_LIST FOLLOW_default_value_in_field1176	= { FOLLOW_default_value_in_field1176_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ITEM_TERMINATOR_in_field1179  */
static	ANTLR3_BITWORD FOLLOW_ITEM_TERMINATOR_in_field1179_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_ITEM_TERMINATOR_in_field1179	= { FOLLOW_ITEM_TERMINATOR_in_field1179_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_REQUIRED_in_field1243  */
static	ANTLR3_BITWORD FOLLOW_REQUIRED_in_field1243_bits[]	= { ANTLR3_UINT64_LIT(0xFFE001FFFC004000), ANTLR3_UINT64_LIT(0x000000000000000F) };
static  ANTLR3_BITSET_LIST FOLLOW_REQUIRED_in_field1243	= { FOLLOW_REQUIRED_in_field1243_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_REPEATED_in_field1245  */
static	ANTLR3_BITWORD FOLLOW_REPEATED_in_field1245_bits[]	= { ANTLR3_UINT64_LIT(0xFFE001FFFC004000), ANTLR3_UINT64_LIT(0x000000000000000F) };
static  ANTLR3_BITSET_LIST FOLLOW_REPEATED_in_field1245	= { FOLLOW_REPEATED_in_field1245_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_field_type_in_field1248  */
static	ANTLR3_BITWORD FOLLOW_field_type_in_field1248_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000004000) };
static  ANTLR3_BITSET_LIST FOLLOW_field_type_in_field1248	= { FOLLOW_field_type_in_field1248_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_field_name_in_field1250  */
static	ANTLR3_BITWORD FOLLOW_field_name_in_field1250_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000080000) };
static  ANTLR3_BITSET_LIST FOLLOW_field_name_in_field1250	= { FOLLOW_field_name_in_field1250_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_EQUALS_in_field1252  */
static	ANTLR3_BITWORD FOLLOW_EQUALS_in_field1252_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000070) };
static  ANTLR3_BITSET_LIST FOLLOW_EQUALS_in_field1252	= { FOLLOW_EQUALS_in_field1252_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_field_offset_in_field1254  */
static	ANTLR3_BITWORD FOLLOW_field_offset_in_field1254_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000080) };
static  ANTLR3_BITSET_LIST FOLLOW_field_offset_in_field1254	= { FOLLOW_field_offset_in_field1254_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ITEM_TERMINATOR_in_field1256  */
static	ANTLR3_BITWORD FOLLOW_ITEM_TERMINATOR_in_field1256_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_ITEM_TERMINATOR_in_field1256	= { FOLLOW_ITEM_TERMINATOR_in_field1256_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_integer_in_field_offset1391  */
static	ANTLR3_BITWORD FOLLOW_integer_in_field_offset1391_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_integer_in_field_offset1391	= { FOLLOW_integer_in_field_offset1391_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_IDENTIFIER_in_field_name1414  */
static	ANTLR3_BITWORD FOLLOW_IDENTIFIER_in_field_name1414_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_IDENTIFIER_in_field_name1414	= { FOLLOW_IDENTIFIER_in_field_name1414_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_numeric_type_in_field_type1437  */
static	ANTLR3_BITWORD FOLLOW_numeric_type_in_field_type1437_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_numeric_type_in_field_type1437	= { FOLLOW_numeric_type_in_field_type1437_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_array_type_in_field_type1451  */
static	ANTLR3_BITWORD FOLLOW_array_type_in_field_type1451_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_array_type_in_field_type1451	= { FOLLOW_array_type_in_field_type1451_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_advanced_numeric_type_in_field_type1465  */
static	ANTLR3_BITWORD FOLLOW_advanced_numeric_type_in_field_type1465_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_advanced_numeric_type_in_field_type1465	= { FOLLOW_advanced_numeric_type_in_field_type1465_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_advanced_array_type_in_field_type1479  */
static	ANTLR3_BITWORD FOLLOW_advanced_array_type_in_field_type1479_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_advanced_array_type_in_field_type1479	= { FOLLOW_advanced_array_type_in_field_type1479_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_IDENTIFIER_in_field_type1495  */
static	ANTLR3_BITWORD FOLLOW_IDENTIFIER_in_field_type1495_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_IDENTIFIER_in_field_type1495	= { FOLLOW_IDENTIFIER_in_field_type1495_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_multiplicitive_advanced_type_in_multiplicitive_type1626  */
static	ANTLR3_BITWORD FOLLOW_multiplicitive_advanced_type_in_multiplicitive_type1626_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_multiplicitive_advanced_type_in_multiplicitive_type1626	= { FOLLOW_multiplicitive_advanced_type_in_multiplicitive_type1626_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SQBRACKET_OPEN_in_array_spec1647  */
static	ANTLR3_BITWORD FOLLOW_SQBRACKET_OPEN_in_array_spec1647_bits[]	= { ANTLR3_UINT64_LIT(0x0000000001000000), ANTLR3_UINT64_LIT(0x0000000000000070) };
static  ANTLR3_BITSET_LIST FOLLOW_SQBRACKET_OPEN_in_array_spec1647	= { FOLLOW_SQBRACKET_OPEN_in_array_spec1647_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_integer_in_array_spec1649  */
static	ANTLR3_BITWORD FOLLOW_integer_in_array_spec1649_bits[]	= { ANTLR3_UINT64_LIT(0x0000000001000000) };
static  ANTLR3_BITSET_LIST FOLLOW_integer_in_array_spec1649	= { FOLLOW_integer_in_array_spec1649_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SQBRACKET_CLOSE_in_array_spec1652  */
static	ANTLR3_BITWORD FOLLOW_SQBRACKET_CLOSE_in_array_spec1652_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_SQBRACKET_CLOSE_in_array_spec1652	= { FOLLOW_SQBRACKET_CLOSE_in_array_spec1652_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SQBRACKET_OPEN_in_default_value1663  */
static	ANTLR3_BITWORD FOLLOW_SQBRACKET_OPEN_in_default_value1663_bits[]	= { ANTLR3_UINT64_LIT(0x0000000002000000) };
static  ANTLR3_BITSET_LIST FOLLOW_SQBRACKET_OPEN_in_default_value1663	= { FOLLOW_SQBRACKET_OPEN_in_default_value1663_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_DEFAULT_in_default_value1665  */
static	ANTLR3_BITWORD FOLLOW_DEFAULT_in_default_value1665_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000080000) };
static  ANTLR3_BITSET_LIST FOLLOW_DEFAULT_in_default_value1665	= { FOLLOW_DEFAULT_in_default_value1665_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_EQUALS_in_default_value1667  */
static	ANTLR3_BITWORD FOLLOW_EQUALS_in_default_value1667_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000200), ANTLR3_UINT64_LIT(0x00000000000001F0) };
static  ANTLR3_BITSET_LIST FOLLOW_EQUALS_in_default_value1667	= { FOLLOW_EQUALS_in_default_value1667_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_literal_value_in_default_value1669  */
static	ANTLR3_BITWORD FOLLOW_literal_value_in_default_value1669_bits[]	= { ANTLR3_UINT64_LIT(0x0000000001000000) };
static  ANTLR3_BITSET_LIST FOLLOW_literal_value_in_default_value1669	= { FOLLOW_literal_value_in_default_value1669_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SQBRACKET_CLOSE_in_default_value1671  */
static	ANTLR3_BITWORD FOLLOW_SQBRACKET_CLOSE_in_default_value1671_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_SQBRACKET_CLOSE_in_default_value1671	= { FOLLOW_SQBRACKET_CLOSE_in_default_value1671_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_set_in_numeric_type0  */
static	ANTLR3_BITWORD FOLLOW_set_in_numeric_type0_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_set_in_numeric_type0	= { FOLLOW_set_in_numeric_type0_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_set_in_array_type0  */
static	ANTLR3_BITWORD FOLLOW_set_in_array_type0_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_set_in_array_type0	= { FOLLOW_set_in_array_type0_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_NORMAL_in_multiplicitive_advanced_type1777  */
static	ANTLR3_BITWORD FOLLOW_NORMAL_in_multiplicitive_advanced_type1777_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_NORMAL_in_multiplicitive_advanced_type1777	= { FOLLOW_NORMAL_in_multiplicitive_advanced_type1777_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_VECTOR2F_in_multiplicitive_advanced_type1792  */
static	ANTLR3_BITWORD FOLLOW_VECTOR2F_in_multiplicitive_advanced_type1792_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_VECTOR2F_in_multiplicitive_advanced_type1792	= { FOLLOW_VECTOR2F_in_multiplicitive_advanced_type1792_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_VECTOR2D_in_multiplicitive_advanced_type1807  */
static	ANTLR3_BITWORD FOLLOW_VECTOR2D_in_multiplicitive_advanced_type1807_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_VECTOR2D_in_multiplicitive_advanced_type1807	= { FOLLOW_VECTOR2D_in_multiplicitive_advanced_type1807_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_VECTOR3F_in_multiplicitive_advanced_type1822  */
static	ANTLR3_BITWORD FOLLOW_VECTOR3F_in_multiplicitive_advanced_type1822_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_VECTOR3F_in_multiplicitive_advanced_type1822	= { FOLLOW_VECTOR3F_in_multiplicitive_advanced_type1822_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_VECTOR3D_in_multiplicitive_advanced_type1837  */
static	ANTLR3_BITWORD FOLLOW_VECTOR3D_in_multiplicitive_advanced_type1837_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_VECTOR3D_in_multiplicitive_advanced_type1837	= { FOLLOW_VECTOR3D_in_multiplicitive_advanced_type1837_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_VECTOR4F_in_multiplicitive_advanced_type1852  */
static	ANTLR3_BITWORD FOLLOW_VECTOR4F_in_multiplicitive_advanced_type1852_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_VECTOR4F_in_multiplicitive_advanced_type1852	= { FOLLOW_VECTOR4F_in_multiplicitive_advanced_type1852_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_VECTOR4D_in_multiplicitive_advanced_type1867  */
static	ANTLR3_BITWORD FOLLOW_VECTOR4D_in_multiplicitive_advanced_type1867_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_VECTOR4D_in_multiplicitive_advanced_type1867	= { FOLLOW_VECTOR4D_in_multiplicitive_advanced_type1867_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_QUATERNION_in_multiplicitive_advanced_type1882  */
static	ANTLR3_BITWORD FOLLOW_QUATERNION_in_multiplicitive_advanced_type1882_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_QUATERNION_in_multiplicitive_advanced_type1882	= { FOLLOW_QUATERNION_in_multiplicitive_advanced_type1882_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_BOUNDINGSPHERE3F_in_multiplicitive_advanced_type1897  */
static	ANTLR3_BITWORD FOLLOW_BOUNDINGSPHERE3F_in_multiplicitive_advanced_type1897_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_BOUNDINGSPHERE3F_in_multiplicitive_advanced_type1897	= { FOLLOW_BOUNDINGSPHERE3F_in_multiplicitive_advanced_type1897_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_BOUNDINGSPHERE3D_in_multiplicitive_advanced_type1912  */
static	ANTLR3_BITWORD FOLLOW_BOUNDINGSPHERE3D_in_multiplicitive_advanced_type1912_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_BOUNDINGSPHERE3D_in_multiplicitive_advanced_type1912	= { FOLLOW_BOUNDINGSPHERE3D_in_multiplicitive_advanced_type1912_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_BOUNDINGBOX3F3F_in_multiplicitive_advanced_type1927  */
static	ANTLR3_BITWORD FOLLOW_BOUNDINGBOX3F3F_in_multiplicitive_advanced_type1927_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_BOUNDINGBOX3F3F_in_multiplicitive_advanced_type1927	= { FOLLOW_BOUNDINGBOX3F3F_in_multiplicitive_advanced_type1927_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_BOUNDINGBOX3D3F_in_multiplicitive_advanced_type1942  */
static	ANTLR3_BITWORD FOLLOW_BOUNDINGBOX3D3F_in_multiplicitive_advanced_type1942_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_BOUNDINGBOX3D3F_in_multiplicitive_advanced_type1942	= { FOLLOW_BOUNDINGBOX3D3F_in_multiplicitive_advanced_type1942_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_UINT8_in_advanced_numeric_type1959  */
static	ANTLR3_BITWORD FOLLOW_UINT8_in_advanced_numeric_type1959_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_UINT8_in_advanced_numeric_type1959	= { FOLLOW_UINT8_in_advanced_numeric_type1959_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_INT8_in_advanced_numeric_type1969  */
static	ANTLR3_BITWORD FOLLOW_INT8_in_advanced_numeric_type1969_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_INT8_in_advanced_numeric_type1969	= { FOLLOW_INT8_in_advanced_numeric_type1969_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SINT8_in_advanced_numeric_type1979  */
static	ANTLR3_BITWORD FOLLOW_SINT8_in_advanced_numeric_type1979_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_SINT8_in_advanced_numeric_type1979	= { FOLLOW_SINT8_in_advanced_numeric_type1979_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_FIXED8_in_advanced_numeric_type1989  */
static	ANTLR3_BITWORD FOLLOW_FIXED8_in_advanced_numeric_type1989_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_FIXED8_in_advanced_numeric_type1989	= { FOLLOW_FIXED8_in_advanced_numeric_type1989_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SFIXED8_in_advanced_numeric_type1999  */
static	ANTLR3_BITWORD FOLLOW_SFIXED8_in_advanced_numeric_type1999_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_SFIXED8_in_advanced_numeric_type1999	= { FOLLOW_SFIXED8_in_advanced_numeric_type1999_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_INT16_in_advanced_numeric_type2009  */
static	ANTLR3_BITWORD FOLLOW_INT16_in_advanced_numeric_type2009_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_INT16_in_advanced_numeric_type2009	= { FOLLOW_INT16_in_advanced_numeric_type2009_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SINT16_in_advanced_numeric_type2019  */
static	ANTLR3_BITWORD FOLLOW_SINT16_in_advanced_numeric_type2019_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_SINT16_in_advanced_numeric_type2019	= { FOLLOW_SINT16_in_advanced_numeric_type2019_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_FIXED16_in_advanced_numeric_type2029  */
static	ANTLR3_BITWORD FOLLOW_FIXED16_in_advanced_numeric_type2029_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_FIXED16_in_advanced_numeric_type2029	= { FOLLOW_FIXED16_in_advanced_numeric_type2029_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SFIXED16_in_advanced_numeric_type2039  */
static	ANTLR3_BITWORD FOLLOW_SFIXED16_in_advanced_numeric_type2039_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_SFIXED16_in_advanced_numeric_type2039	= { FOLLOW_SFIXED16_in_advanced_numeric_type2039_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_UINT16_in_advanced_numeric_type2054  */
static	ANTLR3_BITWORD FOLLOW_UINT16_in_advanced_numeric_type2054_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_UINT16_in_advanced_numeric_type2054	= { FOLLOW_UINT16_in_advanced_numeric_type2054_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ANGLE_in_advanced_numeric_type2069  */
static	ANTLR3_BITWORD FOLLOW_ANGLE_in_advanced_numeric_type2069_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_ANGLE_in_advanced_numeric_type2069	= { FOLLOW_ANGLE_in_advanced_numeric_type2069_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_TIME_in_advanced_numeric_type2084  */
static	ANTLR3_BITWORD FOLLOW_TIME_in_advanced_numeric_type2084_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_TIME_in_advanced_numeric_type2084	= { FOLLOW_TIME_in_advanced_numeric_type2084_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_DURATION_in_advanced_numeric_type2099  */
static	ANTLR3_BITWORD FOLLOW_DURATION_in_advanced_numeric_type2099_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_DURATION_in_advanced_numeric_type2099	= { FOLLOW_DURATION_in_advanced_numeric_type2099_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_UUID_in_advanced_array_type2120  */
static	ANTLR3_BITWORD FOLLOW_UUID_in_advanced_array_type2120_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_UUID_in_advanced_array_type2120	= { FOLLOW_UUID_in_advanced_array_type2120_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SHA256_in_advanced_array_type2135  */
static	ANTLR3_BITWORD FOLLOW_SHA256_in_advanced_array_type2135_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_SHA256_in_advanced_array_type2135	= { FOLLOW_SHA256_in_advanced_array_type2135_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_set_in_literal_value0  */
static	ANTLR3_BITWORD FOLLOW_set_in_literal_value0_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_set_in_literal_value0	= { FOLLOW_set_in_literal_value0_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_FLAGS8_in_flags2300  */
static	ANTLR3_BITWORD FOLLOW_FLAGS8_in_flags2300_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_FLAGS8_in_flags2300	= { FOLLOW_FLAGS8_in_flags2300_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_FLAGS16_in_flags2321  */
static	ANTLR3_BITWORD FOLLOW_FLAGS16_in_flags2321_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_FLAGS16_in_flags2321	= { FOLLOW_FLAGS16_in_flags2321_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_FLAGS32_in_flags2342  */
static	ANTLR3_BITWORD FOLLOW_FLAGS32_in_flags2342_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_FLAGS32_in_flags2342	= { FOLLOW_FLAGS32_in_flags2342_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_FLAGS64_in_flags2363  */
static	ANTLR3_BITWORD FOLLOW_FLAGS64_in_flags2363_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_FLAGS64_in_flags2363	= { FOLLOW_FLAGS64_in_flags2363_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_set_in_integer0  */
static	ANTLR3_BITWORD FOLLOW_set_in_integer0_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_set_in_integer0	= { FOLLOW_set_in_integer0_bits, 1	};
     


/* =========================================================================
 * DFA tables for the parser
 */
/** Static dfa state tables for Cyclic dfa:
 *    85:1: protoroot : ( ( importrule )* package ( importrule )* ( message )* | ( ( importrule )* ( message )* -> PACKAGELITERAL[\"package\"] WS[\" \"] QUALIFIEDIDENTIFIER[SCOPE_TOP(NameSpace)->externalNamespace->chars] STRING_LITERAL[SCOPE_TOP(NameSpace)->internalNamespace->chars] ITEM_TERMINATOR[\";\"] WS[\"\\n\"] ( importrule )* ( message )* ) );
 */
static const ANTLR3_INT32 dfa6_eot[6] =
    {
	-1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa6_eof[6] =
    {
	3, -1, -1, -1, -1, 3
    };
static const ANTLR3_INT32 dfa6_min[6] =
    {
	5, 9, -1, -1, 7, 5
    };
static const ANTLR3_INT32 dfa6_max[6] =
    {
	13, 9, -1, -1, 7, 13
    };
static const ANTLR3_INT32 dfa6_accept[6] =
    {
	-1, -1, 1, 2, -1, -1
    };
static const ANTLR3_INT32 dfa6_special[6] =
    {	
	-1, -1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa6_T_empty	    NULL

static const ANTLR3_INT32 dfa6_T0[] =
    {
	5
    };static const ANTLR3_INT32 dfa6_T1[] =
    {
	2, -1, -1, 1, -1, -1, -1, 3, 3
    };static const ANTLR3_INT32 dfa6_T2[] =
    {
	4
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa6_transitions[] =
{
    dfa6_T1, dfa6_T2, dfa6_T_empty, dfa6_T_empty, dfa6_T0, dfa6_T1	
};


/* Declare tracking structure for Cyclic DFA 6
 */
static
ANTLR3_CYCLIC_DFA cdfa6
    =	{
	    6,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"85:1: protoroot : ( ( importrule )* package ( importrule )* ( message )* | ( ( importrule )* ( message )* -> PACKAGELITERAL[\"package\"] WS[\" \"] QUALIFIEDIDENTIFIER[SCOPE_TOP(NameSpace)->externalNamespace->chars] STRING_LITERAL[SCOPE_TOP(NameSpace)->internalNamespace->chars] ITEM_TERMINATOR[\";\"] WS[\"\\n\"] ( importrule )* ( message )* ) );",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa6_eot,	    /* EOT table			    */
	    dfa6_eof,	    /* EOF table			    */
	    dfa6_min,	    /* Minimum tokens for each state    */
	    dfa6_max,	    /* Maximum tokens for each state    */
	    dfa6_accept,	/* Accept table			    */
	    dfa6_special,	/* Special transition states	    */
	    dfa6_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 6
 * ---------------------
 */ 
/* =========================================================================
 * End of DFA tables for the parser
 */ 
 
/* ==============================================
 * Parsing rules
 */
/** 
 * $ANTLR start protocol
 * PBJ.g:77:1: protocol : protoroot -> protoroot ;
 */
static PBJParser_protocol_return
protocol(pPBJParser ctx)
{   
    PBJParser_protocol_return retval;

    pANTLR3_BASE_TREE root_0;

    PBJParser_protoroot_return protoroot1;
    #undef	RETURN_TYPE_protoroot1
    #define	RETURN_TYPE_protoroot1 PBJParser_protoroot_return

    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_protoroot;
    /* Initialize rule variables
     */
    ctx->pPBJParser_SymbolsTop = pPBJParser_SymbolsPush(ctx);

    root_0 = NULL;


            initSymbolTable(SCOPE_TOP(Symbols),NULL,0);
        
    protoroot1.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;


    stream_protoroot   = NULL;
    #define CREATE_stream_protoroot  if (stream_protoroot == NULL) {stream_protoroot = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule protoroot"); }

    retval.tree  = NULL;
    {
        // PBJ.g:82:5: ( protoroot -> protoroot )
        // PBJ.g:82:7: protoroot
        {
            FOLLOWPUSH(FOLLOW_protoroot_in_protocol104);
            protoroot1=protoroot(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleprotocolEx;
            }

            CREATE_stream_protoroot; stream_protoroot->add(stream_protoroot, protoroot1.tree, NULL);

             
            /* AST REWRITE
             * elements          : protoroot
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 82:17: -> protoroot
            	{
            	    ADAPTOR->addChild(ADAPTOR, root_0, stream_protoroot == NULL ? NULL : stream_protoroot->nextTree(stream_protoroot));

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleprotocolEx; /* Prevent compiler warnings */
    ruleprotocolEx: ;
    pPBJParser_SymbolsPop(ctx);

    retval.stop = LT(-1);

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_protoroot != NULL) stream_protoroot->free(stream_protoroot);

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end protocol */

/** 
 * $ANTLR start protoroot
 * PBJ.g:85:1: protoroot : ( ( importrule )* package ( importrule )* ( message )* | ( ( importrule )* ( message )* -> PACKAGELITERAL[\"package\"] WS[\" \"] QUALIFIEDIDENTIFIER[SCOPE_TOP(NameSpace)->externalNamespace->chars] STRING_LITERAL[SCOPE_TOP(NameSpace)->internalNamespace->chars] ITEM_TERMINATOR[\";\"] WS[\"\\n\"] ( importrule )* ( message )* ) );
 */
static PBJParser_protoroot_return
protoroot(pPBJParser ctx)
{   
    PBJParser_protoroot_return retval;

    pANTLR3_BASE_TREE root_0;

    PBJParser_importrule_return importrule2;
    #undef	RETURN_TYPE_importrule2
    #define	RETURN_TYPE_importrule2 PBJParser_importrule_return

    PBJParser_package_return package3;
    #undef	RETURN_TYPE_package3
    #define	RETURN_TYPE_package3 PBJParser_package_return

    PBJParser_importrule_return importrule4;
    #undef	RETURN_TYPE_importrule4
    #define	RETURN_TYPE_importrule4 PBJParser_importrule_return

    PBJParser_message_return message5;
    #undef	RETURN_TYPE_message5
    #define	RETURN_TYPE_message5 PBJParser_message_return

    PBJParser_importrule_return importrule6;
    #undef	RETURN_TYPE_importrule6
    #define	RETURN_TYPE_importrule6 PBJParser_importrule_return

    PBJParser_message_return message7;
    #undef	RETURN_TYPE_message7
    #define	RETURN_TYPE_message7 PBJParser_message_return

    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_message;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_importrule;
    /* Initialize rule variables
     */
    ctx->pPBJParser_NameSpaceTop = pPBJParser_NameSpacePush(ctx);

    root_0 = NULL;


            initNameSpace(ctx,SCOPE_TOP(NameSpace));
        
    importrule2.tree = NULL;

    package3.tree = NULL;

    importrule4.tree = NULL;

    message5.tree = NULL;

    importrule6.tree = NULL;

    message7.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;


    stream_message   = NULL;
    #define CREATE_stream_message  if (stream_message == NULL) {stream_message = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule message"); }
    stream_importrule   = NULL;
    #define CREATE_stream_importrule  if (stream_importrule == NULL) {stream_importrule = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule importrule"); }

    retval.tree  = NULL;
    {
        {
            //  PBJ.g:90:2: ( ( importrule )* package ( importrule )* ( message )* | ( ( importrule )* ( message )* -> PACKAGELITERAL[\"package\"] WS[\" \"] QUALIFIEDIDENTIFIER[SCOPE_TOP(NameSpace)->externalNamespace->chars] STRING_LITERAL[SCOPE_TOP(NameSpace)->internalNamespace->chars] ITEM_TERMINATOR[\";\"] WS[\"\\n\"] ( importrule )* ( message )* ) )
            
            ANTLR3_UINT32 alt6;

            alt6=2;

            alt6 = cdfa6.predict(ctx, RECOGNIZER, ISTREAM, &cdfa6);
            if  (HASEXCEPTION())
            {
                goto ruleprotorootEx;
            }

            switch (alt6) 
            {
        	case 1:
        	    // PBJ.g:90:4: ( importrule )* package ( importrule )* ( message )*
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));


        	        // PBJ.g:90:4: ( importrule )*

        	        for (;;)
        	        {
        	            int alt1=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA1_0 = LA(1);
        	                if ( (LA1_0 == IMPORTLITERAL) ) 
        	                {
        	                    alt1=1;
        	                }

        	            }
        	            switch (alt1) 
        	            {
        	        	case 1:
        	        	    // PBJ.g:90:4: importrule
        	        	    {
        	        	        FOLLOWPUSH(FOLLOW_importrule_in_protoroot139);
        	        	        importrule2=importrule(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleprotorootEx;
        	        	        }

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, importrule2.tree);

        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop1;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop1: ; /* Jump out to here if this rule does not match */

        	        FOLLOWPUSH(FOLLOW_package_in_protoroot142);
        	        package3=package(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleprotorootEx;
        	        }

        	        ADAPTOR->addChild(ADAPTOR, root_0, package3.tree);

        	        // PBJ.g:90:24: ( importrule )*

        	        for (;;)
        	        {
        	            int alt2=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA2_0 = LA(1);
        	                if ( (LA2_0 == IMPORTLITERAL) ) 
        	                {
        	                    alt2=1;
        	                }

        	            }
        	            switch (alt2) 
        	            {
        	        	case 1:
        	        	    // PBJ.g:90:24: importrule
        	        	    {
        	        	        FOLLOWPUSH(FOLLOW_importrule_in_protoroot144);
        	        	        importrule4=importrule(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleprotorootEx;
        	        	        }

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, importrule4.tree);

        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop2;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop2: ; /* Jump out to here if this rule does not match */


        	        // PBJ.g:90:36: ( message )*

        	        for (;;)
        	        {
        	            int alt3=2;
        	            {
        	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                */
        	                int LA3_0 = LA(1);
        	                if ( (((LA3_0 >= MESSAGE) && (LA3_0 <= EXTEND))) ) 
        	                {
        	                    alt3=1;
        	                }

        	            }
        	            switch (alt3) 
        	            {
        	        	case 1:
        	        	    // PBJ.g:90:36: message
        	        	    {
        	        	        FOLLOWPUSH(FOLLOW_message_in_protoroot147);
        	        	        message5=message(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleprotorootEx;
        	        	        }

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, message5.tree);

        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop3;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop3: ; /* Jump out to here if this rule does not match */

        	        {

        	                
        	        }

        	    }
        	    break;
        	case 2:
        	    // PBJ.g:93:4: ( ( importrule )* ( message )* -> PACKAGELITERAL[\"package\"] WS[\" \"] QUALIFIEDIDENTIFIER[SCOPE_TOP(NameSpace)->externalNamespace->chars] STRING_LITERAL[SCOPE_TOP(NameSpace)->internalNamespace->chars] ITEM_TERMINATOR[\";\"] WS[\"\\n\"] ( importrule )* ( message )* )
        	    {
        	        // PBJ.g:93:4: ( ( importrule )* ( message )* -> PACKAGELITERAL[\"package\"] WS[\" \"] QUALIFIEDIDENTIFIER[SCOPE_TOP(NameSpace)->externalNamespace->chars] STRING_LITERAL[SCOPE_TOP(NameSpace)->internalNamespace->chars] ITEM_TERMINATOR[\";\"] WS[\"\\n\"] ( importrule )* ( message )* )
        	        // PBJ.g:93:5: ( importrule )* ( message )*
        	        {

        	            // PBJ.g:93:5: ( importrule )*

        	            for (;;)
        	            {
        	                int alt4=2;
        	                {
        	                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                    */
        	                    int LA4_0 = LA(1);
        	                    if ( (LA4_0 == IMPORTLITERAL) ) 
        	                    {
        	                        alt4=1;
        	                    }

        	                }
        	                switch (alt4) 
        	                {
        	            	case 1:
        	            	    // PBJ.g:93:5: importrule
        	            	    {
        	            	        FOLLOWPUSH(FOLLOW_importrule_in_protoroot160);
        	            	        importrule6=importrule(ctx);

        	            	        FOLLOWPOP();
        	            	        if  (HASEXCEPTION())
        	            	        {
        	            	            goto ruleprotorootEx;
        	            	        }

        	            	        CREATE_stream_importrule; stream_importrule->add(stream_importrule, importrule6.tree, NULL);

        	            	    }
        	            	    break;

        	            	default:
        	            	    goto loop4;	/* break out of the loop */
        	            	    break;
        	                }
        	            }
        	            loop4: ; /* Jump out to here if this rule does not match */


        	            // PBJ.g:93:17: ( message )*

        	            for (;;)
        	            {
        	                int alt5=2;
        	                {
        	                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
        	                    */
        	                    int LA5_0 = LA(1);
        	                    if ( (((LA5_0 >= MESSAGE) && (LA5_0 <= EXTEND))) ) 
        	                    {
        	                        alt5=1;
        	                    }

        	                }
        	                switch (alt5) 
        	                {
        	            	case 1:
        	            	    // PBJ.g:93:17: message
        	            	    {
        	            	        FOLLOWPUSH(FOLLOW_message_in_protoroot163);
        	            	        message7=message(ctx);

        	            	        FOLLOWPOP();
        	            	        if  (HASEXCEPTION())
        	            	        {
        	            	            goto ruleprotorootEx;
        	            	        }

        	            	        CREATE_stream_message; stream_message->add(stream_message, message7.tree, NULL);

        	            	    }
        	            	    break;

        	            	default:
        	            	    goto loop5;	/* break out of the loop */
        	            	    break;
        	                }
        	            }
        	            loop5: ; /* Jump out to here if this rule does not match */


        	             
        	            /* AST REWRITE
        	             * elements          : importrule, message
        	             * token labels      : 
        	             * rule labels       : retval
        	             * token list labels : 
        	             * rule list labels  : 
        	             */
        	            {
        	            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	            	retval.tree    = root_0;
        	            	// 93:26: -> PACKAGELITERAL[\"package\"] WS[\" \"] QUALIFIEDIDENTIFIER[SCOPE_TOP(NameSpace)->externalNamespace->chars] STRING_LITERAL[SCOPE_TOP(NameSpace)->internalNamespace->chars] ITEM_TERMINATOR[\";\"] WS[\"\\n\"] ( importrule )* ( message )*
        	            	{
        	            	    ADAPTOR->addChild(ADAPTOR, root_0, 
        	            	    #if 1 == 2
        	            	    	(pANTLR3_BASE_TREE)ADAPTOR->createTypeTokenText(ADAPTOR, PACKAGELITERAL, TOKTEXT("package"))
        	            	    #else
        	            	    	(pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, PACKAGELITERAL, (pANTLR3_UINT8)"package")
        	            	    #endif
        	            	    );
        	            	    ADAPTOR->addChild(ADAPTOR, root_0, 
        	            	    #if 1 == 2
        	            	    	(pANTLR3_BASE_TREE)ADAPTOR->createTypeTokenText(ADAPTOR, WS, TOKTEXT(" "))
        	            	    #else
        	            	    	(pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, WS, (pANTLR3_UINT8)" ")
        	            	    #endif
        	            	    );
        	            	    ADAPTOR->addChild(ADAPTOR, root_0, 
        	            	    #if 1 == 2
        	            	    	(pANTLR3_BASE_TREE)ADAPTOR->createTypeTokenText(ADAPTOR, QUALIFIEDIDENTIFIER, TOKTEXT(SCOPE_TOP(NameSpace)->externalNamespace->chars))
        	            	    #else
        	            	    	(pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, QUALIFIEDIDENTIFIER, (pANTLR3_UINT8)SCOPE_TOP(NameSpace)->externalNamespace->chars)
        	            	    #endif
        	            	    );
        	            	    ADAPTOR->addChild(ADAPTOR, root_0, 
        	            	    #if 1 == 2
        	            	    	(pANTLR3_BASE_TREE)ADAPTOR->createTypeTokenText(ADAPTOR, STRING_LITERAL, TOKTEXT(SCOPE_TOP(NameSpace)->internalNamespace->chars))
        	            	    #else
        	            	    	(pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, STRING_LITERAL, (pANTLR3_UINT8)SCOPE_TOP(NameSpace)->internalNamespace->chars)
        	            	    #endif
        	            	    );
        	            	    ADAPTOR->addChild(ADAPTOR, root_0, 
        	            	    #if 1 == 2
        	            	    	(pANTLR3_BASE_TREE)ADAPTOR->createTypeTokenText(ADAPTOR, ITEM_TERMINATOR, TOKTEXT(";"))
        	            	    #else
        	            	    	(pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, ITEM_TERMINATOR, (pANTLR3_UINT8)";")
        	            	    #endif
        	            	    );
        	            	    ADAPTOR->addChild(ADAPTOR, root_0, 
        	            	    #if 1 == 2
        	            	    	(pANTLR3_BASE_TREE)ADAPTOR->createTypeTokenText(ADAPTOR, WS, TOKTEXT("\n"))
        	            	    #else
        	            	    	(pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, WS, (pANTLR3_UINT8)"\n")
        	            	    #endif
        	            	    );
        	            	    // PBJ.g:93:224: ( importrule )*
        	            	    {
        	            	    	while ( (stream_importrule != NULL && stream_importrule->hasNext(stream_importrule))  )
        	            	    	{
        	            	    		ADAPTOR->addChild(ADAPTOR, root_0, stream_importrule == NULL ? NULL : stream_importrule->nextTree(stream_importrule));

        	            	    	}
        	            	    	if (stream_importrule != NULL) stream_importrule->reset(stream_importrule);

        	            	    }
        	            	    // PBJ.g:93:236: ( message )*
        	            	    {
        	            	    	while ( (stream_message != NULL && stream_message->hasNext(stream_message))  )
        	            	    	{
        	            	    		ADAPTOR->addChild(ADAPTOR, root_0, stream_message == NULL ? NULL : stream_message->nextTree(stream_message));

        	            	    	}
        	            	    	if (stream_message != NULL) stream_message->reset(stream_message);

        	            	    }

        	            	}

        	            	retval.tree = root_0; // set result root
        	            	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	            }
        	        }

        	        {

        	                    definePackage( ctx, NULL );
        	                
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleprotorootEx; /* Prevent compiler warnings */
    ruleprotorootEx: ;
    pPBJParser_NameSpacePop(ctx);

    retval.stop = LT(-1);

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_message != NULL) stream_message->free(stream_message);
        if (stream_importrule != NULL) stream_importrule->free(stream_importrule);

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end protoroot */

/** 
 * $ANTLR start package
 * PBJ.g:99:1: package : ( PACKAGELITERAL QUALIFIEDIDENTIFIER ITEM_TERMINATOR -> PACKAGELITERAL WS[\" \"] QUALIFIEDIDENTIFIER QUALIFIEDIDENTIFIER[\".\"] QUALIFIEDIDENTIFIER[SCOPE_TOP(NameSpace)->externalNamespace->chars] QUALIFIEDIDENTIFIER[SCOPE_TOP(NameSpace)->internalNamespace->chars] ITEM_TERMINATOR WS[\"\\n\"] ) ;
 */
static PBJParser_package_return
package(pPBJParser ctx)
{   
    PBJParser_package_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    PACKAGELITERAL8;
    pANTLR3_COMMON_TOKEN    QUALIFIEDIDENTIFIER9;
    pANTLR3_COMMON_TOKEN    ITEM_TERMINATOR10;

    pANTLR3_BASE_TREE PACKAGELITERAL8_tree;
    pANTLR3_BASE_TREE QUALIFIEDIDENTIFIER9_tree;
    pANTLR3_BASE_TREE ITEM_TERMINATOR10_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_QUALIFIEDIDENTIFIER;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_PACKAGELITERAL;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_ITEM_TERMINATOR;

    /* Initialize rule variables
     */


    root_0 = NULL;

    PACKAGELITERAL8       = NULL;
    QUALIFIEDIDENTIFIER9       = NULL;
    ITEM_TERMINATOR10       = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    PACKAGELITERAL8_tree   = NULL;
    QUALIFIEDIDENTIFIER9_tree   = NULL;
    ITEM_TERMINATOR10_tree   = NULL;

    stream_QUALIFIEDIDENTIFIER   = NULL;
    #define CREATE_stream_QUALIFIEDIDENTIFIER  if (stream_QUALIFIEDIDENTIFIER == NULL) {stream_QUALIFIEDIDENTIFIER = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token QUALIFIEDIDENTIFIER"); } 
    stream_PACKAGELITERAL   = NULL;
    #define CREATE_stream_PACKAGELITERAL  if (stream_PACKAGELITERAL == NULL) {stream_PACKAGELITERAL = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token PACKAGELITERAL"); } 
    stream_ITEM_TERMINATOR   = NULL;
    #define CREATE_stream_ITEM_TERMINATOR  if (stream_ITEM_TERMINATOR == NULL) {stream_ITEM_TERMINATOR = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token ITEM_TERMINATOR"); } 

    retval.tree  = NULL;
    {
        // PBJ.g:100:4: ( ( PACKAGELITERAL QUALIFIEDIDENTIFIER ITEM_TERMINATOR -> PACKAGELITERAL WS[\" \"] QUALIFIEDIDENTIFIER QUALIFIEDIDENTIFIER[\".\"] QUALIFIEDIDENTIFIER[SCOPE_TOP(NameSpace)->externalNamespace->chars] QUALIFIEDIDENTIFIER[SCOPE_TOP(NameSpace)->internalNamespace->chars] ITEM_TERMINATOR WS[\"\\n\"] ) )
        // PBJ.g:100:8: ( PACKAGELITERAL QUALIFIEDIDENTIFIER ITEM_TERMINATOR -> PACKAGELITERAL WS[\" \"] QUALIFIEDIDENTIFIER QUALIFIEDIDENTIFIER[\".\"] QUALIFIEDIDENTIFIER[SCOPE_TOP(NameSpace)->externalNamespace->chars] QUALIFIEDIDENTIFIER[SCOPE_TOP(NameSpace)->internalNamespace->chars] ITEM_TERMINATOR WS[\"\\n\"] )
        {
            // PBJ.g:100:8: ( PACKAGELITERAL QUALIFIEDIDENTIFIER ITEM_TERMINATOR -> PACKAGELITERAL WS[\" \"] QUALIFIEDIDENTIFIER QUALIFIEDIDENTIFIER[\".\"] QUALIFIEDIDENTIFIER[SCOPE_TOP(NameSpace)->externalNamespace->chars] QUALIFIEDIDENTIFIER[SCOPE_TOP(NameSpace)->internalNamespace->chars] ITEM_TERMINATOR WS[\"\\n\"] )
            // PBJ.g:100:10: PACKAGELITERAL QUALIFIEDIDENTIFIER ITEM_TERMINATOR
            {
                PACKAGELITERAL8 = (pANTLR3_COMMON_TOKEN) MATCHT(PACKAGELITERAL, &FOLLOW_PACKAGELITERAL_in_package214); 
                if  (HASEXCEPTION())
                {
                    goto rulepackageEx;
                }
                 
                CREATE_stream_PACKAGELITERAL; stream_PACKAGELITERAL->add(stream_PACKAGELITERAL, PACKAGELITERAL8, NULL);

                QUALIFIEDIDENTIFIER9 = (pANTLR3_COMMON_TOKEN) MATCHT(QUALIFIEDIDENTIFIER, &FOLLOW_QUALIFIEDIDENTIFIER_in_package216); 
                if  (HASEXCEPTION())
                {
                    goto rulepackageEx;
                }
                 
                CREATE_stream_QUALIFIEDIDENTIFIER; stream_QUALIFIEDIDENTIFIER->add(stream_QUALIFIEDIDENTIFIER, QUALIFIEDIDENTIFIER9, NULL);

                ITEM_TERMINATOR10 = (pANTLR3_COMMON_TOKEN) MATCHT(ITEM_TERMINATOR, &FOLLOW_ITEM_TERMINATOR_in_package218); 
                if  (HASEXCEPTION())
                {
                    goto rulepackageEx;
                }
                 
                CREATE_stream_ITEM_TERMINATOR; stream_ITEM_TERMINATOR->add(stream_ITEM_TERMINATOR, ITEM_TERMINATOR10, NULL);


                 
                /* AST REWRITE
                 * elements          : PACKAGELITERAL, QUALIFIEDIDENTIFIER, ITEM_TERMINATOR, QUALIFIEDIDENTIFIER, QUALIFIEDIDENTIFIER, QUALIFIEDIDENTIFIER
                 * token labels      : 
                 * rule labels       : retval
                 * token list labels : 
                 * rule list labels  : 
                 */
                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 100:61: -> PACKAGELITERAL WS[\" \"] QUALIFIEDIDENTIFIER QUALIFIEDIDENTIFIER[\".\"] QUALIFIEDIDENTIFIER[SCOPE_TOP(NameSpace)->externalNamespace->chars] QUALIFIEDIDENTIFIER[SCOPE_TOP(NameSpace)->internalNamespace->chars] ITEM_TERMINATOR WS[\"\\n\"]
                	{
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_PACKAGELITERAL == NULL ? NULL : stream_PACKAGELITERAL->nextNode(stream_PACKAGELITERAL));
                	    ADAPTOR->addChild(ADAPTOR, root_0, 
                	    #if 1 == 2
                	    	(pANTLR3_BASE_TREE)ADAPTOR->createTypeTokenText(ADAPTOR, WS, TOKTEXT(" "))
                	    #else
                	    	(pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, WS, (pANTLR3_UINT8)" ")
                	    #endif
                	    );
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_QUALIFIEDIDENTIFIER == NULL ? NULL : stream_QUALIFIEDIDENTIFIER->nextNode(stream_QUALIFIEDIDENTIFIER));
                	    ADAPTOR->addChild(ADAPTOR, root_0, 
                	    #if 1 == 2
                	    	(pANTLR3_BASE_TREE)ADAPTOR->createTypeTokenText(ADAPTOR, QUALIFIEDIDENTIFIER, TOKTEXT("."))
                	    #else
                	    	(pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, QUALIFIEDIDENTIFIER, (pANTLR3_UINT8)".")
                	    #endif
                	    );
                	    ADAPTOR->addChild(ADAPTOR, root_0, 
                	    #if 1 == 2
                	    	(pANTLR3_BASE_TREE)ADAPTOR->createTypeTokenText(ADAPTOR, QUALIFIEDIDENTIFIER, TOKTEXT(SCOPE_TOP(NameSpace)->externalNamespace->chars))
                	    #else
                	    	(pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, QUALIFIEDIDENTIFIER, (pANTLR3_UINT8)SCOPE_TOP(NameSpace)->externalNamespace->chars)
                	    #endif
                	    );
                	    ADAPTOR->addChild(ADAPTOR, root_0, 
                	    #if 1 == 2
                	    	(pANTLR3_BASE_TREE)ADAPTOR->createTypeTokenText(ADAPTOR, QUALIFIEDIDENTIFIER, TOKTEXT(SCOPE_TOP(NameSpace)->internalNamespace->chars))
                	    #else
                	    	(pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, QUALIFIEDIDENTIFIER, (pANTLR3_UINT8)SCOPE_TOP(NameSpace)->internalNamespace->chars)
                	    #endif
                	    );
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_ITEM_TERMINATOR == NULL ? NULL : stream_ITEM_TERMINATOR->nextNode(stream_ITEM_TERMINATOR));
                	    ADAPTOR->addChild(ADAPTOR, root_0, 
                	    #if 1 == 2
                	    	(pANTLR3_BASE_TREE)ADAPTOR->createTypeTokenText(ADAPTOR, WS, TOKTEXT("\n"))
                	    #else
                	    	(pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, WS, (pANTLR3_UINT8)"\n")
                	    #endif
                	    );

                	}

                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);


                }
            }

            {

                            definePackage( ctx, (QUALIFIEDIDENTIFIER9->getText(QUALIFIEDIDENTIFIER9)) );
                        
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulepackageEx; /* Prevent compiler warnings */
    rulepackageEx: ;
    retval.stop = LT(-1);

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_QUALIFIEDIDENTIFIER != NULL) stream_QUALIFIEDIDENTIFIER->free(stream_QUALIFIEDIDENTIFIER);
        if (stream_PACKAGELITERAL != NULL) stream_PACKAGELITERAL->free(stream_PACKAGELITERAL);
        if (stream_ITEM_TERMINATOR != NULL) stream_ITEM_TERMINATOR->free(stream_ITEM_TERMINATOR);

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end package */

/** 
 * $ANTLR start importrule
 * PBJ.g:106:1: importrule : ( IMPORTLITERAL STRING_LITERAL ITEM_TERMINATOR -> IMPORTLITERAL WS[\" \"] STRING_LITERAL ITEM_TERMINATOR WS[\"\\n\"] ) ;
 */
static PBJParser_importrule_return
importrule(pPBJParser ctx)
{   
    PBJParser_importrule_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    IMPORTLITERAL11;
    pANTLR3_COMMON_TOKEN    STRING_LITERAL12;
    pANTLR3_COMMON_TOKEN    ITEM_TERMINATOR13;

    pANTLR3_BASE_TREE IMPORTLITERAL11_tree;
    pANTLR3_BASE_TREE STRING_LITERAL12_tree;
    pANTLR3_BASE_TREE ITEM_TERMINATOR13_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_IMPORTLITERAL;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_STRING_LITERAL;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_ITEM_TERMINATOR;

    /* Initialize rule variables
     */


    root_0 = NULL;

    IMPORTLITERAL11       = NULL;
    STRING_LITERAL12       = NULL;
    ITEM_TERMINATOR13       = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    IMPORTLITERAL11_tree   = NULL;
    STRING_LITERAL12_tree   = NULL;
    ITEM_TERMINATOR13_tree   = NULL;

    stream_IMPORTLITERAL   = NULL;
    #define CREATE_stream_IMPORTLITERAL  if (stream_IMPORTLITERAL == NULL) {stream_IMPORTLITERAL = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token IMPORTLITERAL"); } 
    stream_STRING_LITERAL   = NULL;
    #define CREATE_stream_STRING_LITERAL  if (stream_STRING_LITERAL == NULL) {stream_STRING_LITERAL = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token STRING_LITERAL"); } 
    stream_ITEM_TERMINATOR   = NULL;
    #define CREATE_stream_ITEM_TERMINATOR  if (stream_ITEM_TERMINATOR == NULL) {stream_ITEM_TERMINATOR = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token ITEM_TERMINATOR"); } 

    retval.tree  = NULL;
    {
        // PBJ.g:107:4: ( ( IMPORTLITERAL STRING_LITERAL ITEM_TERMINATOR -> IMPORTLITERAL WS[\" \"] STRING_LITERAL ITEM_TERMINATOR WS[\"\\n\"] ) )
        // PBJ.g:107:8: ( IMPORTLITERAL STRING_LITERAL ITEM_TERMINATOR -> IMPORTLITERAL WS[\" \"] STRING_LITERAL ITEM_TERMINATOR WS[\"\\n\"] )
        {
            // PBJ.g:107:8: ( IMPORTLITERAL STRING_LITERAL ITEM_TERMINATOR -> IMPORTLITERAL WS[\" \"] STRING_LITERAL ITEM_TERMINATOR WS[\"\\n\"] )
            // PBJ.g:107:10: IMPORTLITERAL STRING_LITERAL ITEM_TERMINATOR
            {
                IMPORTLITERAL11 = (pANTLR3_COMMON_TOKEN) MATCHT(IMPORTLITERAL, &FOLLOW_IMPORTLITERAL_in_importrule269); 
                if  (HASEXCEPTION())
                {
                    goto ruleimportruleEx;
                }
                 
                CREATE_stream_IMPORTLITERAL; stream_IMPORTLITERAL->add(stream_IMPORTLITERAL, IMPORTLITERAL11, NULL);

                STRING_LITERAL12 = (pANTLR3_COMMON_TOKEN) MATCHT(STRING_LITERAL, &FOLLOW_STRING_LITERAL_in_importrule271); 
                if  (HASEXCEPTION())
                {
                    goto ruleimportruleEx;
                }
                 
                CREATE_stream_STRING_LITERAL; stream_STRING_LITERAL->add(stream_STRING_LITERAL, STRING_LITERAL12, NULL);

                ITEM_TERMINATOR13 = (pANTLR3_COMMON_TOKEN) MATCHT(ITEM_TERMINATOR, &FOLLOW_ITEM_TERMINATOR_in_importrule273); 
                if  (HASEXCEPTION())
                {
                    goto ruleimportruleEx;
                }
                 
                CREATE_stream_ITEM_TERMINATOR; stream_ITEM_TERMINATOR->add(stream_ITEM_TERMINATOR, ITEM_TERMINATOR13, NULL);


                 
                /* AST REWRITE
                 * elements          : STRING_LITERAL, IMPORTLITERAL, ITEM_TERMINATOR
                 * token labels      : 
                 * rule labels       : retval
                 * token list labels : 
                 * rule list labels  : 
                 */
                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 107:55: -> IMPORTLITERAL WS[\" \"] STRING_LITERAL ITEM_TERMINATOR WS[\"\\n\"]
                	{
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_IMPORTLITERAL == NULL ? NULL : stream_IMPORTLITERAL->nextNode(stream_IMPORTLITERAL));
                	    ADAPTOR->addChild(ADAPTOR, root_0, 
                	    #if 1 == 2
                	    	(pANTLR3_BASE_TREE)ADAPTOR->createTypeTokenText(ADAPTOR, WS, TOKTEXT(" "))
                	    #else
                	    	(pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, WS, (pANTLR3_UINT8)" ")
                	    #endif
                	    );
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_STRING_LITERAL == NULL ? NULL : stream_STRING_LITERAL->nextNode(stream_STRING_LITERAL));
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_ITEM_TERMINATOR == NULL ? NULL : stream_ITEM_TERMINATOR->nextNode(stream_ITEM_TERMINATOR));
                	    ADAPTOR->addChild(ADAPTOR, root_0, 
                	    #if 1 == 2
                	    	(pANTLR3_BASE_TREE)ADAPTOR->createTypeTokenText(ADAPTOR, WS, TOKTEXT("\n"))
                	    #else
                	    	(pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, WS, (pANTLR3_UINT8)"\n")
                	    #endif
                	    );

                	}

                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);


                }
            }

            {

                            defineImport( ctx, (STRING_LITERAL12->getText(STRING_LITERAL12)) );
                        
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleimportruleEx; /* Prevent compiler warnings */
    ruleimportruleEx: ;
    retval.stop = LT(-1);

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_IMPORTLITERAL != NULL) stream_IMPORTLITERAL->free(stream_IMPORTLITERAL);
        if (stream_STRING_LITERAL != NULL) stream_STRING_LITERAL->free(stream_STRING_LITERAL);
        if (stream_ITEM_TERMINATOR != NULL) stream_ITEM_TERMINATOR->free(stream_ITEM_TERMINATOR);

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end importrule */

/** 
 * $ANTLR start message
 * PBJ.g:114:1: message : ( message_or_extend message_identifier BLOCK_OPEN message_elements BLOCK_CLOSE -> message_or_extend WS[\" \"] message_identifier WS[\" \"] BLOCK_OPEN WS[\"\\n\"] message_elements BLOCK_CLOSE WS[\"\\n\"] ) ;
 */
static PBJParser_message_return
message(pPBJParser ctx)
{   
    PBJParser_message_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    BLOCK_OPEN16;
    pANTLR3_COMMON_TOKEN    BLOCK_CLOSE18;
    PBJParser_message_or_extend_return message_or_extend14;
    #undef	RETURN_TYPE_message_or_extend14
    #define	RETURN_TYPE_message_or_extend14 PBJParser_message_or_extend_return

    PBJParser_message_identifier_return message_identifier15;
    #undef	RETURN_TYPE_message_identifier15
    #define	RETURN_TYPE_message_identifier15 PBJParser_message_identifier_return

    PBJParser_message_elements_return message_elements17;
    #undef	RETURN_TYPE_message_elements17
    #define	RETURN_TYPE_message_elements17 PBJParser_message_elements_return

    pANTLR3_BASE_TREE BLOCK_OPEN16_tree;
    pANTLR3_BASE_TREE BLOCK_CLOSE18_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_BLOCK_OPEN;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_BLOCK_CLOSE;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_message_elements;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_message_or_extend;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_message_identifier;
    /* Initialize rule variables
     */

    ctx->pPBJParser_messageTop = pPBJParser_messagePush(ctx);
    root_0 = NULL;

    BLOCK_OPEN16       = NULL;
    BLOCK_CLOSE18       = NULL;
    message_or_extend14.tree = NULL;

    message_identifier15.tree = NULL;

    message_elements17.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    BLOCK_OPEN16_tree   = NULL;
    BLOCK_CLOSE18_tree   = NULL;

    stream_BLOCK_OPEN   = NULL;
    #define CREATE_stream_BLOCK_OPEN  if (stream_BLOCK_OPEN == NULL) {stream_BLOCK_OPEN = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token BLOCK_OPEN"); } 
    stream_BLOCK_CLOSE   = NULL;
    #define CREATE_stream_BLOCK_CLOSE  if (stream_BLOCK_CLOSE == NULL) {stream_BLOCK_CLOSE = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token BLOCK_CLOSE"); } 
    stream_message_elements   = NULL;
    #define CREATE_stream_message_elements  if (stream_message_elements == NULL) {stream_message_elements = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule message_elements"); }
    stream_message_or_extend   = NULL;
    #define CREATE_stream_message_or_extend  if (stream_message_or_extend == NULL) {stream_message_or_extend = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule message_or_extend"); }
    stream_message_identifier   = NULL;
    #define CREATE_stream_message_identifier  if (stream_message_identifier == NULL) {stream_message_identifier = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule message_identifier"); }

    retval.tree  = NULL;
    {
        // PBJ.g:119:5: ( ( message_or_extend message_identifier BLOCK_OPEN message_elements BLOCK_CLOSE -> message_or_extend WS[\" \"] message_identifier WS[\" \"] BLOCK_OPEN WS[\"\\n\"] message_elements BLOCK_CLOSE WS[\"\\n\"] ) )
        // PBJ.g:119:9: ( message_or_extend message_identifier BLOCK_OPEN message_elements BLOCK_CLOSE -> message_or_extend WS[\" \"] message_identifier WS[\" \"] BLOCK_OPEN WS[\"\\n\"] message_elements BLOCK_CLOSE WS[\"\\n\"] )
        {
            // PBJ.g:119:9: ( message_or_extend message_identifier BLOCK_OPEN message_elements BLOCK_CLOSE -> message_or_extend WS[\" \"] message_identifier WS[\" \"] BLOCK_OPEN WS[\"\\n\"] message_elements BLOCK_CLOSE WS[\"\\n\"] )
            // PBJ.g:119:11: message_or_extend message_identifier BLOCK_OPEN message_elements BLOCK_CLOSE
            {
                FOLLOWPUSH(FOLLOW_message_or_extend_in_message326);
                message_or_extend14=message_or_extend(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto rulemessageEx;
                }

                CREATE_stream_message_or_extend; stream_message_or_extend->add(stream_message_or_extend, message_or_extend14.tree, NULL);
                FOLLOWPUSH(FOLLOW_message_identifier_in_message328);
                message_identifier15=message_identifier(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto rulemessageEx;
                }

                CREATE_stream_message_identifier; stream_message_identifier->add(stream_message_identifier, message_identifier15.tree, NULL);
                BLOCK_OPEN16 = (pANTLR3_COMMON_TOKEN) MATCHT(BLOCK_OPEN, &FOLLOW_BLOCK_OPEN_in_message330); 
                if  (HASEXCEPTION())
                {
                    goto rulemessageEx;
                }
                 
                CREATE_stream_BLOCK_OPEN; stream_BLOCK_OPEN->add(stream_BLOCK_OPEN, BLOCK_OPEN16, NULL);

                FOLLOWPUSH(FOLLOW_message_elements_in_message332);
                message_elements17=message_elements(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto rulemessageEx;
                }

                CREATE_stream_message_elements; stream_message_elements->add(stream_message_elements, message_elements17.tree, NULL);
                BLOCK_CLOSE18 = (pANTLR3_COMMON_TOKEN) MATCHT(BLOCK_CLOSE, &FOLLOW_BLOCK_CLOSE_in_message334); 
                if  (HASEXCEPTION())
                {
                    goto rulemessageEx;
                }
                 
                CREATE_stream_BLOCK_CLOSE; stream_BLOCK_CLOSE->add(stream_BLOCK_CLOSE, BLOCK_CLOSE18, NULL);


                 
                /* AST REWRITE
                 * elements          : message_identifier, BLOCK_OPEN, message_or_extend, BLOCK_CLOSE, message_elements
                 * token labels      : 
                 * rule labels       : retval
                 * token list labels : 
                 * rule list labels  : 
                 */
                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 119:88: -> message_or_extend WS[\" \"] message_identifier WS[\" \"] BLOCK_OPEN WS[\"\\n\"] message_elements BLOCK_CLOSE WS[\"\\n\"]
                	{
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_message_or_extend == NULL ? NULL : stream_message_or_extend->nextTree(stream_message_or_extend));
                	    ADAPTOR->addChild(ADAPTOR, root_0, 
                	    #if 1 == 2
                	    	(pANTLR3_BASE_TREE)ADAPTOR->createTypeTokenText(ADAPTOR, WS, TOKTEXT(" "))
                	    #else
                	    	(pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, WS, (pANTLR3_UINT8)" ")
                	    #endif
                	    );
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_message_identifier == NULL ? NULL : stream_message_identifier->nextTree(stream_message_identifier));
                	    ADAPTOR->addChild(ADAPTOR, root_0, 
                	    #if 1 == 2
                	    	(pANTLR3_BASE_TREE)ADAPTOR->createTypeTokenText(ADAPTOR, WS, TOKTEXT(" "))
                	    #else
                	    	(pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, WS, (pANTLR3_UINT8)" ")
                	    #endif
                	    );
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_BLOCK_OPEN == NULL ? NULL : stream_BLOCK_OPEN->nextNode(stream_BLOCK_OPEN));
                	    ADAPTOR->addChild(ADAPTOR, root_0, 
                	    #if 1 == 2
                	    	(pANTLR3_BASE_TREE)ADAPTOR->createTypeTokenText(ADAPTOR, WS, TOKTEXT("\n"))
                	    #else
                	    	(pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, WS, (pANTLR3_UINT8)"\n")
                	    #endif
                	    );
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_message_elements == NULL ? NULL : stream_message_elements->nextTree(stream_message_elements));
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_BLOCK_CLOSE == NULL ? NULL : stream_BLOCK_CLOSE->nextNode(stream_BLOCK_CLOSE));
                	    ADAPTOR->addChild(ADAPTOR, root_0, 
                	    #if 1 == 2
                	    	(pANTLR3_BASE_TREE)ADAPTOR->createTypeTokenText(ADAPTOR, WS, TOKTEXT("\n"))
                	    #else
                	    	(pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, WS, (pANTLR3_UINT8)"\n")
                	    #endif
                	    );

                	}

                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);


                }
            }

            {

                            if(!	(SCOPE_TOP(message))->isExtension) {
                                defineType( ctx, 	(SCOPE_TOP(message))->messageName );
                            }
                            stringFree(	(SCOPE_TOP(message))->messageName);
                        
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulemessageEx; /* Prevent compiler warnings */
    rulemessageEx: ;
    pPBJParser_messagePop(ctx);

    retval.stop = LT(-1);

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_BLOCK_OPEN != NULL) stream_BLOCK_OPEN->free(stream_BLOCK_OPEN);
        if (stream_BLOCK_CLOSE != NULL) stream_BLOCK_CLOSE->free(stream_BLOCK_CLOSE);
        if (stream_message_elements != NULL) stream_message_elements->free(stream_message_elements);
        if (stream_message_or_extend != NULL) stream_message_or_extend->free(stream_message_or_extend);
        if (stream_message_identifier != NULL) stream_message_identifier->free(stream_message_identifier);

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end message */

/** 
 * $ANTLR start message_or_extend
 * PBJ.g:128:1: message_or_extend : ( MESSAGE | EXTEND );
 */
static PBJParser_message_or_extend_return
message_or_extend(pPBJParser ctx)
{   
    PBJParser_message_or_extend_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    MESSAGE19;
    pANTLR3_COMMON_TOKEN    EXTEND20;

    pANTLR3_BASE_TREE MESSAGE19_tree;
    pANTLR3_BASE_TREE EXTEND20_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    MESSAGE19       = NULL;
    EXTEND20       = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    MESSAGE19_tree   = NULL;
    EXTEND20_tree   = NULL;


    retval.tree  = NULL;
    {
        {
            //  PBJ.g:128:19: ( MESSAGE | EXTEND )
            
            ANTLR3_UINT32 alt7;

            alt7=2;


            {
                int LA7_0 = LA(1);
                if ( (LA7_0 == MESSAGE) ) 
                {
                    alt7=1;
                }
                else if ( (LA7_0 == EXTEND) ) 
                {
                    alt7=2;
                }
                else 
                {
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 7;
                    EXCEPTION->state        = 0;


                    goto rulemessage_or_extendEx;
                }
            }
            switch (alt7) 
            {
        	case 1:
        	    // PBJ.g:129:9: MESSAGE
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        MESSAGE19 = (pANTLR3_COMMON_TOKEN) MATCHT(MESSAGE, &FOLLOW_MESSAGE_in_message_or_extend389); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemessage_or_extendEx;
        	        }

        	        MESSAGE19_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, MESSAGE19));
        	        ADAPTOR->addChild(ADAPTOR, root_0, MESSAGE19_tree);

        	        {
        	            	(SCOPE_TOP(message))->isExtension=0;
        	        }

        	    }
        	    break;
        	case 2:
        	    // PBJ.g:131:9: EXTEND
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        EXTEND20 = (pANTLR3_COMMON_TOKEN) MATCHT(EXTEND, &FOLLOW_EXTEND_in_message_or_extend411); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemessage_or_extendEx;
        	        }

        	        EXTEND20_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, EXTEND20));
        	        ADAPTOR->addChild(ADAPTOR, root_0, EXTEND20_tree);

        	        {
        	            	(SCOPE_TOP(message))->isExtension=1;
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulemessage_or_extendEx; /* Prevent compiler warnings */
    rulemessage_or_extendEx: ;
    retval.stop = LT(-1);

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end message_or_extend */

/** 
 * $ANTLR start message_identifier
 * PBJ.g:134:1: message_identifier : IDENTIFIER ;
 */
static PBJParser_message_identifier_return
message_identifier(pPBJParser ctx)
{   
    PBJParser_message_identifier_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    IDENTIFIER21;

    pANTLR3_BASE_TREE IDENTIFIER21_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    IDENTIFIER21       = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    IDENTIFIER21_tree   = NULL;


    retval.tree  = NULL;
    {
        // PBJ.g:135:5: ( IDENTIFIER )
        // PBJ.g:135:7: IDENTIFIER
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            IDENTIFIER21 = (pANTLR3_COMMON_TOKEN) MATCHT(IDENTIFIER, &FOLLOW_IDENTIFIER_in_message_identifier434); 
            if  (HASEXCEPTION())
            {
                goto rulemessage_identifierEx;
            }

            IDENTIFIER21_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, IDENTIFIER21));
            ADAPTOR->addChild(ADAPTOR, root_0, IDENTIFIER21_tree);

            {

                        	(SCOPE_TOP(message))->messageName=stringDup((IDENTIFIER21->getText(IDENTIFIER21)));
                        if (	(SCOPE_TOP(message))->isExtension) {
                            defineExtension(ctx, 	(SCOPE_TOP(message))->messageName);
                        }else {
                            defineMessage(ctx, 	(SCOPE_TOP(message))->messageName);
                        }
                    
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulemessage_identifierEx; /* Prevent compiler warnings */
    rulemessage_identifierEx: ;
    retval.stop = LT(-1);

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end message_identifier */

/** 
 * $ANTLR start message_elements
 * PBJ.g:146:1: message_elements : ( message_element )* ;
 */
static PBJParser_message_elements_return
message_elements(pPBJParser ctx)
{   
    PBJParser_message_elements_return retval;

    pANTLR3_BASE_TREE root_0;

    PBJParser_message_element_return message_element22;
    #undef	RETURN_TYPE_message_element22
    #define	RETURN_TYPE_message_element22 PBJParser_message_element_return


    /* Initialize rule variables
     */
    ctx->pPBJParser_SymbolsTop = pPBJParser_SymbolsPush(ctx);

    root_0 = NULL;


            initSymbolTable(SCOPE_TOP(Symbols), 	(SCOPE_TOP(message))->messageName, 	(SCOPE_TOP(message))->isExtension);  
        
    message_element22.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;



    retval.tree  = NULL;
    {
        // PBJ.g:152:2: ( ( message_element )* )
        // PBJ.g:152:4: ( message_element )*
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));


            // PBJ.g:152:4: ( message_element )*

            for (;;)
            {
                int alt8=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA8_0 = LA(1);
                    if ( (((LA8_0 >= MESSAGE) && (LA8_0 <= EXTEND)) || LA8_0 == EXTENSIONS || ((LA8_0 >= RESERVE) && (LA8_0 <= ENUM)) || ((LA8_0 >= PBJOPTIONAL) && (LA8_0 <= REPEATED)) || ((LA8_0 >= FLAGS8) && (LA8_0 <= FLAGS64))) ) 
                    {
                        alt8=1;
                    }

                }
                switch (alt8) 
                {
            	case 1:
            	    // PBJ.g:152:4: message_element
            	    {
            	        FOLLOWPUSH(FOLLOW_message_element_in_message_elements476);
            	        message_element22=message_element(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulemessage_elementsEx;
            	        }

            	        ADAPTOR->addChild(ADAPTOR, root_0, message_element22.tree);

            	    }
            	    break;

            	default:
            	    goto loop8;	/* break out of the loop */
            	    break;
                }
            }
            loop8: ; /* Jump out to here if this rule does not match */

            {

                        if(	(SCOPE_TOP(message))->isExtension) {
                            defineExtensionEnd(ctx, 	(SCOPE_TOP(message))->messageName);
                        }else {
                            defineMessageEnd(ctx, 	(SCOPE_TOP(message))->messageName);
                        }
                    
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulemessage_elementsEx; /* Prevent compiler warnings */
    rulemessage_elementsEx: ;
    pPBJParser_SymbolsPop(ctx);

    retval.stop = LT(-1);

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end message_elements */

/** 
 * $ANTLR start message_element
 * PBJ.g:162:1: message_element : ( field | message | enum_def | flags_def | extensions | reservations );
 */
static PBJParser_message_element_return
message_element(pPBJParser ctx)
{   
    PBJParser_message_element_return retval;

    pANTLR3_BASE_TREE root_0;

    PBJParser_field_return field23;
    #undef	RETURN_TYPE_field23
    #define	RETURN_TYPE_field23 PBJParser_field_return

    PBJParser_message_return message24;
    #undef	RETURN_TYPE_message24
    #define	RETURN_TYPE_message24 PBJParser_message_return

    PBJParser_enum_def_return enum_def25;
    #undef	RETURN_TYPE_enum_def25
    #define	RETURN_TYPE_enum_def25 PBJParser_enum_def_return

    PBJParser_flags_def_return flags_def26;
    #undef	RETURN_TYPE_flags_def26
    #define	RETURN_TYPE_flags_def26 PBJParser_flags_def_return

    PBJParser_extensions_return extensions27;
    #undef	RETURN_TYPE_extensions27
    #define	RETURN_TYPE_extensions27 PBJParser_extensions_return

    PBJParser_reservations_return reservations28;
    #undef	RETURN_TYPE_reservations28
    #define	RETURN_TYPE_reservations28 PBJParser_reservations_return


    /* Initialize rule variables
     */


    root_0 = NULL;

    field23.tree = NULL;

    message24.tree = NULL;

    enum_def25.tree = NULL;

    flags_def26.tree = NULL;

    extensions27.tree = NULL;

    reservations28.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;



    retval.tree  = NULL;
    {
        {
            //  PBJ.g:163:2: ( field | message | enum_def | flags_def | extensions | reservations )
            
            ANTLR3_UINT32 alt9;

            alt9=6;

            switch ( LA(1) ) 
            {
            case PBJOPTIONAL:
            case REQUIRED:
            case REPEATED:
            	{
            		alt9=1;
            	}
                break;
            case MESSAGE:
            case EXTEND:
            	{
            		alt9=2;
            	}
                break;
            case ENUM:
            	{
            		alt9=3;
            	}
                break;
            case FLAGS8:
            case FLAGS16:
            case FLAGS32:
            case FLAGS64:
            	{
            		alt9=4;
            	}
                break;
            case EXTENSIONS:
            	{
            		alt9=5;
            	}
                break;
            case RESERVE:
            	{
            		alt9=6;
            	}
                break;

            default:
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 9;
                EXCEPTION->state        = 0;


                goto rulemessage_elementEx;
            }

            switch (alt9) 
            {
        	case 1:
        	    // PBJ.g:163:4: field
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_field_in_message_element497);
        	        field23=field(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemessage_elementEx;
        	        }

        	        ADAPTOR->addChild(ADAPTOR, root_0, field23.tree);

        	    }
        	    break;
        	case 2:
        	    // PBJ.g:164:4: message
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_message_in_message_element502);
        	        message24=message(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemessage_elementEx;
        	        }

        	        ADAPTOR->addChild(ADAPTOR, root_0, message24.tree);

        	    }
        	    break;
        	case 3:
        	    // PBJ.g:165:4: enum_def
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_enum_def_in_message_element507);
        	        enum_def25=enum_def(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemessage_elementEx;
        	        }

        	        ADAPTOR->addChild(ADAPTOR, root_0, enum_def25.tree);

        	    }
        	    break;
        	case 4:
        	    // PBJ.g:166:4: flags_def
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_flags_def_in_message_element512);
        	        flags_def26=flags_def(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemessage_elementEx;
        	        }

        	        ADAPTOR->addChild(ADAPTOR, root_0, flags_def26.tree);

        	    }
        	    break;
        	case 5:
        	    // PBJ.g:167:9: extensions
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_extensions_in_message_element522);
        	        extensions27=extensions(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemessage_elementEx;
        	        }

        	        ADAPTOR->addChild(ADAPTOR, root_0, extensions27.tree);

        	    }
        	    break;
        	case 6:
        	    // PBJ.g:168:9: reservations
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_reservations_in_message_element532);
        	        reservations28=reservations(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemessage_elementEx;
        	        }

        	        ADAPTOR->addChild(ADAPTOR, root_0, reservations28.tree);

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulemessage_elementEx; /* Prevent compiler warnings */
    rulemessage_elementEx: ;
    retval.stop = LT(-1);

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end message_element */

/** 
 * $ANTLR start extensions
 * PBJ.g:171:1: extensions : ( EXTENSIONS integer TO integer_inclusive ITEM_TERMINATOR -> WS[\"\\t\"] EXTENSIONS WS[\" \"] integer WS[\" \"] TO WS[\" \"] integer_inclusive ITEM_TERMINATOR WS[\"\\n\"] ) ;
 */
static PBJParser_extensions_return
extensions(pPBJParser ctx)
{   
    PBJParser_extensions_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    EXTENSIONS29;
    pANTLR3_COMMON_TOKEN    TO31;
    pANTLR3_COMMON_TOKEN    ITEM_TERMINATOR33;
    PBJParser_integer_return integer30;
    #undef	RETURN_TYPE_integer30
    #define	RETURN_TYPE_integer30 PBJParser_integer_return

    PBJParser_integer_inclusive_return integer_inclusive32;
    #undef	RETURN_TYPE_integer_inclusive32
    #define	RETURN_TYPE_integer_inclusive32 PBJParser_integer_inclusive_return

    pANTLR3_BASE_TREE EXTENSIONS29_tree;
    pANTLR3_BASE_TREE TO31_tree;
    pANTLR3_BASE_TREE ITEM_TERMINATOR33_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_EXTENSIONS;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_TO;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_ITEM_TERMINATOR;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_integer;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_integer_inclusive;
    /* Initialize rule variables
     */


    root_0 = NULL;

    EXTENSIONS29       = NULL;
    TO31       = NULL;
    ITEM_TERMINATOR33       = NULL;
    integer30.tree = NULL;

    integer_inclusive32.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    EXTENSIONS29_tree   = NULL;
    TO31_tree   = NULL;
    ITEM_TERMINATOR33_tree   = NULL;

    stream_EXTENSIONS   = NULL;
    #define CREATE_stream_EXTENSIONS  if (stream_EXTENSIONS == NULL) {stream_EXTENSIONS = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token EXTENSIONS"); } 
    stream_TO   = NULL;
    #define CREATE_stream_TO  if (stream_TO == NULL) {stream_TO = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token TO"); } 
    stream_ITEM_TERMINATOR   = NULL;
    #define CREATE_stream_ITEM_TERMINATOR  if (stream_ITEM_TERMINATOR == NULL) {stream_ITEM_TERMINATOR = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token ITEM_TERMINATOR"); } 
    stream_integer   = NULL;
    #define CREATE_stream_integer  if (stream_integer == NULL) {stream_integer = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule integer"); }
    stream_integer_inclusive   = NULL;
    #define CREATE_stream_integer_inclusive  if (stream_integer_inclusive == NULL) {stream_integer_inclusive = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule integer_inclusive"); }

    retval.tree  = NULL;
    {
        // PBJ.g:172:9: ( ( EXTENSIONS integer TO integer_inclusive ITEM_TERMINATOR -> WS[\"\\t\"] EXTENSIONS WS[\" \"] integer WS[\" \"] TO WS[\" \"] integer_inclusive ITEM_TERMINATOR WS[\"\\n\"] ) )
        // PBJ.g:173:9: ( EXTENSIONS integer TO integer_inclusive ITEM_TERMINATOR -> WS[\"\\t\"] EXTENSIONS WS[\" \"] integer WS[\" \"] TO WS[\" \"] integer_inclusive ITEM_TERMINATOR WS[\"\\n\"] )
        {
            // PBJ.g:173:9: ( EXTENSIONS integer TO integer_inclusive ITEM_TERMINATOR -> WS[\"\\t\"] EXTENSIONS WS[\" \"] integer WS[\" \"] TO WS[\" \"] integer_inclusive ITEM_TERMINATOR WS[\"\\n\"] )
            // PBJ.g:173:11: EXTENSIONS integer TO integer_inclusive ITEM_TERMINATOR
            {
                EXTENSIONS29 = (pANTLR3_COMMON_TOKEN) MATCHT(EXTENSIONS, &FOLLOW_EXTENSIONS_in_extensions561); 
                if  (HASEXCEPTION())
                {
                    goto ruleextensionsEx;
                }
                 
                CREATE_stream_EXTENSIONS; stream_EXTENSIONS->add(stream_EXTENSIONS, EXTENSIONS29, NULL);

                FOLLOWPUSH(FOLLOW_integer_in_extensions563);
                integer30=integer(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto ruleextensionsEx;
                }

                CREATE_stream_integer; stream_integer->add(stream_integer, integer30.tree, NULL);
                TO31 = (pANTLR3_COMMON_TOKEN) MATCHT(TO, &FOLLOW_TO_in_extensions565); 
                if  (HASEXCEPTION())
                {
                    goto ruleextensionsEx;
                }
                 
                CREATE_stream_TO; stream_TO->add(stream_TO, TO31, NULL);

                FOLLOWPUSH(FOLLOW_integer_inclusive_in_extensions567);
                integer_inclusive32=integer_inclusive(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto ruleextensionsEx;
                }

                CREATE_stream_integer_inclusive; stream_integer_inclusive->add(stream_integer_inclusive, integer_inclusive32.tree, NULL);
                ITEM_TERMINATOR33 = (pANTLR3_COMMON_TOKEN) MATCHT(ITEM_TERMINATOR, &FOLLOW_ITEM_TERMINATOR_in_extensions569); 
                if  (HASEXCEPTION())
                {
                    goto ruleextensionsEx;
                }
                 
                CREATE_stream_ITEM_TERMINATOR; stream_ITEM_TERMINATOR->add(stream_ITEM_TERMINATOR, ITEM_TERMINATOR33, NULL);


                 
                /* AST REWRITE
                 * elements          : integer, ITEM_TERMINATOR, EXTENSIONS, integer_inclusive, TO
                 * token labels      : 
                 * rule labels       : retval
                 * token list labels : 
                 * rule list labels  : 
                 */
                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 173:67: -> WS[\"\\t\"] EXTENSIONS WS[\" \"] integer WS[\" \"] TO WS[\" \"] integer_inclusive ITEM_TERMINATOR WS[\"\\n\"]
                	{
                	    ADAPTOR->addChild(ADAPTOR, root_0, 
                	    #if 1 == 2
                	    	(pANTLR3_BASE_TREE)ADAPTOR->createTypeTokenText(ADAPTOR, WS, TOKTEXT("\t"))
                	    #else
                	    	(pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, WS, (pANTLR3_UINT8)"\t")
                	    #endif
                	    );
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_EXTENSIONS == NULL ? NULL : stream_EXTENSIONS->nextNode(stream_EXTENSIONS));
                	    ADAPTOR->addChild(ADAPTOR, root_0, 
                	    #if 1 == 2
                	    	(pANTLR3_BASE_TREE)ADAPTOR->createTypeTokenText(ADAPTOR, WS, TOKTEXT(" "))
                	    #else
                	    	(pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, WS, (pANTLR3_UINT8)" ")
                	    #endif
                	    );
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_integer == NULL ? NULL : stream_integer->nextTree(stream_integer));
                	    ADAPTOR->addChild(ADAPTOR, root_0, 
                	    #if 1 == 2
                	    	(pANTLR3_BASE_TREE)ADAPTOR->createTypeTokenText(ADAPTOR, WS, TOKTEXT(" "))
                	    #else
                	    	(pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, WS, (pANTLR3_UINT8)" ")
                	    #endif
                	    );
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_TO == NULL ? NULL : stream_TO->nextNode(stream_TO));
                	    ADAPTOR->addChild(ADAPTOR, root_0, 
                	    #if 1 == 2
                	    	(pANTLR3_BASE_TREE)ADAPTOR->createTypeTokenText(ADAPTOR, WS, TOKTEXT(" "))
                	    #else
                	    	(pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, WS, (pANTLR3_UINT8)" ")
                	    #endif
                	    );
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_integer_inclusive == NULL ? NULL : stream_integer_inclusive->nextTree(stream_integer_inclusive));
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_ITEM_TERMINATOR == NULL ? NULL : stream_ITEM_TERMINATOR->nextNode(stream_ITEM_TERMINATOR));
                	    ADAPTOR->addChild(ADAPTOR, root_0, 
                	    #if 1 == 2
                	    	(pANTLR3_BASE_TREE)ADAPTOR->createTypeTokenText(ADAPTOR, WS, TOKTEXT("\n"))
                	    #else
                	    	(pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, WS, (pANTLR3_UINT8)"\n")
                	    #endif
                	    );

                	}

                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);


                }
            }

            {

                            defineExtensionRange(ctx, (STRSTREAM->toStringTT(STRSTREAM, integer30.start, integer30.stop)), (STRSTREAM->toStringTT(STRSTREAM, integer_inclusive32.start, integer_inclusive32.stop)));
                        
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleextensionsEx; /* Prevent compiler warnings */
    ruleextensionsEx: ;
    retval.stop = LT(-1);

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_EXTENSIONS != NULL) stream_EXTENSIONS->free(stream_EXTENSIONS);
        if (stream_TO != NULL) stream_TO->free(stream_TO);
        if (stream_ITEM_TERMINATOR != NULL) stream_ITEM_TERMINATOR->free(stream_ITEM_TERMINATOR);
        if (stream_integer != NULL) stream_integer->free(stream_integer);
        if (stream_integer_inclusive != NULL) stream_integer_inclusive->free(stream_integer_inclusive);

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end extensions */

/** 
 * $ANTLR start reservations
 * PBJ.g:179:1: reservations : ( RESERVE integer TO integer_inclusive ITEM_TERMINATOR ->) ;
 */
static PBJParser_reservations_return
reservations(pPBJParser ctx)
{   
    PBJParser_reservations_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    RESERVE34;
    pANTLR3_COMMON_TOKEN    TO36;
    pANTLR3_COMMON_TOKEN    ITEM_TERMINATOR38;
    PBJParser_integer_return integer35;
    #undef	RETURN_TYPE_integer35
    #define	RETURN_TYPE_integer35 PBJParser_integer_return

    PBJParser_integer_inclusive_return integer_inclusive37;
    #undef	RETURN_TYPE_integer_inclusive37
    #define	RETURN_TYPE_integer_inclusive37 PBJParser_integer_inclusive_return

    pANTLR3_BASE_TREE RESERVE34_tree;
    pANTLR3_BASE_TREE TO36_tree;
    pANTLR3_BASE_TREE ITEM_TERMINATOR38_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_RESERVE;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_TO;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_ITEM_TERMINATOR;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_integer;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_integer_inclusive;
    /* Initialize rule variables
     */


    root_0 = NULL;

    RESERVE34       = NULL;
    TO36       = NULL;
    ITEM_TERMINATOR38       = NULL;
    integer35.tree = NULL;

    integer_inclusive37.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    RESERVE34_tree   = NULL;
    TO36_tree   = NULL;
    ITEM_TERMINATOR38_tree   = NULL;

    stream_RESERVE   = NULL;
    #define CREATE_stream_RESERVE  if (stream_RESERVE == NULL) {stream_RESERVE = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token RESERVE"); } 
    stream_TO   = NULL;
    #define CREATE_stream_TO  if (stream_TO == NULL) {stream_TO = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token TO"); } 
    stream_ITEM_TERMINATOR   = NULL;
    #define CREATE_stream_ITEM_TERMINATOR  if (stream_ITEM_TERMINATOR == NULL) {stream_ITEM_TERMINATOR = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token ITEM_TERMINATOR"); } 
    stream_integer   = NULL;
    #define CREATE_stream_integer  if (stream_integer == NULL) {stream_integer = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule integer"); }
    stream_integer_inclusive   = NULL;
    #define CREATE_stream_integer_inclusive  if (stream_integer_inclusive == NULL) {stream_integer_inclusive = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule integer_inclusive"); }

    retval.tree  = NULL;
    {
        // PBJ.g:179:14: ( ( RESERVE integer TO integer_inclusive ITEM_TERMINATOR ->) )
        // PBJ.g:179:16: ( RESERVE integer TO integer_inclusive ITEM_TERMINATOR ->)
        {
            // PBJ.g:179:16: ( RESERVE integer TO integer_inclusive ITEM_TERMINATOR ->)
            // PBJ.g:179:17: RESERVE integer TO integer_inclusive ITEM_TERMINATOR
            {
                RESERVE34 = (pANTLR3_COMMON_TOKEN) MATCHT(RESERVE, &FOLLOW_RESERVE_in_reservations626); 
                if  (HASEXCEPTION())
                {
                    goto rulereservationsEx;
                }
                 
                CREATE_stream_RESERVE; stream_RESERVE->add(stream_RESERVE, RESERVE34, NULL);

                FOLLOWPUSH(FOLLOW_integer_in_reservations628);
                integer35=integer(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto rulereservationsEx;
                }

                CREATE_stream_integer; stream_integer->add(stream_integer, integer35.tree, NULL);
                TO36 = (pANTLR3_COMMON_TOKEN) MATCHT(TO, &FOLLOW_TO_in_reservations630); 
                if  (HASEXCEPTION())
                {
                    goto rulereservationsEx;
                }
                 
                CREATE_stream_TO; stream_TO->add(stream_TO, TO36, NULL);

                FOLLOWPUSH(FOLLOW_integer_inclusive_in_reservations632);
                integer_inclusive37=integer_inclusive(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto rulereservationsEx;
                }

                CREATE_stream_integer_inclusive; stream_integer_inclusive->add(stream_integer_inclusive, integer_inclusive37.tree, NULL);
                ITEM_TERMINATOR38 = (pANTLR3_COMMON_TOKEN) MATCHT(ITEM_TERMINATOR, &FOLLOW_ITEM_TERMINATOR_in_reservations634); 
                if  (HASEXCEPTION())
                {
                    goto rulereservationsEx;
                }
                 
                CREATE_stream_ITEM_TERMINATOR; stream_ITEM_TERMINATOR->add(stream_ITEM_TERMINATOR, ITEM_TERMINATOR38, NULL);


                 
                /* AST REWRITE
                 * elements          : 
                 * token labels      : 
                 * rule labels       : retval
                 * token list labels : 
                 * rule list labels  : 
                 */
                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 179:70: ->
                	{
                	    root_0 = NULL; /* <-- rewriteEmptyAlt()) */
                	}

                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);


                }
            }

            {

                            defineReservedRange(ctx, (STRSTREAM->toStringTT(STRSTREAM, integer35.start, integer35.stop)), (STRSTREAM->toStringTT(STRSTREAM, integer_inclusive37.start, integer_inclusive37.stop)));
                        
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulereservationsEx; /* Prevent compiler warnings */
    rulereservationsEx: ;
    retval.stop = LT(-1);

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_RESERVE != NULL) stream_RESERVE->free(stream_RESERVE);
        if (stream_TO != NULL) stream_TO->free(stream_TO);
        if (stream_ITEM_TERMINATOR != NULL) stream_ITEM_TERMINATOR->free(stream_ITEM_TERMINATOR);
        if (stream_integer != NULL) stream_integer->free(stream_integer);
        if (stream_integer_inclusive != NULL) stream_integer_inclusive->free(stream_integer_inclusive);

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end reservations */

/** 
 * $ANTLR start integer_inclusive
 * PBJ.g:185:1: integer_inclusive : integer ;
 */
static PBJParser_integer_inclusive_return
integer_inclusive(pPBJParser ctx)
{   
    PBJParser_integer_inclusive_return retval;

    pANTLR3_BASE_TREE root_0;

    PBJParser_integer_return integer39;
    #undef	RETURN_TYPE_integer39
    #define	RETURN_TYPE_integer39 PBJParser_integer_return


    /* Initialize rule variables
     */


    root_0 = NULL;

    integer39.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;



    retval.tree  = NULL;
    {
        // PBJ.g:185:19: ( integer )
        // PBJ.g:185:21: integer
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            FOLLOWPUSH(FOLLOW_integer_in_integer_inclusive665);
            integer39=integer(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleinteger_inclusiveEx;
            }

            ADAPTOR->addChild(ADAPTOR, root_0, integer39.tree);
            {

                            
                        
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleinteger_inclusiveEx; /* Prevent compiler warnings */
    ruleinteger_inclusiveEx: ;
    retval.stop = LT(-1);

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end integer_inclusive */

/** 
 * $ANTLR start enum_def
 * PBJ.g:191:1: enum_def : ( ENUM enum_identifier BLOCK_OPEN ( enum_element )+ BLOCK_CLOSE -> WS[\"\\t\"] ENUM WS[\" \"] enum_identifier WS[\" \"] BLOCK_OPEN WS[\"\\n\"] ( WS[\"\\t\"] enum_element )+ WS[\"\\t\"] BLOCK_CLOSE WS[\"\\n\"] ) ;
 */
static PBJParser_enum_def_return
enum_def(pPBJParser ctx)
{   
    PBJParser_enum_def_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    ENUM40;
    pANTLR3_COMMON_TOKEN    BLOCK_OPEN42;
    pANTLR3_COMMON_TOKEN    BLOCK_CLOSE44;
    PBJParser_enum_identifier_return enum_identifier41;
    #undef	RETURN_TYPE_enum_identifier41
    #define	RETURN_TYPE_enum_identifier41 PBJParser_enum_identifier_return

    PBJParser_enum_element_return enum_element43;
    #undef	RETURN_TYPE_enum_element43
    #define	RETURN_TYPE_enum_element43 PBJParser_enum_element_return

    pANTLR3_BASE_TREE ENUM40_tree;
    pANTLR3_BASE_TREE BLOCK_OPEN42_tree;
    pANTLR3_BASE_TREE BLOCK_CLOSE44_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_BLOCK_OPEN;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_BLOCK_CLOSE;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_ENUM;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_enum_identifier;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_enum_element;
    /* Initialize rule variables
     */

    ctx->pPBJParser_enum_defTop = pPBJParser_enum_defPush(ctx);
    root_0 = NULL;


            	(SCOPE_TOP(enum_def))->enumList=antlr3ListNew(1);
        
    ENUM40       = NULL;
    BLOCK_OPEN42       = NULL;
    BLOCK_CLOSE44       = NULL;
    enum_identifier41.tree = NULL;

    enum_element43.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    ENUM40_tree   = NULL;
    BLOCK_OPEN42_tree   = NULL;
    BLOCK_CLOSE44_tree   = NULL;

    stream_BLOCK_OPEN   = NULL;
    #define CREATE_stream_BLOCK_OPEN  if (stream_BLOCK_OPEN == NULL) {stream_BLOCK_OPEN = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token BLOCK_OPEN"); } 
    stream_BLOCK_CLOSE   = NULL;
    #define CREATE_stream_BLOCK_CLOSE  if (stream_BLOCK_CLOSE == NULL) {stream_BLOCK_CLOSE = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token BLOCK_CLOSE"); } 
    stream_ENUM   = NULL;
    #define CREATE_stream_ENUM  if (stream_ENUM == NULL) {stream_ENUM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token ENUM"); } 
    stream_enum_identifier   = NULL;
    #define CREATE_stream_enum_identifier  if (stream_enum_identifier == NULL) {stream_enum_identifier = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule enum_identifier"); }
    stream_enum_element   = NULL;
    #define CREATE_stream_enum_element  if (stream_enum_element == NULL) {stream_enum_element = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule enum_element"); }

    retval.tree  = NULL;
    {
        // PBJ.g:199:2: ( ( ENUM enum_identifier BLOCK_OPEN ( enum_element )+ BLOCK_CLOSE -> WS[\"\\t\"] ENUM WS[\" \"] enum_identifier WS[\" \"] BLOCK_OPEN WS[\"\\n\"] ( WS[\"\\t\"] enum_element )+ WS[\"\\t\"] BLOCK_CLOSE WS[\"\\n\"] ) )
        // PBJ.g:199:4: ( ENUM enum_identifier BLOCK_OPEN ( enum_element )+ BLOCK_CLOSE -> WS[\"\\t\"] ENUM WS[\" \"] enum_identifier WS[\" \"] BLOCK_OPEN WS[\"\\n\"] ( WS[\"\\t\"] enum_element )+ WS[\"\\t\"] BLOCK_CLOSE WS[\"\\n\"] )
        {
            // PBJ.g:199:4: ( ENUM enum_identifier BLOCK_OPEN ( enum_element )+ BLOCK_CLOSE -> WS[\"\\t\"] ENUM WS[\" \"] enum_identifier WS[\" \"] BLOCK_OPEN WS[\"\\n\"] ( WS[\"\\t\"] enum_element )+ WS[\"\\t\"] BLOCK_CLOSE WS[\"\\n\"] )
            // PBJ.g:199:6: ENUM enum_identifier BLOCK_OPEN ( enum_element )+ BLOCK_CLOSE
            {
                ENUM40 = (pANTLR3_COMMON_TOKEN) MATCHT(ENUM, &FOLLOW_ENUM_in_enum_def713); 
                if  (HASEXCEPTION())
                {
                    goto ruleenum_defEx;
                }
                 
                CREATE_stream_ENUM; stream_ENUM->add(stream_ENUM, ENUM40, NULL);

                FOLLOWPUSH(FOLLOW_enum_identifier_in_enum_def715);
                enum_identifier41=enum_identifier(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto ruleenum_defEx;
                }

                CREATE_stream_enum_identifier; stream_enum_identifier->add(stream_enum_identifier, enum_identifier41.tree, NULL);
                BLOCK_OPEN42 = (pANTLR3_COMMON_TOKEN) MATCHT(BLOCK_OPEN, &FOLLOW_BLOCK_OPEN_in_enum_def717); 
                if  (HASEXCEPTION())
                {
                    goto ruleenum_defEx;
                }
                 
                CREATE_stream_BLOCK_OPEN; stream_BLOCK_OPEN->add(stream_BLOCK_OPEN, BLOCK_OPEN42, NULL);

                // PBJ.g:199:38: ( enum_element )+
                {
                    int cnt10=0;

                    for (;;)
                    {
                        int alt10=2;
                	{
                	   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                	    */
                	    int LA10_0 = LA(1);
                	    if ( (LA10_0 == IDENTIFIER) ) 
                	    {
                	        alt10=1;
                	    }

                	}
                	switch (alt10) 
                	{
                	    case 1:
                	        // PBJ.g:199:38: enum_element
                	        {
                	            FOLLOWPUSH(FOLLOW_enum_element_in_enum_def719);
                	            enum_element43=enum_element(ctx);

                	            FOLLOWPOP();
                	            if  (HASEXCEPTION())
                	            {
                	                goto ruleenum_defEx;
                	            }

                	            CREATE_stream_enum_element; stream_enum_element->add(stream_enum_element, enum_element43.tree, NULL);

                	        }
                	        break;

                	    default:
                	    
                		if ( cnt10 >= 1 )
                		{
                		    goto loop10;
                		}
                		/* mismatchedSetEx()
                		 */
                		CONSTRUCTEX();
                		EXCEPTION->type = ANTLR3_EARLY_EXIT_EXCEPTION;
                		EXCEPTION->name = (void *)ANTLR3_EARLY_EXIT_NAME;


                		goto ruleenum_defEx;
                	}
                	cnt10++;
                    }
                    loop10: ;	/* Jump to here if this rule does not match */
                }
                BLOCK_CLOSE44 = (pANTLR3_COMMON_TOKEN) MATCHT(BLOCK_CLOSE, &FOLLOW_BLOCK_CLOSE_in_enum_def722); 
                if  (HASEXCEPTION())
                {
                    goto ruleenum_defEx;
                }
                 
                CREATE_stream_BLOCK_CLOSE; stream_BLOCK_CLOSE->add(stream_BLOCK_CLOSE, BLOCK_CLOSE44, NULL);


                 
                /* AST REWRITE
                 * elements          : enum_element, BLOCK_OPEN, enum_identifier, BLOCK_CLOSE, ENUM
                 * token labels      : 
                 * rule labels       : retval
                 * token list labels : 
                 * rule list labels  : 
                 */
                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 199:64: -> WS[\"\\t\"] ENUM WS[\" \"] enum_identifier WS[\" \"] BLOCK_OPEN WS[\"\\n\"] ( WS[\"\\t\"] enum_element )+ WS[\"\\t\"] BLOCK_CLOSE WS[\"\\n\"]
                	{
                	    ADAPTOR->addChild(ADAPTOR, root_0, 
                	    #if 1 == 2
                	    	(pANTLR3_BASE_TREE)ADAPTOR->createTypeTokenText(ADAPTOR, WS, TOKTEXT("\t"))
                	    #else
                	    	(pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, WS, (pANTLR3_UINT8)"\t")
                	    #endif
                	    );
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_ENUM == NULL ? NULL : stream_ENUM->nextNode(stream_ENUM));
                	    ADAPTOR->addChild(ADAPTOR, root_0, 
                	    #if 1 == 2
                	    	(pANTLR3_BASE_TREE)ADAPTOR->createTypeTokenText(ADAPTOR, WS, TOKTEXT(" "))
                	    #else
                	    	(pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, WS, (pANTLR3_UINT8)" ")
                	    #endif
                	    );
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_enum_identifier == NULL ? NULL : stream_enum_identifier->nextTree(stream_enum_identifier));
                	    ADAPTOR->addChild(ADAPTOR, root_0, 
                	    #if 1 == 2
                	    	(pANTLR3_BASE_TREE)ADAPTOR->createTypeTokenText(ADAPTOR, WS, TOKTEXT(" "))
                	    #else
                	    	(pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, WS, (pANTLR3_UINT8)" ")
                	    #endif
                	    );
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_BLOCK_OPEN == NULL ? NULL : stream_BLOCK_OPEN->nextNode(stream_BLOCK_OPEN));
                	    ADAPTOR->addChild(ADAPTOR, root_0, 
                	    #if 1 == 2
                	    	(pANTLR3_BASE_TREE)ADAPTOR->createTypeTokenText(ADAPTOR, WS, TOKTEXT("\n"))
                	    #else
                	    	(pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, WS, (pANTLR3_UINT8)"\n")
                	    #endif
                	    );
                	    if ((stream_enum_element == NULL || !stream_enum_element->hasNext(stream_enum_element))  )
                	    {
                	        CONSTRUCTEX();
                	        EXCEPTION->type         = ANTLR3_REWRITE_EARLY_EXCEPTION;
                	        EXCEPTION->name         = (void *)ANTLR3_REWRITE_EARLY_EXCEPTION_NAME;
                	    }
                	    else
                	    {
                	    	while ( (stream_enum_element->hasNext(stream_enum_element))  ) {
                	    		ADAPTOR->addChild(ADAPTOR, root_0, 
                	    		#if 1 == 2
                	    			(pANTLR3_BASE_TREE)ADAPTOR->createTypeTokenText(ADAPTOR, WS, TOKTEXT("\t"))
                	    		#else
                	    			(pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, WS, (pANTLR3_UINT8)"\t")
                	    		#endif
                	    		);
                	    		ADAPTOR->addChild(ADAPTOR, root_0, stream_enum_element == NULL ? NULL : stream_enum_element->nextTree(stream_enum_element));

                	    	}
                	    	stream_enum_element->reset(stream_enum_element);

                	    }ADAPTOR->addChild(ADAPTOR, root_0, 
                	    #if 1 == 2
                	    	(pANTLR3_BASE_TREE)ADAPTOR->createTypeTokenText(ADAPTOR, WS, TOKTEXT("\t"))
                	    #else
                	    	(pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, WS, (pANTLR3_UINT8)"\t")
                	    #endif
                	    );
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_BLOCK_CLOSE == NULL ? NULL : stream_BLOCK_CLOSE->nextNode(stream_BLOCK_CLOSE));
                	    ADAPTOR->addChild(ADAPTOR, root_0, 
                	    #if 1 == 2
                	    	(pANTLR3_BASE_TREE)ADAPTOR->createTypeTokenText(ADAPTOR, WS, TOKTEXT("\n"))
                	    #else
                	    	(pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, WS, (pANTLR3_UINT8)"\n")
                	    #endif
                	    );

                	}

                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);


                }
            }

            {

                            defineEnum( ctx, 	(SCOPE_TOP(message))->messageName, 	(SCOPE_TOP(enum_def))->enumName, 	(SCOPE_TOP(enum_def))->enumList);
                            	(SCOPE_TOP(enum_def))->enumList->free(	(SCOPE_TOP(enum_def))->enumList);
                            stringFree(	(SCOPE_TOP(enum_def))->enumName);
                        
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleenum_defEx; /* Prevent compiler warnings */
    ruleenum_defEx: ;
    pPBJParser_enum_defPop(ctx);

    retval.stop = LT(-1);

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_BLOCK_OPEN != NULL) stream_BLOCK_OPEN->free(stream_BLOCK_OPEN);
        if (stream_BLOCK_CLOSE != NULL) stream_BLOCK_CLOSE->free(stream_BLOCK_CLOSE);
        if (stream_ENUM != NULL) stream_ENUM->free(stream_ENUM);
        if (stream_enum_identifier != NULL) stream_enum_identifier->free(stream_enum_identifier);
        if (stream_enum_element != NULL) stream_enum_element->free(stream_enum_element);

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end enum_def */

/** 
 * $ANTLR start enum_element
 * PBJ.g:207:1: enum_element : ( IDENTIFIER EQUALS integer ITEM_TERMINATOR -> WS[\"\\t\"] IDENTIFIER WS[\" \"] EQUALS WS[\" \"] integer ITEM_TERMINATOR WS[\"\\n\"] ) ;
 */
static PBJParser_enum_element_return
enum_element(pPBJParser ctx)
{   
    PBJParser_enum_element_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    IDENTIFIER45;
    pANTLR3_COMMON_TOKEN    EQUALS46;
    pANTLR3_COMMON_TOKEN    ITEM_TERMINATOR48;
    PBJParser_integer_return integer47;
    #undef	RETURN_TYPE_integer47
    #define	RETURN_TYPE_integer47 PBJParser_integer_return

    pANTLR3_BASE_TREE IDENTIFIER45_tree;
    pANTLR3_BASE_TREE EQUALS46_tree;
    pANTLR3_BASE_TREE ITEM_TERMINATOR48_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_EQUALS;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_IDENTIFIER;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_ITEM_TERMINATOR;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_integer;
    /* Initialize rule variables
     */


    root_0 = NULL;

    IDENTIFIER45       = NULL;
    EQUALS46       = NULL;
    ITEM_TERMINATOR48       = NULL;
    integer47.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    IDENTIFIER45_tree   = NULL;
    EQUALS46_tree   = NULL;
    ITEM_TERMINATOR48_tree   = NULL;

    stream_EQUALS   = NULL;
    #define CREATE_stream_EQUALS  if (stream_EQUALS == NULL) {stream_EQUALS = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token EQUALS"); } 
    stream_IDENTIFIER   = NULL;
    #define CREATE_stream_IDENTIFIER  if (stream_IDENTIFIER == NULL) {stream_IDENTIFIER = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token IDENTIFIER"); } 
    stream_ITEM_TERMINATOR   = NULL;
    #define CREATE_stream_ITEM_TERMINATOR  if (stream_ITEM_TERMINATOR == NULL) {stream_ITEM_TERMINATOR = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token ITEM_TERMINATOR"); } 
    stream_integer   = NULL;
    #define CREATE_stream_integer  if (stream_integer == NULL) {stream_integer = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule integer"); }

    retval.tree  = NULL;
    {
        // PBJ.g:208:2: ( ( IDENTIFIER EQUALS integer ITEM_TERMINATOR -> WS[\"\\t\"] IDENTIFIER WS[\" \"] EQUALS WS[\" \"] integer ITEM_TERMINATOR WS[\"\\n\"] ) )
        // PBJ.g:208:4: ( IDENTIFIER EQUALS integer ITEM_TERMINATOR -> WS[\"\\t\"] IDENTIFIER WS[\" \"] EQUALS WS[\" \"] integer ITEM_TERMINATOR WS[\"\\n\"] )
        {
            // PBJ.g:208:4: ( IDENTIFIER EQUALS integer ITEM_TERMINATOR -> WS[\"\\t\"] IDENTIFIER WS[\" \"] EQUALS WS[\" \"] integer ITEM_TERMINATOR WS[\"\\n\"] )
            // PBJ.g:208:5: IDENTIFIER EQUALS integer ITEM_TERMINATOR
            {
                IDENTIFIER45 = (pANTLR3_COMMON_TOKEN) MATCHT(IDENTIFIER, &FOLLOW_IDENTIFIER_in_enum_element782); 
                if  (HASEXCEPTION())
                {
                    goto ruleenum_elementEx;
                }
                 
                CREATE_stream_IDENTIFIER; stream_IDENTIFIER->add(stream_IDENTIFIER, IDENTIFIER45, NULL);

                EQUALS46 = (pANTLR3_COMMON_TOKEN) MATCHT(EQUALS, &FOLLOW_EQUALS_in_enum_element784); 
                if  (HASEXCEPTION())
                {
                    goto ruleenum_elementEx;
                }
                 
                CREATE_stream_EQUALS; stream_EQUALS->add(stream_EQUALS, EQUALS46, NULL);

                FOLLOWPUSH(FOLLOW_integer_in_enum_element786);
                integer47=integer(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto ruleenum_elementEx;
                }

                CREATE_stream_integer; stream_integer->add(stream_integer, integer47.tree, NULL);
                ITEM_TERMINATOR48 = (pANTLR3_COMMON_TOKEN) MATCHT(ITEM_TERMINATOR, &FOLLOW_ITEM_TERMINATOR_in_enum_element788); 
                if  (HASEXCEPTION())
                {
                    goto ruleenum_elementEx;
                }
                 
                CREATE_stream_ITEM_TERMINATOR; stream_ITEM_TERMINATOR->add(stream_ITEM_TERMINATOR, ITEM_TERMINATOR48, NULL);


                 
                /* AST REWRITE
                 * elements          : IDENTIFIER, integer, EQUALS, ITEM_TERMINATOR
                 * token labels      : 
                 * rule labels       : retval
                 * token list labels : 
                 * rule list labels  : 
                 */
                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 208:47: -> WS[\"\\t\"] IDENTIFIER WS[\" \"] EQUALS WS[\" \"] integer ITEM_TERMINATOR WS[\"\\n\"]
                	{
                	    ADAPTOR->addChild(ADAPTOR, root_0, 
                	    #if 1 == 2
                	    	(pANTLR3_BASE_TREE)ADAPTOR->createTypeTokenText(ADAPTOR, WS, TOKTEXT("\t"))
                	    #else
                	    	(pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, WS, (pANTLR3_UINT8)"\t")
                	    #endif
                	    );
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_IDENTIFIER == NULL ? NULL : stream_IDENTIFIER->nextNode(stream_IDENTIFIER));
                	    ADAPTOR->addChild(ADAPTOR, root_0, 
                	    #if 1 == 2
                	    	(pANTLR3_BASE_TREE)ADAPTOR->createTypeTokenText(ADAPTOR, WS, TOKTEXT(" "))
                	    #else
                	    	(pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, WS, (pANTLR3_UINT8)" ")
                	    #endif
                	    );
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_EQUALS == NULL ? NULL : stream_EQUALS->nextNode(stream_EQUALS));
                	    ADAPTOR->addChild(ADAPTOR, root_0, 
                	    #if 1 == 2
                	    	(pANTLR3_BASE_TREE)ADAPTOR->createTypeTokenText(ADAPTOR, WS, TOKTEXT(" "))
                	    #else
                	    	(pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, WS, (pANTLR3_UINT8)" ")
                	    #endif
                	    );
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_integer == NULL ? NULL : stream_integer->nextTree(stream_integer));
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_ITEM_TERMINATOR == NULL ? NULL : stream_ITEM_TERMINATOR->nextNode(stream_ITEM_TERMINATOR));
                	    ADAPTOR->addChild(ADAPTOR, root_0, 
                	    #if 1 == 2
                	    	(pANTLR3_BASE_TREE)ADAPTOR->createTypeTokenText(ADAPTOR, WS, TOKTEXT("\n"))
                	    #else
                	    	(pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, WS, (pANTLR3_UINT8)"\n")
                	    #endif
                	    );

                	}

                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);


                }
            }

            {

                            defineEnumValue( ctx, 	(SCOPE_TOP(message))->messageName, 	(SCOPE_TOP(enum_def))->enumName, 	(SCOPE_TOP(enum_def))->enumList, (IDENTIFIER45->getText(IDENTIFIER45)), (STRSTREAM->toStringTT(STRSTREAM, integer47.start, integer47.stop)) );
                        
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleenum_elementEx; /* Prevent compiler warnings */
    ruleenum_elementEx: ;
    retval.stop = LT(-1);

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_EQUALS != NULL) stream_EQUALS->free(stream_EQUALS);
        if (stream_IDENTIFIER != NULL) stream_IDENTIFIER->free(stream_IDENTIFIER);
        if (stream_ITEM_TERMINATOR != NULL) stream_ITEM_TERMINATOR->free(stream_ITEM_TERMINATOR);
        if (stream_integer != NULL) stream_integer->free(stream_integer);

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end enum_element */

/** 
 * $ANTLR start enum_identifier
 * PBJ.g:213:1: enum_identifier : IDENTIFIER ;
 */
static PBJParser_enum_identifier_return
enum_identifier(pPBJParser ctx)
{   
    PBJParser_enum_identifier_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    IDENTIFIER49;

    pANTLR3_BASE_TREE IDENTIFIER49_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    IDENTIFIER49       = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    IDENTIFIER49_tree   = NULL;


    retval.tree  = NULL;
    {
        // PBJ.g:214:5: ( IDENTIFIER )
        // PBJ.g:214:7: IDENTIFIER
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            IDENTIFIER49 = (pANTLR3_COMMON_TOKEN) MATCHT(IDENTIFIER, &FOLLOW_IDENTIFIER_in_enum_identifier835); 
            if  (HASEXCEPTION())
            {
                goto ruleenum_identifierEx;
            }

            IDENTIFIER49_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, IDENTIFIER49));
            ADAPTOR->addChild(ADAPTOR, root_0, IDENTIFIER49_tree);

            {

                            	(SCOPE_TOP(enum_def))->enumName=stringDup((IDENTIFIER49->getText(IDENTIFIER49)));
                      
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleenum_identifierEx; /* Prevent compiler warnings */
    ruleenum_identifierEx: ;
    retval.stop = LT(-1);

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end enum_identifier */

/** 
 * $ANTLR start flags_def
 * PBJ.g:220:1: flags_def : ( flags flag_identifier BLOCK_OPEN ( flag_element )+ BLOCK_CLOSE -> WS[\"\\t\"] ENUM[\"enum\"] WS[\" \"] flag_identifier WS[\" \"] BLOCK_OPEN WS[\"\\n\"] ( WS[\"\\t\"] flag_element )+ WS[\"\\t\"] BLOCK_CLOSE WS[\"\\n\"] ) ;
 */
static PBJParser_flags_def_return
flags_def(pPBJParser ctx)
{   
    PBJParser_flags_def_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    BLOCK_OPEN52;
    pANTLR3_COMMON_TOKEN    BLOCK_CLOSE54;
    PBJParser_flags_return flags50;
    #undef	RETURN_TYPE_flags50
    #define	RETURN_TYPE_flags50 PBJParser_flags_return

    PBJParser_flag_identifier_return flag_identifier51;
    #undef	RETURN_TYPE_flag_identifier51
    #define	RETURN_TYPE_flag_identifier51 PBJParser_flag_identifier_return

    PBJParser_flag_element_return flag_element53;
    #undef	RETURN_TYPE_flag_element53
    #define	RETURN_TYPE_flag_element53 PBJParser_flag_element_return

    pANTLR3_BASE_TREE BLOCK_OPEN52_tree;
    pANTLR3_BASE_TREE BLOCK_CLOSE54_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_BLOCK_OPEN;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_BLOCK_CLOSE;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_flags;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_flag_identifier;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_flag_element;
    /* Initialize rule variables
     */

    ctx->pPBJParser_flags_defTop = pPBJParser_flags_defPush(ctx);
    root_0 = NULL;


            	(SCOPE_TOP(flags_def))->flagList=antlr3ListNew(1);
            
        
    BLOCK_OPEN52       = NULL;
    BLOCK_CLOSE54       = NULL;
    flags50.tree = NULL;

    flag_identifier51.tree = NULL;

    flag_element53.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    BLOCK_OPEN52_tree   = NULL;
    BLOCK_CLOSE54_tree   = NULL;

    stream_BLOCK_OPEN   = NULL;
    #define CREATE_stream_BLOCK_OPEN  if (stream_BLOCK_OPEN == NULL) {stream_BLOCK_OPEN = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token BLOCK_OPEN"); } 
    stream_BLOCK_CLOSE   = NULL;
    #define CREATE_stream_BLOCK_CLOSE  if (stream_BLOCK_CLOSE == NULL) {stream_BLOCK_CLOSE = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token BLOCK_CLOSE"); } 
    stream_flags   = NULL;
    #define CREATE_stream_flags  if (stream_flags == NULL) {stream_flags = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule flags"); }
    stream_flag_identifier   = NULL;
    #define CREATE_stream_flag_identifier  if (stream_flag_identifier == NULL) {stream_flag_identifier = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule flag_identifier"); }
    stream_flag_element   = NULL;
    #define CREATE_stream_flag_element  if (stream_flag_element == NULL) {stream_flag_element = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule flag_element"); }

    retval.tree  = NULL;
    {
        // PBJ.g:231:2: ( ( flags flag_identifier BLOCK_OPEN ( flag_element )+ BLOCK_CLOSE -> WS[\"\\t\"] ENUM[\"enum\"] WS[\" \"] flag_identifier WS[\" \"] BLOCK_OPEN WS[\"\\n\"] ( WS[\"\\t\"] flag_element )+ WS[\"\\t\"] BLOCK_CLOSE WS[\"\\n\"] ) )
        // PBJ.g:231:4: ( flags flag_identifier BLOCK_OPEN ( flag_element )+ BLOCK_CLOSE -> WS[\"\\t\"] ENUM[\"enum\"] WS[\" \"] flag_identifier WS[\" \"] BLOCK_OPEN WS[\"\\n\"] ( WS[\"\\t\"] flag_element )+ WS[\"\\t\"] BLOCK_CLOSE WS[\"\\n\"] )
        {
            // PBJ.g:231:4: ( flags flag_identifier BLOCK_OPEN ( flag_element )+ BLOCK_CLOSE -> WS[\"\\t\"] ENUM[\"enum\"] WS[\" \"] flag_identifier WS[\" \"] BLOCK_OPEN WS[\"\\n\"] ( WS[\"\\t\"] flag_element )+ WS[\"\\t\"] BLOCK_CLOSE WS[\"\\n\"] )
            // PBJ.g:231:6: flags flag_identifier BLOCK_OPEN ( flag_element )+ BLOCK_CLOSE
            {
                FOLLOWPUSH(FOLLOW_flags_in_flags_def882);
                flags50=flags(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto ruleflags_defEx;
                }

                CREATE_stream_flags; stream_flags->add(stream_flags, flags50.tree, NULL);
                FOLLOWPUSH(FOLLOW_flag_identifier_in_flags_def884);
                flag_identifier51=flag_identifier(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto ruleflags_defEx;
                }

                CREATE_stream_flag_identifier; stream_flag_identifier->add(stream_flag_identifier, flag_identifier51.tree, NULL);
                BLOCK_OPEN52 = (pANTLR3_COMMON_TOKEN) MATCHT(BLOCK_OPEN, &FOLLOW_BLOCK_OPEN_in_flags_def886); 
                if  (HASEXCEPTION())
                {
                    goto ruleflags_defEx;
                }
                 
                CREATE_stream_BLOCK_OPEN; stream_BLOCK_OPEN->add(stream_BLOCK_OPEN, BLOCK_OPEN52, NULL);

                // PBJ.g:231:39: ( flag_element )+
                {
                    int cnt11=0;

                    for (;;)
                    {
                        int alt11=2;
                	{
                	   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                	    */
                	    int LA11_0 = LA(1);
                	    if ( (LA11_0 == IDENTIFIER) ) 
                	    {
                	        alt11=1;
                	    }

                	}
                	switch (alt11) 
                	{
                	    case 1:
                	        // PBJ.g:231:39: flag_element
                	        {
                	            FOLLOWPUSH(FOLLOW_flag_element_in_flags_def888);
                	            flag_element53=flag_element(ctx);

                	            FOLLOWPOP();
                	            if  (HASEXCEPTION())
                	            {
                	                goto ruleflags_defEx;
                	            }

                	            CREATE_stream_flag_element; stream_flag_element->add(stream_flag_element, flag_element53.tree, NULL);

                	        }
                	        break;

                	    default:
                	    
                		if ( cnt11 >= 1 )
                		{
                		    goto loop11;
                		}
                		/* mismatchedSetEx()
                		 */
                		CONSTRUCTEX();
                		EXCEPTION->type = ANTLR3_EARLY_EXIT_EXCEPTION;
                		EXCEPTION->name = (void *)ANTLR3_EARLY_EXIT_NAME;


                		goto ruleflags_defEx;
                	}
                	cnt11++;
                    }
                    loop11: ;	/* Jump to here if this rule does not match */
                }
                BLOCK_CLOSE54 = (pANTLR3_COMMON_TOKEN) MATCHT(BLOCK_CLOSE, &FOLLOW_BLOCK_CLOSE_in_flags_def891); 
                if  (HASEXCEPTION())
                {
                    goto ruleflags_defEx;
                }
                 
                CREATE_stream_BLOCK_CLOSE; stream_BLOCK_CLOSE->add(stream_BLOCK_CLOSE, BLOCK_CLOSE54, NULL);


                 
                /* AST REWRITE
                 * elements          : flag_element, BLOCK_OPEN, flag_identifier, BLOCK_CLOSE
                 * token labels      : 
                 * rule labels       : retval
                 * token list labels : 
                 * rule list labels  : 
                 */
                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 231:65: -> WS[\"\\t\"] ENUM[\"enum\"] WS[\" \"] flag_identifier WS[\" \"] BLOCK_OPEN WS[\"\\n\"] ( WS[\"\\t\"] flag_element )+ WS[\"\\t\"] BLOCK_CLOSE WS[\"\\n\"]
                	{
                	    ADAPTOR->addChild(ADAPTOR, root_0, 
                	    #if 1 == 2
                	    	(pANTLR3_BASE_TREE)ADAPTOR->createTypeTokenText(ADAPTOR, WS, TOKTEXT("\t"))
                	    #else
                	    	(pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, WS, (pANTLR3_UINT8)"\t")
                	    #endif
                	    );
                	    ADAPTOR->addChild(ADAPTOR, root_0, 
                	    #if 1 == 2
                	    	(pANTLR3_BASE_TREE)ADAPTOR->createTypeTokenText(ADAPTOR, ENUM, TOKTEXT("enum"))
                	    #else
                	    	(pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, ENUM, (pANTLR3_UINT8)"enum")
                	    #endif
                	    );
                	    ADAPTOR->addChild(ADAPTOR, root_0, 
                	    #if 1 == 2
                	    	(pANTLR3_BASE_TREE)ADAPTOR->createTypeTokenText(ADAPTOR, WS, TOKTEXT(" "))
                	    #else
                	    	(pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, WS, (pANTLR3_UINT8)" ")
                	    #endif
                	    );
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_flag_identifier == NULL ? NULL : stream_flag_identifier->nextTree(stream_flag_identifier));
                	    ADAPTOR->addChild(ADAPTOR, root_0, 
                	    #if 1 == 2
                	    	(pANTLR3_BASE_TREE)ADAPTOR->createTypeTokenText(ADAPTOR, WS, TOKTEXT(" "))
                	    #else
                	    	(pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, WS, (pANTLR3_UINT8)" ")
                	    #endif
                	    );
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_BLOCK_OPEN == NULL ? NULL : stream_BLOCK_OPEN->nextNode(stream_BLOCK_OPEN));
                	    ADAPTOR->addChild(ADAPTOR, root_0, 
                	    #if 1 == 2
                	    	(pANTLR3_BASE_TREE)ADAPTOR->createTypeTokenText(ADAPTOR, WS, TOKTEXT("\n"))
                	    #else
                	    	(pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, WS, (pANTLR3_UINT8)"\n")
                	    #endif
                	    );
                	    if ((stream_flag_element == NULL || !stream_flag_element->hasNext(stream_flag_element))  )
                	    {
                	        CONSTRUCTEX();
                	        EXCEPTION->type         = ANTLR3_REWRITE_EARLY_EXCEPTION;
                	        EXCEPTION->name         = (void *)ANTLR3_REWRITE_EARLY_EXCEPTION_NAME;
                	    }
                	    else
                	    {
                	    	while ( (stream_flag_element->hasNext(stream_flag_element))  ) {
                	    		ADAPTOR->addChild(ADAPTOR, root_0, 
                	    		#if 1 == 2
                	    			(pANTLR3_BASE_TREE)ADAPTOR->createTypeTokenText(ADAPTOR, WS, TOKTEXT("\t"))
                	    		#else
                	    			(pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, WS, (pANTLR3_UINT8)"\t")
                	    		#endif
                	    		);
                	    		ADAPTOR->addChild(ADAPTOR, root_0, stream_flag_element == NULL ? NULL : stream_flag_element->nextTree(stream_flag_element));

                	    	}
                	    	stream_flag_element->reset(stream_flag_element);

                	    }ADAPTOR->addChild(ADAPTOR, root_0, 
                	    #if 1 == 2
                	    	(pANTLR3_BASE_TREE)ADAPTOR->createTypeTokenText(ADAPTOR, WS, TOKTEXT("\t"))
                	    #else
                	    	(pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, WS, (pANTLR3_UINT8)"\t")
                	    #endif
                	    );
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_BLOCK_CLOSE == NULL ? NULL : stream_BLOCK_CLOSE->nextNode(stream_BLOCK_CLOSE));
                	    ADAPTOR->addChild(ADAPTOR, root_0, 
                	    #if 1 == 2
                	    	(pANTLR3_BASE_TREE)ADAPTOR->createTypeTokenText(ADAPTOR, WS, TOKTEXT("\n"))
                	    #else
                	    	(pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, WS, (pANTLR3_UINT8)"\n")
                	    #endif
                	    );

                	}

                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);


                }
            }

            {

                            defineFlag( ctx, 	(SCOPE_TOP(message))->messageName, 	(SCOPE_TOP(flags_def))->flagName, 	(SCOPE_TOP(flags_def))->flagList, 	(SCOPE_TOP(flags_def))->flagBits);
                            	(SCOPE_TOP(flags_def))->flagList->free(	(SCOPE_TOP(flags_def))->flagList);
                            stringFree(	(SCOPE_TOP(flags_def))->flagName);
                        
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleflags_defEx; /* Prevent compiler warnings */
    ruleflags_defEx: ;
    pPBJParser_flags_defPop(ctx);

    retval.stop = LT(-1);

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_BLOCK_OPEN != NULL) stream_BLOCK_OPEN->free(stream_BLOCK_OPEN);
        if (stream_BLOCK_CLOSE != NULL) stream_BLOCK_CLOSE->free(stream_BLOCK_CLOSE);
        if (stream_flags != NULL) stream_flags->free(stream_flags);
        if (stream_flag_identifier != NULL) stream_flag_identifier->free(stream_flag_identifier);
        if (stream_flag_element != NULL) stream_flag_element->free(stream_flag_element);

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end flags_def */

/** 
 * $ANTLR start flag_identifier
 * PBJ.g:239:1: flag_identifier : IDENTIFIER ;
 */
static PBJParser_flag_identifier_return
flag_identifier(pPBJParser ctx)
{   
    PBJParser_flag_identifier_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    IDENTIFIER55;

    pANTLR3_BASE_TREE IDENTIFIER55_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    IDENTIFIER55       = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    IDENTIFIER55_tree   = NULL;


    retval.tree  = NULL;
    {
        // PBJ.g:240:2: ( IDENTIFIER )
        // PBJ.g:240:4: IDENTIFIER
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            IDENTIFIER55 = (pANTLR3_COMMON_TOKEN) MATCHT(IDENTIFIER, &FOLLOW_IDENTIFIER_in_flag_identifier952); 
            if  (HASEXCEPTION())
            {
                goto ruleflag_identifierEx;
            }

            IDENTIFIER55_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, IDENTIFIER55));
            ADAPTOR->addChild(ADAPTOR, root_0, IDENTIFIER55_tree);

            {

                            	(SCOPE_TOP(flags_def))->flagName=stringDup((IDENTIFIER55->getText(IDENTIFIER55)));
                        
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleflag_identifierEx; /* Prevent compiler warnings */
    ruleflag_identifierEx: ;
    retval.stop = LT(-1);

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end flag_identifier */

/** 
 * $ANTLR start flag_element
 * PBJ.g:246:1: flag_element : ( IDENTIFIER EQUALS integer ITEM_TERMINATOR -> WS[\"\\t\"] IDENTIFIER WS[\" \"] EQUALS WS[\" \"] integer ITEM_TERMINATOR WS[\"\\n\"] ) ;
 */
static PBJParser_flag_element_return
flag_element(pPBJParser ctx)
{   
    PBJParser_flag_element_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    IDENTIFIER56;
    pANTLR3_COMMON_TOKEN    EQUALS57;
    pANTLR3_COMMON_TOKEN    ITEM_TERMINATOR59;
    PBJParser_integer_return integer58;
    #undef	RETURN_TYPE_integer58
    #define	RETURN_TYPE_integer58 PBJParser_integer_return

    pANTLR3_BASE_TREE IDENTIFIER56_tree;
    pANTLR3_BASE_TREE EQUALS57_tree;
    pANTLR3_BASE_TREE ITEM_TERMINATOR59_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_EQUALS;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_IDENTIFIER;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_ITEM_TERMINATOR;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_integer;
    /* Initialize rule variables
     */


    root_0 = NULL;

    IDENTIFIER56       = NULL;
    EQUALS57       = NULL;
    ITEM_TERMINATOR59       = NULL;
    integer58.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    IDENTIFIER56_tree   = NULL;
    EQUALS57_tree   = NULL;
    ITEM_TERMINATOR59_tree   = NULL;

    stream_EQUALS   = NULL;
    #define CREATE_stream_EQUALS  if (stream_EQUALS == NULL) {stream_EQUALS = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token EQUALS"); } 
    stream_IDENTIFIER   = NULL;
    #define CREATE_stream_IDENTIFIER  if (stream_IDENTIFIER == NULL) {stream_IDENTIFIER = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token IDENTIFIER"); } 
    stream_ITEM_TERMINATOR   = NULL;
    #define CREATE_stream_ITEM_TERMINATOR  if (stream_ITEM_TERMINATOR == NULL) {stream_ITEM_TERMINATOR = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token ITEM_TERMINATOR"); } 
    stream_integer   = NULL;
    #define CREATE_stream_integer  if (stream_integer == NULL) {stream_integer = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule integer"); }

    retval.tree  = NULL;
    {
        // PBJ.g:247:2: ( ( IDENTIFIER EQUALS integer ITEM_TERMINATOR -> WS[\"\\t\"] IDENTIFIER WS[\" \"] EQUALS WS[\" \"] integer ITEM_TERMINATOR WS[\"\\n\"] ) )
        // PBJ.g:247:4: ( IDENTIFIER EQUALS integer ITEM_TERMINATOR -> WS[\"\\t\"] IDENTIFIER WS[\" \"] EQUALS WS[\" \"] integer ITEM_TERMINATOR WS[\"\\n\"] )
        {
            // PBJ.g:247:4: ( IDENTIFIER EQUALS integer ITEM_TERMINATOR -> WS[\"\\t\"] IDENTIFIER WS[\" \"] EQUALS WS[\" \"] integer ITEM_TERMINATOR WS[\"\\n\"] )
            // PBJ.g:247:6: IDENTIFIER EQUALS integer ITEM_TERMINATOR
            {
                IDENTIFIER56 = (pANTLR3_COMMON_TOKEN) MATCHT(IDENTIFIER, &FOLLOW_IDENTIFIER_in_flag_element975); 
                if  (HASEXCEPTION())
                {
                    goto ruleflag_elementEx;
                }
                 
                CREATE_stream_IDENTIFIER; stream_IDENTIFIER->add(stream_IDENTIFIER, IDENTIFIER56, NULL);

                EQUALS57 = (pANTLR3_COMMON_TOKEN) MATCHT(EQUALS, &FOLLOW_EQUALS_in_flag_element977); 
                if  (HASEXCEPTION())
                {
                    goto ruleflag_elementEx;
                }
                 
                CREATE_stream_EQUALS; stream_EQUALS->add(stream_EQUALS, EQUALS57, NULL);

                FOLLOWPUSH(FOLLOW_integer_in_flag_element979);
                integer58=integer(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto ruleflag_elementEx;
                }

                CREATE_stream_integer; stream_integer->add(stream_integer, integer58.tree, NULL);
                ITEM_TERMINATOR59 = (pANTLR3_COMMON_TOKEN) MATCHT(ITEM_TERMINATOR, &FOLLOW_ITEM_TERMINATOR_in_flag_element981); 
                if  (HASEXCEPTION())
                {
                    goto ruleflag_elementEx;
                }
                 
                CREATE_stream_ITEM_TERMINATOR; stream_ITEM_TERMINATOR->add(stream_ITEM_TERMINATOR, ITEM_TERMINATOR59, NULL);


                 
                /* AST REWRITE
                 * elements          : ITEM_TERMINATOR, integer, EQUALS, IDENTIFIER
                 * token labels      : 
                 * rule labels       : retval
                 * token list labels : 
                 * rule list labels  : 
                 */
                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 247:48: -> WS[\"\\t\"] IDENTIFIER WS[\" \"] EQUALS WS[\" \"] integer ITEM_TERMINATOR WS[\"\\n\"]
                	{
                	    ADAPTOR->addChild(ADAPTOR, root_0, 
                	    #if 1 == 2
                	    	(pANTLR3_BASE_TREE)ADAPTOR->createTypeTokenText(ADAPTOR, WS, TOKTEXT("\t"))
                	    #else
                	    	(pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, WS, (pANTLR3_UINT8)"\t")
                	    #endif
                	    );
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_IDENTIFIER == NULL ? NULL : stream_IDENTIFIER->nextNode(stream_IDENTIFIER));
                	    ADAPTOR->addChild(ADAPTOR, root_0, 
                	    #if 1 == 2
                	    	(pANTLR3_BASE_TREE)ADAPTOR->createTypeTokenText(ADAPTOR, WS, TOKTEXT(" "))
                	    #else
                	    	(pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, WS, (pANTLR3_UINT8)" ")
                	    #endif
                	    );
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_EQUALS == NULL ? NULL : stream_EQUALS->nextNode(stream_EQUALS));
                	    ADAPTOR->addChild(ADAPTOR, root_0, 
                	    #if 1 == 2
                	    	(pANTLR3_BASE_TREE)ADAPTOR->createTypeTokenText(ADAPTOR, WS, TOKTEXT(" "))
                	    #else
                	    	(pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, WS, (pANTLR3_UINT8)" ")
                	    #endif
                	    );
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_integer == NULL ? NULL : stream_integer->nextTree(stream_integer));
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_ITEM_TERMINATOR == NULL ? NULL : stream_ITEM_TERMINATOR->nextNode(stream_ITEM_TERMINATOR));
                	    ADAPTOR->addChild(ADAPTOR, root_0, 
                	    #if 1 == 2
                	    	(pANTLR3_BASE_TREE)ADAPTOR->createTypeTokenText(ADAPTOR, WS, TOKTEXT("\n"))
                	    #else
                	    	(pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, WS, (pANTLR3_UINT8)"\n")
                	    #endif
                	    );

                	}

                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);


                }
            }

            {

                            defineFlagValue( ctx, 	(SCOPE_TOP(message))->messageName, 	(SCOPE_TOP(flags_def))->flagName, 	(SCOPE_TOP(flags_def))->flagList, (IDENTIFIER56->getText(IDENTIFIER56)) , (STRSTREAM->toStringTT(STRSTREAM, integer58.start, integer58.stop)));
                        
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleflag_elementEx; /* Prevent compiler warnings */
    ruleflag_elementEx: ;
    retval.stop = LT(-1);

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_EQUALS != NULL) stream_EQUALS->free(stream_EQUALS);
        if (stream_IDENTIFIER != NULL) stream_IDENTIFIER->free(stream_IDENTIFIER);
        if (stream_ITEM_TERMINATOR != NULL) stream_ITEM_TERMINATOR->free(stream_ITEM_TERMINATOR);
        if (stream_integer != NULL) stream_integer->free(stream_integer);

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end flag_element */

/** 
 * $ANTLR start field
 * PBJ.g:253:1: field : ( ( ( ( PBJOPTIONAL multiplicitive_type field_name EQUALS field_offset ( default_value )? ITEM_TERMINATOR ) | ( ( REQUIRED | REPEATED ) multiplicitive_type field_name EQUALS field_offset ITEM_TERMINATOR ) ) -> WS[\"\\t\"] REPEATED[\"repeated\"] WS[\" \"] multiplicitive_type WS[\" \"] field_name WS[\" \"] EQUALS WS[\" \"] field_offset WS[\" \"] SQBRACKET_OPEN[\"[\"] IDENTIFIER[\"packed\"] EQUALS[\"=\"] BOOL_LITERAL[\"true\"] SQBRACKET_CLOSE[\"]\"] ITEM_TERMINATOR WS[\"\\n\"] ) | ( ( ( PBJOPTIONAL field_type field_name EQUALS field_offset ( default_value )? ITEM_TERMINATOR ) -> WS[\"\\t\"] PBJOPTIONAL WS[\" \"] field_type WS[\" \"] field_name WS[\" \"] EQUALS WS[\" \"] field_offset WS[\" \"] default_value ITEM_TERMINATOR WS[\"\\n\"] ) | ( ( ( REQUIRED | REPEATED ) field_type field_name EQUALS field_offset ITEM_TERMINATOR ) -> {$field::isNumericType && $REQUIRED==NULL}? WS[\"\\t\"] REPEATED WS[\" \"] field_type WS[\" \"] field_name WS[\" \"] EQUALS WS[\" \"] field_offset WS[\" \"] SQBRACKET_OPEN[\"[\"] IDENTIFIER[\"packed\"] EQUALS[\"=\"] BOOL_LITERAL[\"true\"] SQBRACKET_CLOSE[\"]\"] ITEM_TERMINATOR WS[\"\\n\"] -> WS[\"\\t\"] REQUIRED REPEATED WS[\" \"] field_type WS[\" \"] field_name WS[\" \"] EQUALS WS[\" \"] field_offset ITEM_TERMINATOR WS[\"\\n\"] ) ) );
 */
static PBJParser_field_return
field(pPBJParser ctx)
{   
    PBJParser_field_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    PBJOPTIONAL60;
    pANTLR3_COMMON_TOKEN    EQUALS63;
    pANTLR3_COMMON_TOKEN    ITEM_TERMINATOR66;
    pANTLR3_COMMON_TOKEN    REQUIRED67;
    pANTLR3_COMMON_TOKEN    REPEATED68;
    pANTLR3_COMMON_TOKEN    EQUALS71;
    pANTLR3_COMMON_TOKEN    ITEM_TERMINATOR73;
    pANTLR3_COMMON_TOKEN    PBJOPTIONAL74;
    pANTLR3_COMMON_TOKEN    EQUALS77;
    pANTLR3_COMMON_TOKEN    ITEM_TERMINATOR80;
    pANTLR3_COMMON_TOKEN    REQUIRED81;
    pANTLR3_COMMON_TOKEN    REPEATED82;
    pANTLR3_COMMON_TOKEN    EQUALS85;
    pANTLR3_COMMON_TOKEN    ITEM_TERMINATOR87;
    PBJParser_multiplicitive_type_return multiplicitive_type61;
    #undef	RETURN_TYPE_multiplicitive_type61
    #define	RETURN_TYPE_multiplicitive_type61 PBJParser_multiplicitive_type_return

    PBJParser_field_name_return field_name62;
    #undef	RETURN_TYPE_field_name62
    #define	RETURN_TYPE_field_name62 PBJParser_field_name_return

    PBJParser_field_offset_return field_offset64;
    #undef	RETURN_TYPE_field_offset64
    #define	RETURN_TYPE_field_offset64 PBJParser_field_offset_return

    PBJParser_default_value_return default_value65;
    #undef	RETURN_TYPE_default_value65
    #define	RETURN_TYPE_default_value65 PBJParser_default_value_return

    PBJParser_multiplicitive_type_return multiplicitive_type69;
    #undef	RETURN_TYPE_multiplicitive_type69
    #define	RETURN_TYPE_multiplicitive_type69 PBJParser_multiplicitive_type_return

    PBJParser_field_name_return field_name70;
    #undef	RETURN_TYPE_field_name70
    #define	RETURN_TYPE_field_name70 PBJParser_field_name_return

    PBJParser_field_offset_return field_offset72;
    #undef	RETURN_TYPE_field_offset72
    #define	RETURN_TYPE_field_offset72 PBJParser_field_offset_return

    PBJParser_field_type_return field_type75;
    #undef	RETURN_TYPE_field_type75
    #define	RETURN_TYPE_field_type75 PBJParser_field_type_return

    PBJParser_field_name_return field_name76;
    #undef	RETURN_TYPE_field_name76
    #define	RETURN_TYPE_field_name76 PBJParser_field_name_return

    PBJParser_field_offset_return field_offset78;
    #undef	RETURN_TYPE_field_offset78
    #define	RETURN_TYPE_field_offset78 PBJParser_field_offset_return

    PBJParser_default_value_return default_value79;
    #undef	RETURN_TYPE_default_value79
    #define	RETURN_TYPE_default_value79 PBJParser_default_value_return

    PBJParser_field_type_return field_type83;
    #undef	RETURN_TYPE_field_type83
    #define	RETURN_TYPE_field_type83 PBJParser_field_type_return

    PBJParser_field_name_return field_name84;
    #undef	RETURN_TYPE_field_name84
    #define	RETURN_TYPE_field_name84 PBJParser_field_name_return

    PBJParser_field_offset_return field_offset86;
    #undef	RETURN_TYPE_field_offset86
    #define	RETURN_TYPE_field_offset86 PBJParser_field_offset_return

    pANTLR3_BASE_TREE PBJOPTIONAL60_tree;
    pANTLR3_BASE_TREE EQUALS63_tree;
    pANTLR3_BASE_TREE ITEM_TERMINATOR66_tree;
    pANTLR3_BASE_TREE REQUIRED67_tree;
    pANTLR3_BASE_TREE REPEATED68_tree;
    pANTLR3_BASE_TREE EQUALS71_tree;
    pANTLR3_BASE_TREE ITEM_TERMINATOR73_tree;
    pANTLR3_BASE_TREE PBJOPTIONAL74_tree;
    pANTLR3_BASE_TREE EQUALS77_tree;
    pANTLR3_BASE_TREE ITEM_TERMINATOR80_tree;
    pANTLR3_BASE_TREE REQUIRED81_tree;
    pANTLR3_BASE_TREE REPEATED82_tree;
    pANTLR3_BASE_TREE EQUALS85_tree;
    pANTLR3_BASE_TREE ITEM_TERMINATOR87_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_REPEATED;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_EQUALS;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_REQUIRED;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_PBJOPTIONAL;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_ITEM_TERMINATOR;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_field_name;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_field_type;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_field_offset;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_default_value;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_multiplicitive_type;
    /* Initialize rule variables
     */

    ctx->pPBJParser_fieldTop = pPBJParser_fieldPush(ctx);
    root_0 = NULL;

    	(SCOPE_TOP(field))->defaultValue=NULL; 	(SCOPE_TOP(field))->isNumericType=0;
    PBJOPTIONAL60       = NULL;
    EQUALS63       = NULL;
    ITEM_TERMINATOR66       = NULL;
    REQUIRED67       = NULL;
    REPEATED68       = NULL;
    EQUALS71       = NULL;
    ITEM_TERMINATOR73       = NULL;
    PBJOPTIONAL74       = NULL;
    EQUALS77       = NULL;
    ITEM_TERMINATOR80       = NULL;
    REQUIRED81       = NULL;
    REPEATED82       = NULL;
    EQUALS85       = NULL;
    ITEM_TERMINATOR87       = NULL;
    multiplicitive_type61.tree = NULL;

    field_name62.tree = NULL;

    field_offset64.tree = NULL;

    default_value65.tree = NULL;

    multiplicitive_type69.tree = NULL;

    field_name70.tree = NULL;

    field_offset72.tree = NULL;

    field_type75.tree = NULL;

    field_name76.tree = NULL;

    field_offset78.tree = NULL;

    default_value79.tree = NULL;

    field_type83.tree = NULL;

    field_name84.tree = NULL;

    field_offset86.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    PBJOPTIONAL60_tree   = NULL;
    EQUALS63_tree   = NULL;
    ITEM_TERMINATOR66_tree   = NULL;
    REQUIRED67_tree   = NULL;
    REPEATED68_tree   = NULL;
    EQUALS71_tree   = NULL;
    ITEM_TERMINATOR73_tree   = NULL;
    PBJOPTIONAL74_tree   = NULL;
    EQUALS77_tree   = NULL;
    ITEM_TERMINATOR80_tree   = NULL;
    REQUIRED81_tree   = NULL;
    REPEATED82_tree   = NULL;
    EQUALS85_tree   = NULL;
    ITEM_TERMINATOR87_tree   = NULL;

    stream_REPEATED   = NULL;
    #define CREATE_stream_REPEATED  if (stream_REPEATED == NULL) {stream_REPEATED = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token REPEATED"); } 
    stream_EQUALS   = NULL;
    #define CREATE_stream_EQUALS  if (stream_EQUALS == NULL) {stream_EQUALS = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token EQUALS"); } 
    stream_REQUIRED   = NULL;
    #define CREATE_stream_REQUIRED  if (stream_REQUIRED == NULL) {stream_REQUIRED = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token REQUIRED"); } 
    stream_PBJOPTIONAL   = NULL;
    #define CREATE_stream_PBJOPTIONAL  if (stream_PBJOPTIONAL == NULL) {stream_PBJOPTIONAL = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token PBJOPTIONAL"); } 
    stream_ITEM_TERMINATOR   = NULL;
    #define CREATE_stream_ITEM_TERMINATOR  if (stream_ITEM_TERMINATOR == NULL) {stream_ITEM_TERMINATOR = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token ITEM_TERMINATOR"); } 
    stream_field_name   = NULL;
    #define CREATE_stream_field_name  if (stream_field_name == NULL) {stream_field_name = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule field_name"); }
    stream_field_type   = NULL;
    #define CREATE_stream_field_type  if (stream_field_type == NULL) {stream_field_type = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule field_type"); }
    stream_field_offset   = NULL;
    #define CREATE_stream_field_offset  if (stream_field_offset == NULL) {stream_field_offset = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule field_offset"); }
    stream_default_value   = NULL;
    #define CREATE_stream_default_value  if (stream_default_value == NULL) {stream_default_value = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule default_value"); }
    stream_multiplicitive_type   = NULL;
    #define CREATE_stream_multiplicitive_type  if (stream_multiplicitive_type == NULL) {stream_multiplicitive_type = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule multiplicitive_type"); }

    retval.tree  = NULL;
    {
        {
            //  PBJ.g:263:5: ( ( ( ( PBJOPTIONAL multiplicitive_type field_name EQUALS field_offset ( default_value )? ITEM_TERMINATOR ) | ( ( REQUIRED | REPEATED ) multiplicitive_type field_name EQUALS field_offset ITEM_TERMINATOR ) ) -> WS[\"\\t\"] REPEATED[\"repeated\"] WS[\" \"] multiplicitive_type WS[\" \"] field_name WS[\" \"] EQUALS WS[\" \"] field_offset WS[\" \"] SQBRACKET_OPEN[\"[\"] IDENTIFIER[\"packed\"] EQUALS[\"=\"] BOOL_LITERAL[\"true\"] SQBRACKET_CLOSE[\"]\"] ITEM_TERMINATOR WS[\"\\n\"] ) | ( ( ( PBJOPTIONAL field_type field_name EQUALS field_offset ( default_value )? ITEM_TERMINATOR ) -> WS[\"\\t\"] PBJOPTIONAL WS[\" \"] field_type WS[\" \"] field_name WS[\" \"] EQUALS WS[\" \"] field_offset WS[\" \"] default_value ITEM_TERMINATOR WS[\"\\n\"] ) | ( ( ( REQUIRED | REPEATED ) field_type field_name EQUALS field_offset ITEM_TERMINATOR ) -> {$field::isNumericType && $REQUIRED==NULL}? WS[\"\\t\"] REPEATED WS[\" \"] field_type WS[\" \"] field_name WS[\" \"] EQUALS WS[\" \"] field_offset WS[\" \"] SQBRACKET_OPEN[\"[\"] IDENTIFIER[\"packed\"] EQUALS[\"=\"] BOOL_LITERAL[\"true\"] SQBRACKET_CLOSE[\"]\"] ITEM_TERMINATOR WS[\"\\n\"] -> WS[\"\\t\"] REQUIRED REPEATED WS[\" \"] field_type WS[\" \"] field_name WS[\" \"] EQUALS WS[\" \"] field_offset ITEM_TERMINATOR WS[\"\\n\"] ) ) )
            
            ANTLR3_UINT32 alt18;

            alt18=2;

            switch ( LA(1) ) 
            {
            case PBJOPTIONAL:
            	{
            		switch ( LA(2) ) 
            		{
            		case IDENTIFIER:
            			{

            				{
            				    int LA18_4 = LA(3);
            				    if ( (LA18_4 == EQUALS) ) 
            				    {
            				        alt18=1;
            				    }
            				    else if ( (LA18_4 == IDENTIFIER) ) 
            				    {
            				        alt18=2;
            				    }
            				    else 
            				    {
            				    
            				        CONSTRUCTEX();
            				        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            				        EXCEPTION->message      = (void *)"";
            				        EXCEPTION->decisionNum  = 18;
            				        EXCEPTION->state        = 4;


            				        goto rulefieldEx;
            				    }
            				}
            			}
            		    break;
            		case NORMAL:
            		case VECTOR2F:
            		case VECTOR2D:
            		case VECTOR3F:
            		case VECTOR3D:
            		case VECTOR4F:
            		case VECTOR4D:
            		case QUATERNION:
            		case BOUNDINGSPHERE3F:
            		case BOUNDINGSPHERE3D:
            		case BOUNDINGBOX3F3F:
            		case BOUNDINGBOX3D3F:
            			{
            				alt18=1;
            			}
            		    break;
            		case UINT32:
            		case INT32:
            		case SINT32:
            		case FIXED32:
            		case SFIXED32:
            		case UINT64:
            		case INT64:
            		case SINT64:
            		case FIXED64:
            		case SFIXED64:
            		case FLOAT:
            		case DOUBLE:
            		case BOOL:
            		case STRING:
            		case BYTES:
            		case UINT8:
            		case INT8:
            		case SINT8:
            		case FIXED8:
            		case SFIXED8:
            		case INT16:
            		case SINT16:
            		case FIXED16:
            		case SFIXED16:
            		case UINT16:
            		case ANGLE:
            		case TIME:
            		case DURATION:
            		case UUID:
            		case SHA256:
            			{
            				alt18=2;
            			}
            		    break;

            		default:
            		    CONSTRUCTEX();
            		    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            		    EXCEPTION->message      = (void *)"";
            		    EXCEPTION->decisionNum  = 18;
            		    EXCEPTION->state        = 1;


            		    goto rulefieldEx;
            		}

            	}
                break;
            case REQUIRED:
            	{
            		switch ( LA(2) ) 
            		{
            		case UINT32:
            		case INT32:
            		case SINT32:
            		case FIXED32:
            		case SFIXED32:
            		case UINT64:
            		case INT64:
            		case SINT64:
            		case FIXED64:
            		case SFIXED64:
            		case FLOAT:
            		case DOUBLE:
            		case BOOL:
            		case STRING:
            		case BYTES:
            		case UINT8:
            		case INT8:
            		case SINT8:
            		case FIXED8:
            		case SFIXED8:
            		case INT16:
            		case SINT16:
            		case FIXED16:
            		case SFIXED16:
            		case UINT16:
            		case ANGLE:
            		case TIME:
            		case DURATION:
            		case UUID:
            		case SHA256:
            			{
            				alt18=2;
            			}
            		    break;
            		case IDENTIFIER:
            			{

            				{
            				    int LA18_7 = LA(3);
            				    if ( (LA18_7 == EQUALS) ) 
            				    {
            				        alt18=1;
            				    }
            				    else if ( (LA18_7 == IDENTIFIER) ) 
            				    {
            				        alt18=2;
            				    }
            				    else 
            				    {
            				    
            				        CONSTRUCTEX();
            				        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            				        EXCEPTION->message      = (void *)"";
            				        EXCEPTION->decisionNum  = 18;
            				        EXCEPTION->state        = 7;


            				        goto rulefieldEx;
            				    }
            				}
            			}
            		    break;
            		case NORMAL:
            		case VECTOR2F:
            		case VECTOR2D:
            		case VECTOR3F:
            		case VECTOR3D:
            		case VECTOR4F:
            		case VECTOR4D:
            		case QUATERNION:
            		case BOUNDINGSPHERE3F:
            		case BOUNDINGSPHERE3D:
            		case BOUNDINGBOX3F3F:
            		case BOUNDINGBOX3D3F:
            			{
            				alt18=1;
            			}
            		    break;

            		default:
            		    CONSTRUCTEX();
            		    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            		    EXCEPTION->message      = (void *)"";
            		    EXCEPTION->decisionNum  = 18;
            		    EXCEPTION->state        = 2;


            		    goto rulefieldEx;
            		}

            	}
                break;
            case REPEATED:
            	{
            		switch ( LA(2) ) 
            		{
            		case UINT32:
            		case INT32:
            		case SINT32:
            		case FIXED32:
            		case SFIXED32:
            		case UINT64:
            		case INT64:
            		case SINT64:
            		case FIXED64:
            		case SFIXED64:
            		case FLOAT:
            		case DOUBLE:
            		case BOOL:
            		case STRING:
            		case BYTES:
            		case UINT8:
            		case INT8:
            		case SINT8:
            		case FIXED8:
            		case SFIXED8:
            		case INT16:
            		case SINT16:
            		case FIXED16:
            		case SFIXED16:
            		case UINT16:
            		case ANGLE:
            		case TIME:
            		case DURATION:
            		case UUID:
            		case SHA256:
            			{
            				alt18=2;
            			}
            		    break;
            		case IDENTIFIER:
            			{

            				{
            				    int LA18_7 = LA(3);
            				    if ( (LA18_7 == EQUALS) ) 
            				    {
            				        alt18=1;
            				    }
            				    else if ( (LA18_7 == IDENTIFIER) ) 
            				    {
            				        alt18=2;
            				    }
            				    else 
            				    {
            				    
            				        CONSTRUCTEX();
            				        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            				        EXCEPTION->message      = (void *)"";
            				        EXCEPTION->decisionNum  = 18;
            				        EXCEPTION->state        = 7;


            				        goto rulefieldEx;
            				    }
            				}
            			}
            		    break;
            		case NORMAL:
            		case VECTOR2F:
            		case VECTOR2D:
            		case VECTOR3F:
            		case VECTOR3D:
            		case VECTOR4F:
            		case VECTOR4D:
            		case QUATERNION:
            		case BOUNDINGSPHERE3F:
            		case BOUNDINGSPHERE3D:
            		case BOUNDINGBOX3F3F:
            		case BOUNDINGBOX3D3F:
            			{
            				alt18=1;
            			}
            		    break;

            		default:
            		    CONSTRUCTEX();
            		    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            		    EXCEPTION->message      = (void *)"";
            		    EXCEPTION->decisionNum  = 18;
            		    EXCEPTION->state        = 3;


            		    goto rulefieldEx;
            		}

            	}
                break;

            default:
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 18;
                EXCEPTION->state        = 0;


                goto rulefieldEx;
            }

            switch (alt18) 
            {
        	case 1:
        	    // PBJ.g:263:8: ( ( ( PBJOPTIONAL multiplicitive_type field_name EQUALS field_offset ( default_value )? ITEM_TERMINATOR ) | ( ( REQUIRED | REPEATED ) multiplicitive_type field_name EQUALS field_offset ITEM_TERMINATOR ) ) -> WS[\"\\t\"] REPEATED[\"repeated\"] WS[\" \"] multiplicitive_type WS[\" \"] field_name WS[\" \"] EQUALS WS[\" \"] field_offset WS[\" \"] SQBRACKET_OPEN[\"[\"] IDENTIFIER[\"packed\"] EQUALS[\"=\"] BOOL_LITERAL[\"true\"] SQBRACKET_CLOSE[\"]\"] ITEM_TERMINATOR WS[\"\\n\"] )
        	    {
        	        // PBJ.g:263:8: ( ( ( PBJOPTIONAL multiplicitive_type field_name EQUALS field_offset ( default_value )? ITEM_TERMINATOR ) | ( ( REQUIRED | REPEATED ) multiplicitive_type field_name EQUALS field_offset ITEM_TERMINATOR ) ) -> WS[\"\\t\"] REPEATED[\"repeated\"] WS[\" \"] multiplicitive_type WS[\" \"] field_name WS[\" \"] EQUALS WS[\" \"] field_offset WS[\" \"] SQBRACKET_OPEN[\"[\"] IDENTIFIER[\"packed\"] EQUALS[\"=\"] BOOL_LITERAL[\"true\"] SQBRACKET_CLOSE[\"]\"] ITEM_TERMINATOR WS[\"\\n\"] )
        	        // PBJ.g:263:10: ( ( PBJOPTIONAL multiplicitive_type field_name EQUALS field_offset ( default_value )? ITEM_TERMINATOR ) | ( ( REQUIRED | REPEATED ) multiplicitive_type field_name EQUALS field_offset ITEM_TERMINATOR ) )
        	        {

        	            // PBJ.g:263:10: ( ( PBJOPTIONAL multiplicitive_type field_name EQUALS field_offset ( default_value )? ITEM_TERMINATOR ) | ( ( REQUIRED | REPEATED ) multiplicitive_type field_name EQUALS field_offset ITEM_TERMINATOR ) )
        	            {
        	                int alt14=2;

        	                {
        	                    int LA14_0 = LA(1);
        	                    if ( (LA14_0 == PBJOPTIONAL) ) 
        	                    {
        	                        alt14=1;
        	                    }
        	                    else if ( (((LA14_0 >= REQUIRED) && (LA14_0 <= REPEATED))) ) 
        	                    {
        	                        alt14=2;
        	                    }
        	                    else 
        	                    {
        	                    
        	                        CONSTRUCTEX();
        	                        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
        	                        EXCEPTION->message      = (void *)"";
        	                        EXCEPTION->decisionNum  = 14;
        	                        EXCEPTION->state        = 0;


        	                        goto rulefieldEx;
        	                    }
        	                }
        	                switch (alt14) 
        	                {
        	            	case 1:
        	            	    // PBJ.g:263:12: ( PBJOPTIONAL multiplicitive_type field_name EQUALS field_offset ( default_value )? ITEM_TERMINATOR )
        	            	    {
        	            	        // PBJ.g:263:12: ( PBJOPTIONAL multiplicitive_type field_name EQUALS field_offset ( default_value )? ITEM_TERMINATOR )
        	            	        // PBJ.g:263:13: PBJOPTIONAL multiplicitive_type field_name EQUALS field_offset ( default_value )? ITEM_TERMINATOR
        	            	        {
        	            	            PBJOPTIONAL60 = (pANTLR3_COMMON_TOKEN) MATCHT(PBJOPTIONAL, &FOLLOW_PBJOPTIONAL_in_field1050); 
        	            	            if  (HASEXCEPTION())
        	            	            {
        	            	                goto rulefieldEx;
        	            	            }
        	            	             
        	            	            CREATE_stream_PBJOPTIONAL; stream_PBJOPTIONAL->add(stream_PBJOPTIONAL, PBJOPTIONAL60, NULL);

        	            	            FOLLOWPUSH(FOLLOW_multiplicitive_type_in_field1052);
        	            	            multiplicitive_type61=multiplicitive_type(ctx);

        	            	            FOLLOWPOP();
        	            	            if  (HASEXCEPTION())
        	            	            {
        	            	                goto rulefieldEx;
        	            	            }

        	            	            CREATE_stream_multiplicitive_type; stream_multiplicitive_type->add(stream_multiplicitive_type, multiplicitive_type61.tree, NULL);
        	            	            FOLLOWPUSH(FOLLOW_field_name_in_field1054);
        	            	            field_name62=field_name(ctx);

        	            	            FOLLOWPOP();
        	            	            if  (HASEXCEPTION())
        	            	            {
        	            	                goto rulefieldEx;
        	            	            }

        	            	            CREATE_stream_field_name; stream_field_name->add(stream_field_name, field_name62.tree, NULL);
        	            	            EQUALS63 = (pANTLR3_COMMON_TOKEN) MATCHT(EQUALS, &FOLLOW_EQUALS_in_field1056); 
        	            	            if  (HASEXCEPTION())
        	            	            {
        	            	                goto rulefieldEx;
        	            	            }
        	            	             
        	            	            CREATE_stream_EQUALS; stream_EQUALS->add(stream_EQUALS, EQUALS63, NULL);

        	            	            FOLLOWPUSH(FOLLOW_field_offset_in_field1058);
        	            	            field_offset64=field_offset(ctx);

        	            	            FOLLOWPOP();
        	            	            if  (HASEXCEPTION())
        	            	            {
        	            	                goto rulefieldEx;
        	            	            }

        	            	            CREATE_stream_field_offset; stream_field_offset->add(stream_field_offset, field_offset64.tree, NULL);

        	            	            // PBJ.g:263:76: ( default_value )?
        	            	            {
        	            	                int alt12=2;
        	            	                {
        	            	                    int LA12_0 = LA(1);
        	            	                    if ( (LA12_0 == SQBRACKET_OPEN) ) 
        	            	                    {
        	            	                        alt12=1;
        	            	                    }
        	            	                }
        	            	                switch (alt12) 
        	            	                {
        	            	            	case 1:
        	            	            	    // PBJ.g:263:76: default_value
        	            	            	    {
        	            	            	        FOLLOWPUSH(FOLLOW_default_value_in_field1060);
        	            	            	        default_value65=default_value(ctx);

        	            	            	        FOLLOWPOP();
        	            	            	        if  (HASEXCEPTION())
        	            	            	        {
        	            	            	            goto rulefieldEx;
        	            	            	        }

        	            	            	        CREATE_stream_default_value; stream_default_value->add(stream_default_value, default_value65.tree, NULL);

        	            	            	    }
        	            	            	    break;

        	            	                }
        	            	            }
        	            	            ITEM_TERMINATOR66 = (pANTLR3_COMMON_TOKEN) MATCHT(ITEM_TERMINATOR, &FOLLOW_ITEM_TERMINATOR_in_field1063); 
        	            	            if  (HASEXCEPTION())
        	            	            {
        	            	                goto rulefieldEx;
        	            	            }
        	            	             
        	            	            CREATE_stream_ITEM_TERMINATOR; stream_ITEM_TERMINATOR->add(stream_ITEM_TERMINATOR, ITEM_TERMINATOR66, NULL);


        	            	        }


        	            	    }
        	            	    break;
        	            	case 2:
        	            	    // PBJ.g:263:111: ( ( REQUIRED | REPEATED ) multiplicitive_type field_name EQUALS field_offset ITEM_TERMINATOR )
        	            	    {
        	            	        // PBJ.g:263:111: ( ( REQUIRED | REPEATED ) multiplicitive_type field_name EQUALS field_offset ITEM_TERMINATOR )
        	            	        // PBJ.g:263:113: ( REQUIRED | REPEATED ) multiplicitive_type field_name EQUALS field_offset ITEM_TERMINATOR
        	            	        {

        	            	            // PBJ.g:263:113: ( REQUIRED | REPEATED )
        	            	            {
        	            	                int alt13=2;

        	            	                {
        	            	                    int LA13_0 = LA(1);
        	            	                    if ( (LA13_0 == REQUIRED) ) 
        	            	                    {
        	            	                        alt13=1;
        	            	                    }
        	            	                    else if ( (LA13_0 == REPEATED) ) 
        	            	                    {
        	            	                        alt13=2;
        	            	                    }
        	            	                    else 
        	            	                    {
        	            	                    
        	            	                        CONSTRUCTEX();
        	            	                        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
        	            	                        EXCEPTION->message      = (void *)"";
        	            	                        EXCEPTION->decisionNum  = 13;
        	            	                        EXCEPTION->state        = 0;


        	            	                        goto rulefieldEx;
        	            	                    }
        	            	                }
        	            	                switch (alt13) 
        	            	                {
        	            	            	case 1:
        	            	            	    // PBJ.g:263:114: REQUIRED
        	            	            	    {
        	            	            	        REQUIRED67 = (pANTLR3_COMMON_TOKEN) MATCHT(REQUIRED, &FOLLOW_REQUIRED_in_field1072); 
        	            	            	        if  (HASEXCEPTION())
        	            	            	        {
        	            	            	            goto rulefieldEx;
        	            	            	        }
        	            	            	         
        	            	            	        CREATE_stream_REQUIRED; stream_REQUIRED->add(stream_REQUIRED, REQUIRED67, NULL);


        	            	            	    }
        	            	            	    break;
        	            	            	case 2:
        	            	            	    // PBJ.g:263:123: REPEATED
        	            	            	    {
        	            	            	        REPEATED68 = (pANTLR3_COMMON_TOKEN) MATCHT(REPEATED, &FOLLOW_REPEATED_in_field1074); 
        	            	            	        if  (HASEXCEPTION())
        	            	            	        {
        	            	            	            goto rulefieldEx;
        	            	            	        }
        	            	            	         
        	            	            	        CREATE_stream_REPEATED; stream_REPEATED->add(stream_REPEATED, REPEATED68, NULL);


        	            	            	    }
        	            	            	    break;

        	            	                }
        	            	            }
        	            	            FOLLOWPUSH(FOLLOW_multiplicitive_type_in_field1077);
        	            	            multiplicitive_type69=multiplicitive_type(ctx);

        	            	            FOLLOWPOP();
        	            	            if  (HASEXCEPTION())
        	            	            {
        	            	                goto rulefieldEx;
        	            	            }

        	            	            CREATE_stream_multiplicitive_type; stream_multiplicitive_type->add(stream_multiplicitive_type, multiplicitive_type69.tree, NULL);
        	            	            FOLLOWPUSH(FOLLOW_field_name_in_field1079);
        	            	            field_name70=field_name(ctx);

        	            	            FOLLOWPOP();
        	            	            if  (HASEXCEPTION())
        	            	            {
        	            	                goto rulefieldEx;
        	            	            }

        	            	            CREATE_stream_field_name; stream_field_name->add(stream_field_name, field_name70.tree, NULL);
        	            	            EQUALS71 = (pANTLR3_COMMON_TOKEN) MATCHT(EQUALS, &FOLLOW_EQUALS_in_field1081); 
        	            	            if  (HASEXCEPTION())
        	            	            {
        	            	                goto rulefieldEx;
        	            	            }
        	            	             
        	            	            CREATE_stream_EQUALS; stream_EQUALS->add(stream_EQUALS, EQUALS71, NULL);

        	            	            FOLLOWPUSH(FOLLOW_field_offset_in_field1083);
        	            	            field_offset72=field_offset(ctx);

        	            	            FOLLOWPOP();
        	            	            if  (HASEXCEPTION())
        	            	            {
        	            	                goto rulefieldEx;
        	            	            }

        	            	            CREATE_stream_field_offset; stream_field_offset->add(stream_field_offset, field_offset72.tree, NULL);
        	            	            ITEM_TERMINATOR73 = (pANTLR3_COMMON_TOKEN) MATCHT(ITEM_TERMINATOR, &FOLLOW_ITEM_TERMINATOR_in_field1085); 
        	            	            if  (HASEXCEPTION())
        	            	            {
        	            	                goto rulefieldEx;
        	            	            }
        	            	             
        	            	            CREATE_stream_ITEM_TERMINATOR; stream_ITEM_TERMINATOR->add(stream_ITEM_TERMINATOR, ITEM_TERMINATOR73, NULL);


        	            	        }


        	            	    }
        	            	    break;

        	                }
        	            }

        	             
        	            /* AST REWRITE
        	             * elements          : field_offset, REPEATED, EQUALS, field_name, ITEM_TERMINATOR, multiplicitive_type, EQUALS
        	             * token labels      : 
        	             * rule labels       : retval
        	             * token list labels : 
        	             * rule list labels  : 
        	             */
        	            {
        	            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	            	retval.tree    = root_0;
        	            	// 263:204: -> WS[\"\\t\"] REPEATED[\"repeated\"] WS[\" \"] multiplicitive_type WS[\" \"] field_name WS[\" \"] EQUALS WS[\" \"] field_offset WS[\" \"] SQBRACKET_OPEN[\"[\"] IDENTIFIER[\"packed\"] EQUALS[\"=\"] BOOL_LITERAL[\"true\"] SQBRACKET_CLOSE[\"]\"] ITEM_TERMINATOR WS[\"\\n\"]
        	            	{
        	            	    ADAPTOR->addChild(ADAPTOR, root_0, 
        	            	    #if 1 == 2
        	            	    	(pANTLR3_BASE_TREE)ADAPTOR->createTypeTokenText(ADAPTOR, WS, TOKTEXT("\t"))
        	            	    #else
        	            	    	(pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, WS, (pANTLR3_UINT8)"\t")
        	            	    #endif
        	            	    );
        	            	    ADAPTOR->addChild(ADAPTOR, root_0, 
        	            	    #if 1 == 2
        	            	    	(pANTLR3_BASE_TREE)ADAPTOR->createTypeTokenText(ADAPTOR, REPEATED, TOKTEXT("repeated"))
        	            	    #else
        	            	    	(pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, REPEATED, (pANTLR3_UINT8)"repeated")
        	            	    #endif
        	            	    );
        	            	    ADAPTOR->addChild(ADAPTOR, root_0, 
        	            	    #if 1 == 2
        	            	    	(pANTLR3_BASE_TREE)ADAPTOR->createTypeTokenText(ADAPTOR, WS, TOKTEXT(" "))
        	            	    #else
        	            	    	(pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, WS, (pANTLR3_UINT8)" ")
        	            	    #endif
        	            	    );
        	            	    ADAPTOR->addChild(ADAPTOR, root_0, stream_multiplicitive_type == NULL ? NULL : stream_multiplicitive_type->nextTree(stream_multiplicitive_type));
        	            	    ADAPTOR->addChild(ADAPTOR, root_0, 
        	            	    #if 1 == 2
        	            	    	(pANTLR3_BASE_TREE)ADAPTOR->createTypeTokenText(ADAPTOR, WS, TOKTEXT(" "))
        	            	    #else
        	            	    	(pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, WS, (pANTLR3_UINT8)" ")
        	            	    #endif
        	            	    );
        	            	    ADAPTOR->addChild(ADAPTOR, root_0, stream_field_name == NULL ? NULL : stream_field_name->nextTree(stream_field_name));
        	            	    ADAPTOR->addChild(ADAPTOR, root_0, 
        	            	    #if 1 == 2
        	            	    	(pANTLR3_BASE_TREE)ADAPTOR->createTypeTokenText(ADAPTOR, WS, TOKTEXT(" "))
        	            	    #else
        	            	    	(pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, WS, (pANTLR3_UINT8)" ")
        	            	    #endif
        	            	    );
        	            	    ADAPTOR->addChild(ADAPTOR, root_0, stream_EQUALS == NULL ? NULL : stream_EQUALS->nextNode(stream_EQUALS));
        	            	    ADAPTOR->addChild(ADAPTOR, root_0, 
        	            	    #if 1 == 2
        	            	    	(pANTLR3_BASE_TREE)ADAPTOR->createTypeTokenText(ADAPTOR, WS, TOKTEXT(" "))
        	            	    #else
        	            	    	(pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, WS, (pANTLR3_UINT8)" ")
        	            	    #endif
        	            	    );
        	            	    ADAPTOR->addChild(ADAPTOR, root_0, stream_field_offset == NULL ? NULL : stream_field_offset->nextTree(stream_field_offset));
        	            	    ADAPTOR->addChild(ADAPTOR, root_0, 
        	            	    #if 1 == 2
        	            	    	(pANTLR3_BASE_TREE)ADAPTOR->createTypeTokenText(ADAPTOR, WS, TOKTEXT(" "))
        	            	    #else
        	            	    	(pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, WS, (pANTLR3_UINT8)" ")
        	            	    #endif
        	            	    );
        	            	    ADAPTOR->addChild(ADAPTOR, root_0, 
        	            	    #if 1 == 2
        	            	    	(pANTLR3_BASE_TREE)ADAPTOR->createTypeTokenText(ADAPTOR, SQBRACKET_OPEN, TOKTEXT("["))
        	            	    #else
        	            	    	(pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, SQBRACKET_OPEN, (pANTLR3_UINT8)"[")
        	            	    #endif
        	            	    );
        	            	    ADAPTOR->addChild(ADAPTOR, root_0, 
        	            	    #if 1 == 2
        	            	    	(pANTLR3_BASE_TREE)ADAPTOR->createTypeTokenText(ADAPTOR, IDENTIFIER, TOKTEXT("packed"))
        	            	    #else
        	            	    	(pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, IDENTIFIER, (pANTLR3_UINT8)"packed")
        	            	    #endif
        	            	    );
        	            	    ADAPTOR->addChild(ADAPTOR, root_0, 
        	            	    #if 1 == 2
        	            	    	(pANTLR3_BASE_TREE)ADAPTOR->createTypeTokenText(ADAPTOR, EQUALS, TOKTEXT("="))
        	            	    #else
        	            	    	(pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, EQUALS, (pANTLR3_UINT8)"=")
        	            	    #endif
        	            	    );
        	            	    ADAPTOR->addChild(ADAPTOR, root_0, 
        	            	    #if 1 == 2
        	            	    	(pANTLR3_BASE_TREE)ADAPTOR->createTypeTokenText(ADAPTOR, BOOL_LITERAL, TOKTEXT("true"))
        	            	    #else
        	            	    	(pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, BOOL_LITERAL, (pANTLR3_UINT8)"true")
        	            	    #endif
        	            	    );
        	            	    ADAPTOR->addChild(ADAPTOR, root_0, 
        	            	    #if 1 == 2
        	            	    	(pANTLR3_BASE_TREE)ADAPTOR->createTypeTokenText(ADAPTOR, SQBRACKET_CLOSE, TOKTEXT("]"))
        	            	    #else
        	            	    	(pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, SQBRACKET_CLOSE, (pANTLR3_UINT8)"]")
        	            	    #endif
        	            	    );
        	            	    ADAPTOR->addChild(ADAPTOR, root_0, stream_ITEM_TERMINATOR == NULL ? NULL : stream_ITEM_TERMINATOR->nextNode(stream_ITEM_TERMINATOR));
        	            	    ADAPTOR->addChild(ADAPTOR, root_0, 
        	            	    #if 1 == 2
        	            	    	(pANTLR3_BASE_TREE)ADAPTOR->createTypeTokenText(ADAPTOR, WS, TOKTEXT("\n"))
        	            	    #else
        	            	    	(pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, WS, (pANTLR3_UINT8)"\n")
        	            	    #endif
        	            	    );

        	            	}

        	            	retval.tree = root_0; // set result root
        	            	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	            }
        	        }

        	        {

        	                    defineField(ctx, 	(SCOPE_TOP(field))->fieldType,	(SCOPE_TOP(field))->fieldName,	(SCOPE_TOP(field))->defaultValue,	(SCOPE_TOP(field))->fieldOffset,REPEATED68==NULL,REQUIRED67!=NULL,1);
        	                    stringFree(	(SCOPE_TOP(field))->fieldName);
        	                    stringFree(	(SCOPE_TOP(field))->fieldType);
        	                    stringFree(	(SCOPE_TOP(field))->defaultValue);
        	                
        	        }

        	    }
        	    break;
        	case 2:
        	    // PBJ.g:271:6: ( ( ( PBJOPTIONAL field_type field_name EQUALS field_offset ( default_value )? ITEM_TERMINATOR ) -> WS[\"\\t\"] PBJOPTIONAL WS[\" \"] field_type WS[\" \"] field_name WS[\" \"] EQUALS WS[\" \"] field_offset WS[\" \"] default_value ITEM_TERMINATOR WS[\"\\n\"] ) | ( ( ( REQUIRED | REPEATED ) field_type field_name EQUALS field_offset ITEM_TERMINATOR ) -> {$field::isNumericType && $REQUIRED==NULL}? WS[\"\\t\"] REPEATED WS[\" \"] field_type WS[\" \"] field_name WS[\" \"] EQUALS WS[\" \"] field_offset WS[\" \"] SQBRACKET_OPEN[\"[\"] IDENTIFIER[\"packed\"] EQUALS[\"=\"] BOOL_LITERAL[\"true\"] SQBRACKET_CLOSE[\"]\"] ITEM_TERMINATOR WS[\"\\n\"] -> WS[\"\\t\"] REQUIRED REPEATED WS[\" \"] field_type WS[\" \"] field_name WS[\" \"] EQUALS WS[\" \"] field_offset ITEM_TERMINATOR WS[\"\\n\"] ) )
        	    {

        	        // PBJ.g:271:6: ( ( ( PBJOPTIONAL field_type field_name EQUALS field_offset ( default_value )? ITEM_TERMINATOR ) -> WS[\"\\t\"] PBJOPTIONAL WS[\" \"] field_type WS[\" \"] field_name WS[\" \"] EQUALS WS[\" \"] field_offset WS[\" \"] default_value ITEM_TERMINATOR WS[\"\\n\"] ) | ( ( ( REQUIRED | REPEATED ) field_type field_name EQUALS field_offset ITEM_TERMINATOR ) -> {$field::isNumericType && $REQUIRED==NULL}? WS[\"\\t\"] REPEATED WS[\" \"] field_type WS[\" \"] field_name WS[\" \"] EQUALS WS[\" \"] field_offset WS[\" \"] SQBRACKET_OPEN[\"[\"] IDENTIFIER[\"packed\"] EQUALS[\"=\"] BOOL_LITERAL[\"true\"] SQBRACKET_CLOSE[\"]\"] ITEM_TERMINATOR WS[\"\\n\"] -> WS[\"\\t\"] REQUIRED REPEATED WS[\" \"] field_type WS[\" \"] field_name WS[\" \"] EQUALS WS[\" \"] field_offset ITEM_TERMINATOR WS[\"\\n\"] ) )
        	        {
        	            int alt17=2;

        	            {
        	                int LA17_0 = LA(1);
        	                if ( (LA17_0 == PBJOPTIONAL) ) 
        	                {
        	                    alt17=1;
        	                }
        	                else if ( (((LA17_0 >= REQUIRED) && (LA17_0 <= REPEATED))) ) 
        	                {
        	                    alt17=2;
        	                }
        	                else 
        	                {
        	                
        	                    CONSTRUCTEX();
        	                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
        	                    EXCEPTION->message      = (void *)"";
        	                    EXCEPTION->decisionNum  = 17;
        	                    EXCEPTION->state        = 0;


        	                    goto rulefieldEx;
        	                }
        	            }
        	            switch (alt17) 
        	            {
        	        	case 1:
        	        	    // PBJ.g:271:7: ( ( PBJOPTIONAL field_type field_name EQUALS field_offset ( default_value )? ITEM_TERMINATOR ) -> WS[\"\\t\"] PBJOPTIONAL WS[\" \"] field_type WS[\" \"] field_name WS[\" \"] EQUALS WS[\" \"] field_offset WS[\" \"] default_value ITEM_TERMINATOR WS[\"\\n\"] )
        	        	    {
        	        	        // PBJ.g:271:7: ( ( PBJOPTIONAL field_type field_name EQUALS field_offset ( default_value )? ITEM_TERMINATOR ) -> WS[\"\\t\"] PBJOPTIONAL WS[\" \"] field_type WS[\" \"] field_name WS[\" \"] EQUALS WS[\" \"] field_offset WS[\" \"] default_value ITEM_TERMINATOR WS[\"\\n\"] )
        	        	        // PBJ.g:271:9: ( PBJOPTIONAL field_type field_name EQUALS field_offset ( default_value )? ITEM_TERMINATOR )
        	        	        {
        	        	            // PBJ.g:271:9: ( PBJOPTIONAL field_type field_name EQUALS field_offset ( default_value )? ITEM_TERMINATOR )
        	        	            // PBJ.g:271:10: PBJOPTIONAL field_type field_name EQUALS field_offset ( default_value )? ITEM_TERMINATOR
        	        	            {
        	        	                PBJOPTIONAL74 = (pANTLR3_COMMON_TOKEN) MATCHT(PBJOPTIONAL, &FOLLOW_PBJOPTIONAL_in_field1166); 
        	        	                if  (HASEXCEPTION())
        	        	                {
        	        	                    goto rulefieldEx;
        	        	                }
        	        	                 
        	        	                CREATE_stream_PBJOPTIONAL; stream_PBJOPTIONAL->add(stream_PBJOPTIONAL, PBJOPTIONAL74, NULL);

        	        	                FOLLOWPUSH(FOLLOW_field_type_in_field1168);
        	        	                field_type75=field_type(ctx);

        	        	                FOLLOWPOP();
        	        	                if  (HASEXCEPTION())
        	        	                {
        	        	                    goto rulefieldEx;
        	        	                }

        	        	                CREATE_stream_field_type; stream_field_type->add(stream_field_type, field_type75.tree, NULL);
        	        	                FOLLOWPUSH(FOLLOW_field_name_in_field1170);
        	        	                field_name76=field_name(ctx);

        	        	                FOLLOWPOP();
        	        	                if  (HASEXCEPTION())
        	        	                {
        	        	                    goto rulefieldEx;
        	        	                }

        	        	                CREATE_stream_field_name; stream_field_name->add(stream_field_name, field_name76.tree, NULL);
        	        	                EQUALS77 = (pANTLR3_COMMON_TOKEN) MATCHT(EQUALS, &FOLLOW_EQUALS_in_field1172); 
        	        	                if  (HASEXCEPTION())
        	        	                {
        	        	                    goto rulefieldEx;
        	        	                }
        	        	                 
        	        	                CREATE_stream_EQUALS; stream_EQUALS->add(stream_EQUALS, EQUALS77, NULL);

        	        	                FOLLOWPUSH(FOLLOW_field_offset_in_field1174);
        	        	                field_offset78=field_offset(ctx);

        	        	                FOLLOWPOP();
        	        	                if  (HASEXCEPTION())
        	        	                {
        	        	                    goto rulefieldEx;
        	        	                }

        	        	                CREATE_stream_field_offset; stream_field_offset->add(stream_field_offset, field_offset78.tree, NULL);

        	        	                // PBJ.g:271:64: ( default_value )?
        	        	                {
        	        	                    int alt15=2;
        	        	                    {
        	        	                        int LA15_0 = LA(1);
        	        	                        if ( (LA15_0 == SQBRACKET_OPEN) ) 
        	        	                        {
        	        	                            alt15=1;
        	        	                        }
        	        	                    }
        	        	                    switch (alt15) 
        	        	                    {
        	        	                	case 1:
        	        	                	    // PBJ.g:271:64: default_value
        	        	                	    {
        	        	                	        FOLLOWPUSH(FOLLOW_default_value_in_field1176);
        	        	                	        default_value79=default_value(ctx);

        	        	                	        FOLLOWPOP();
        	        	                	        if  (HASEXCEPTION())
        	        	                	        {
        	        	                	            goto rulefieldEx;
        	        	                	        }

        	        	                	        CREATE_stream_default_value; stream_default_value->add(stream_default_value, default_value79.tree, NULL);

        	        	                	    }
        	        	                	    break;

        	        	                    }
        	        	                }
        	        	                ITEM_TERMINATOR80 = (pANTLR3_COMMON_TOKEN) MATCHT(ITEM_TERMINATOR, &FOLLOW_ITEM_TERMINATOR_in_field1179); 
        	        	                if  (HASEXCEPTION())
        	        	                {
        	        	                    goto rulefieldEx;
        	        	                }
        	        	                 
        	        	                CREATE_stream_ITEM_TERMINATOR; stream_ITEM_TERMINATOR->add(stream_ITEM_TERMINATOR, ITEM_TERMINATOR80, NULL);


        	        	            }


        	        	             
        	        	            /* AST REWRITE
        	        	             * elements          : ITEM_TERMINATOR, PBJOPTIONAL, field_offset, field_name, field_type, default_value, EQUALS
        	        	             * token labels      : 
        	        	             * rule labels       : retval
        	        	             * token list labels : 
        	        	             * rule list labels  : 
        	        	             */
        	        	            {
        	        	            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	            	retval.tree    = root_0;
        	        	            	// 271:98: -> WS[\"\\t\"] PBJOPTIONAL WS[\" \"] field_type WS[\" \"] field_name WS[\" \"] EQUALS WS[\" \"] field_offset WS[\" \"] default_value ITEM_TERMINATOR WS[\"\\n\"]
        	        	            	{
        	        	            	    ADAPTOR->addChild(ADAPTOR, root_0, 
        	        	            	    #if 1 == 2
        	        	            	    	(pANTLR3_BASE_TREE)ADAPTOR->createTypeTokenText(ADAPTOR, WS, TOKTEXT("\t"))
        	        	            	    #else
        	        	            	    	(pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, WS, (pANTLR3_UINT8)"\t")
        	        	            	    #endif
        	        	            	    );
        	        	            	    ADAPTOR->addChild(ADAPTOR, root_0, stream_PBJOPTIONAL == NULL ? NULL : stream_PBJOPTIONAL->nextNode(stream_PBJOPTIONAL));
        	        	            	    ADAPTOR->addChild(ADAPTOR, root_0, 
        	        	            	    #if 1 == 2
        	        	            	    	(pANTLR3_BASE_TREE)ADAPTOR->createTypeTokenText(ADAPTOR, WS, TOKTEXT(" "))
        	        	            	    #else
        	        	            	    	(pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, WS, (pANTLR3_UINT8)" ")
        	        	            	    #endif
        	        	            	    );
        	        	            	    ADAPTOR->addChild(ADAPTOR, root_0, stream_field_type == NULL ? NULL : stream_field_type->nextTree(stream_field_type));
        	        	            	    ADAPTOR->addChild(ADAPTOR, root_0, 
        	        	            	    #if 1 == 2
        	        	            	    	(pANTLR3_BASE_TREE)ADAPTOR->createTypeTokenText(ADAPTOR, WS, TOKTEXT(" "))
        	        	            	    #else
        	        	            	    	(pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, WS, (pANTLR3_UINT8)" ")
        	        	            	    #endif
        	        	            	    );
        	        	            	    ADAPTOR->addChild(ADAPTOR, root_0, stream_field_name == NULL ? NULL : stream_field_name->nextTree(stream_field_name));
        	        	            	    ADAPTOR->addChild(ADAPTOR, root_0, 
        	        	            	    #if 1 == 2
        	        	            	    	(pANTLR3_BASE_TREE)ADAPTOR->createTypeTokenText(ADAPTOR, WS, TOKTEXT(" "))
        	        	            	    #else
        	        	            	    	(pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, WS, (pANTLR3_UINT8)" ")
        	        	            	    #endif
        	        	            	    );
        	        	            	    ADAPTOR->addChild(ADAPTOR, root_0, stream_EQUALS == NULL ? NULL : stream_EQUALS->nextNode(stream_EQUALS));
        	        	            	    ADAPTOR->addChild(ADAPTOR, root_0, 
        	        	            	    #if 1 == 2
        	        	            	    	(pANTLR3_BASE_TREE)ADAPTOR->createTypeTokenText(ADAPTOR, WS, TOKTEXT(" "))
        	        	            	    #else
        	        	            	    	(pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, WS, (pANTLR3_UINT8)" ")
        	        	            	    #endif
        	        	            	    );
        	        	            	    ADAPTOR->addChild(ADAPTOR, root_0, stream_field_offset == NULL ? NULL : stream_field_offset->nextTree(stream_field_offset));
        	        	            	    ADAPTOR->addChild(ADAPTOR, root_0, 
        	        	            	    #if 1 == 2
        	        	            	    	(pANTLR3_BASE_TREE)ADAPTOR->createTypeTokenText(ADAPTOR, WS, TOKTEXT(" "))
        	        	            	    #else
        	        	            	    	(pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, WS, (pANTLR3_UINT8)" ")
        	        	            	    #endif
        	        	            	    );
        	        	            	    ADAPTOR->addChild(ADAPTOR, root_0, stream_default_value == NULL ? NULL : stream_default_value->nextTree(stream_default_value));
        	        	            	    ADAPTOR->addChild(ADAPTOR, root_0, stream_ITEM_TERMINATOR == NULL ? NULL : stream_ITEM_TERMINATOR->nextNode(stream_ITEM_TERMINATOR));
        	        	            	    ADAPTOR->addChild(ADAPTOR, root_0, 
        	        	            	    #if 1 == 2
        	        	            	    	(pANTLR3_BASE_TREE)ADAPTOR->createTypeTokenText(ADAPTOR, WS, TOKTEXT("\n"))
        	        	            	    #else
        	        	            	    	(pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, WS, (pANTLR3_UINT8)"\n")
        	        	            	    #endif
        	        	            	    );

        	        	            	}

        	        	            	retval.tree = root_0; // set result root
        	        	            	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        	            }
        	        	        }


        	        	    }
        	        	    break;
        	        	case 2:
        	        	    // PBJ.g:273:7: ( ( ( REQUIRED | REPEATED ) field_type field_name EQUALS field_offset ITEM_TERMINATOR ) -> {$field::isNumericType && $REQUIRED==NULL}? WS[\"\\t\"] REPEATED WS[\" \"] field_type WS[\" \"] field_name WS[\" \"] EQUALS WS[\" \"] field_offset WS[\" \"] SQBRACKET_OPEN[\"[\"] IDENTIFIER[\"packed\"] EQUALS[\"=\"] BOOL_LITERAL[\"true\"] SQBRACKET_CLOSE[\"]\"] ITEM_TERMINATOR WS[\"\\n\"] -> WS[\"\\t\"] REQUIRED REPEATED WS[\" \"] field_type WS[\" \"] field_name WS[\" \"] EQUALS WS[\" \"] field_offset ITEM_TERMINATOR WS[\"\\n\"] )
        	        	    {
        	        	        // PBJ.g:273:7: ( ( ( REQUIRED | REPEATED ) field_type field_name EQUALS field_offset ITEM_TERMINATOR ) -> {$field::isNumericType && $REQUIRED==NULL}? WS[\"\\t\"] REPEATED WS[\" \"] field_type WS[\" \"] field_name WS[\" \"] EQUALS WS[\" \"] field_offset WS[\" \"] SQBRACKET_OPEN[\"[\"] IDENTIFIER[\"packed\"] EQUALS[\"=\"] BOOL_LITERAL[\"true\"] SQBRACKET_CLOSE[\"]\"] ITEM_TERMINATOR WS[\"\\n\"] -> WS[\"\\t\"] REQUIRED REPEATED WS[\" \"] field_type WS[\" \"] field_name WS[\" \"] EQUALS WS[\" \"] field_offset ITEM_TERMINATOR WS[\"\\n\"] )
        	        	        // PBJ.g:273:9: ( ( REQUIRED | REPEATED ) field_type field_name EQUALS field_offset ITEM_TERMINATOR )
        	        	        {
        	        	            // PBJ.g:273:9: ( ( REQUIRED | REPEATED ) field_type field_name EQUALS field_offset ITEM_TERMINATOR )
        	        	            // PBJ.g:273:11: ( REQUIRED | REPEATED ) field_type field_name EQUALS field_offset ITEM_TERMINATOR
        	        	            {

        	        	                // PBJ.g:273:11: ( REQUIRED | REPEATED )
        	        	                {
        	        	                    int alt16=2;

        	        	                    {
        	        	                        int LA16_0 = LA(1);
        	        	                        if ( (LA16_0 == REQUIRED) ) 
        	        	                        {
        	        	                            alt16=1;
        	        	                        }
        	        	                        else if ( (LA16_0 == REPEATED) ) 
        	        	                        {
        	        	                            alt16=2;
        	        	                        }
        	        	                        else 
        	        	                        {
        	        	                        
        	        	                            CONSTRUCTEX();
        	        	                            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
        	        	                            EXCEPTION->message      = (void *)"";
        	        	                            EXCEPTION->decisionNum  = 16;
        	        	                            EXCEPTION->state        = 0;


        	        	                            goto rulefieldEx;
        	        	                        }
        	        	                    }
        	        	                    switch (alt16) 
        	        	                    {
        	        	                	case 1:
        	        	                	    // PBJ.g:273:12: REQUIRED
        	        	                	    {
        	        	                	        REQUIRED81 = (pANTLR3_COMMON_TOKEN) MATCHT(REQUIRED, &FOLLOW_REQUIRED_in_field1243); 
        	        	                	        if  (HASEXCEPTION())
        	        	                	        {
        	        	                	            goto rulefieldEx;
        	        	                	        }
        	        	                	         
        	        	                	        CREATE_stream_REQUIRED; stream_REQUIRED->add(stream_REQUIRED, REQUIRED81, NULL);


        	        	                	    }
        	        	                	    break;
        	        	                	case 2:
        	        	                	    // PBJ.g:273:21: REPEATED
        	        	                	    {
        	        	                	        REPEATED82 = (pANTLR3_COMMON_TOKEN) MATCHT(REPEATED, &FOLLOW_REPEATED_in_field1245); 
        	        	                	        if  (HASEXCEPTION())
        	        	                	        {
        	        	                	            goto rulefieldEx;
        	        	                	        }
        	        	                	         
        	        	                	        CREATE_stream_REPEATED; stream_REPEATED->add(stream_REPEATED, REPEATED82, NULL);


        	        	                	    }
        	        	                	    break;

        	        	                    }
        	        	                }
        	        	                FOLLOWPUSH(FOLLOW_field_type_in_field1248);
        	        	                field_type83=field_type(ctx);

        	        	                FOLLOWPOP();
        	        	                if  (HASEXCEPTION())
        	        	                {
        	        	                    goto rulefieldEx;
        	        	                }

        	        	                CREATE_stream_field_type; stream_field_type->add(stream_field_type, field_type83.tree, NULL);
        	        	                FOLLOWPUSH(FOLLOW_field_name_in_field1250);
        	        	                field_name84=field_name(ctx);

        	        	                FOLLOWPOP();
        	        	                if  (HASEXCEPTION())
        	        	                {
        	        	                    goto rulefieldEx;
        	        	                }

        	        	                CREATE_stream_field_name; stream_field_name->add(stream_field_name, field_name84.tree, NULL);
        	        	                EQUALS85 = (pANTLR3_COMMON_TOKEN) MATCHT(EQUALS, &FOLLOW_EQUALS_in_field1252); 
        	        	                if  (HASEXCEPTION())
        	        	                {
        	        	                    goto rulefieldEx;
        	        	                }
        	        	                 
        	        	                CREATE_stream_EQUALS; stream_EQUALS->add(stream_EQUALS, EQUALS85, NULL);

        	        	                FOLLOWPUSH(FOLLOW_field_offset_in_field1254);
        	        	                field_offset86=field_offset(ctx);

        	        	                FOLLOWPOP();
        	        	                if  (HASEXCEPTION())
        	        	                {
        	        	                    goto rulefieldEx;
        	        	                }

        	        	                CREATE_stream_field_offset; stream_field_offset->add(stream_field_offset, field_offset86.tree, NULL);
        	        	                ITEM_TERMINATOR87 = (pANTLR3_COMMON_TOKEN) MATCHT(ITEM_TERMINATOR, &FOLLOW_ITEM_TERMINATOR_in_field1256); 
        	        	                if  (HASEXCEPTION())
        	        	                {
        	        	                    goto rulefieldEx;
        	        	                }
        	        	                 
        	        	                CREATE_stream_ITEM_TERMINATOR; stream_ITEM_TERMINATOR->add(stream_ITEM_TERMINATOR, ITEM_TERMINATOR87, NULL);


        	        	            }


        	        	             
        	        	            /* AST REWRITE
        	        	             * elements          : ITEM_TERMINATOR, EQUALS, field_name, ITEM_TERMINATOR, field_type, REPEATED, field_offset, EQUALS, REPEATED, field_name, EQUALS, field_offset, REQUIRED, field_type
        	        	             * token labels      : 
        	        	             * rule labels       : retval
        	        	             * token list labels : 
        	        	             * rule list labels  : 
        	        	             */
        	        	            {
        	        	            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	            	retval.tree    = root_0;
        	        	            	// 274:11: -> {$field::isNumericType && $REQUIRED==NULL}? WS[\"\\t\"] REPEATED WS[\" \"] field_type WS[\" \"] field_name WS[\" \"] EQUALS WS[\" \"] field_offset WS[\" \"] SQBRACKET_OPEN[\"[\"] IDENTIFIER[\"packed\"] EQUALS[\"=\"] BOOL_LITERAL[\"true\"] SQBRACKET_CLOSE[\"]\"] ITEM_TERMINATOR WS[\"\\n\"]
        	        	            	if (	(SCOPE_TOP(field))->isNumericType && REQUIRED81==NULL) 
        	        	            	{
        	        	            	    ADAPTOR->addChild(ADAPTOR, root_0, 
        	        	            	    #if 1 == 2
        	        	            	    	(pANTLR3_BASE_TREE)ADAPTOR->createTypeTokenText(ADAPTOR, WS, TOKTEXT("\t"))
        	        	            	    #else
        	        	            	    	(pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, WS, (pANTLR3_UINT8)"\t")
        	        	            	    #endif
        	        	            	    );
        	        	            	    ADAPTOR->addChild(ADAPTOR, root_0, stream_REPEATED == NULL ? NULL : stream_REPEATED->nextNode(stream_REPEATED));
        	        	            	    ADAPTOR->addChild(ADAPTOR, root_0, 
        	        	            	    #if 1 == 2
        	        	            	    	(pANTLR3_BASE_TREE)ADAPTOR->createTypeTokenText(ADAPTOR, WS, TOKTEXT(" "))
        	        	            	    #else
        	        	            	    	(pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, WS, (pANTLR3_UINT8)" ")
        	        	            	    #endif
        	        	            	    );
        	        	            	    ADAPTOR->addChild(ADAPTOR, root_0, stream_field_type == NULL ? NULL : stream_field_type->nextTree(stream_field_type));
        	        	            	    ADAPTOR->addChild(ADAPTOR, root_0, 
        	        	            	    #if 1 == 2
        	        	            	    	(pANTLR3_BASE_TREE)ADAPTOR->createTypeTokenText(ADAPTOR, WS, TOKTEXT(" "))
        	        	            	    #else
        	        	            	    	(pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, WS, (pANTLR3_UINT8)" ")
        	        	            	    #endif
        	        	            	    );
        	        	            	    ADAPTOR->addChild(ADAPTOR, root_0, stream_field_name == NULL ? NULL : stream_field_name->nextTree(stream_field_name));
        	        	            	    ADAPTOR->addChild(ADAPTOR, root_0, 
        	        	            	    #if 1 == 2
        	        	            	    	(pANTLR3_BASE_TREE)ADAPTOR->createTypeTokenText(ADAPTOR, WS, TOKTEXT(" "))
        	        	            	    #else
        	        	            	    	(pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, WS, (pANTLR3_UINT8)" ")
        	        	            	    #endif
        	        	            	    );
        	        	            	    ADAPTOR->addChild(ADAPTOR, root_0, stream_EQUALS == NULL ? NULL : stream_EQUALS->nextNode(stream_EQUALS));
        	        	            	    ADAPTOR->addChild(ADAPTOR, root_0, 
        	        	            	    #if 1 == 2
        	        	            	    	(pANTLR3_BASE_TREE)ADAPTOR->createTypeTokenText(ADAPTOR, WS, TOKTEXT(" "))
        	        	            	    #else
        	        	            	    	(pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, WS, (pANTLR3_UINT8)" ")
        	        	            	    #endif
        	        	            	    );
        	        	            	    ADAPTOR->addChild(ADAPTOR, root_0, stream_field_offset == NULL ? NULL : stream_field_offset->nextTree(stream_field_offset));
        	        	            	    ADAPTOR->addChild(ADAPTOR, root_0, 
        	        	            	    #if 1 == 2
        	        	            	    	(pANTLR3_BASE_TREE)ADAPTOR->createTypeTokenText(ADAPTOR, WS, TOKTEXT(" "))
        	        	            	    #else
        	        	            	    	(pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, WS, (pANTLR3_UINT8)" ")
        	        	            	    #endif
        	        	            	    );
        	        	            	    ADAPTOR->addChild(ADAPTOR, root_0, 
        	        	            	    #if 1 == 2
        	        	            	    	(pANTLR3_BASE_TREE)ADAPTOR->createTypeTokenText(ADAPTOR, SQBRACKET_OPEN, TOKTEXT("["))
        	        	            	    #else
        	        	            	    	(pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, SQBRACKET_OPEN, (pANTLR3_UINT8)"[")
        	        	            	    #endif
        	        	            	    );
        	        	            	    ADAPTOR->addChild(ADAPTOR, root_0, 
        	        	            	    #if 1 == 2
        	        	            	    	(pANTLR3_BASE_TREE)ADAPTOR->createTypeTokenText(ADAPTOR, IDENTIFIER, TOKTEXT("packed"))
        	        	            	    #else
        	        	            	    	(pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, IDENTIFIER, (pANTLR3_UINT8)"packed")
        	        	            	    #endif
        	        	            	    );
        	        	            	    ADAPTOR->addChild(ADAPTOR, root_0, 
        	        	            	    #if 1 == 2
        	        	            	    	(pANTLR3_BASE_TREE)ADAPTOR->createTypeTokenText(ADAPTOR, EQUALS, TOKTEXT("="))
        	        	            	    #else
        	        	            	    	(pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, EQUALS, (pANTLR3_UINT8)"=")
        	        	            	    #endif
        	        	            	    );
        	        	            	    ADAPTOR->addChild(ADAPTOR, root_0, 
        	        	            	    #if 1 == 2
        	        	            	    	(pANTLR3_BASE_TREE)ADAPTOR->createTypeTokenText(ADAPTOR, BOOL_LITERAL, TOKTEXT("true"))
        	        	            	    #else
        	        	            	    	(pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, BOOL_LITERAL, (pANTLR3_UINT8)"true")
        	        	            	    #endif
        	        	            	    );
        	        	            	    ADAPTOR->addChild(ADAPTOR, root_0, 
        	        	            	    #if 1 == 2
        	        	            	    	(pANTLR3_BASE_TREE)ADAPTOR->createTypeTokenText(ADAPTOR, SQBRACKET_CLOSE, TOKTEXT("]"))
        	        	            	    #else
        	        	            	    	(pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, SQBRACKET_CLOSE, (pANTLR3_UINT8)"]")
        	        	            	    #endif
        	        	            	    );
        	        	            	    ADAPTOR->addChild(ADAPTOR, root_0, stream_ITEM_TERMINATOR == NULL ? NULL : stream_ITEM_TERMINATOR->nextNode(stream_ITEM_TERMINATOR));
        	        	            	    ADAPTOR->addChild(ADAPTOR, root_0, 
        	        	            	    #if 1 == 2
        	        	            	    	(pANTLR3_BASE_TREE)ADAPTOR->createTypeTokenText(ADAPTOR, WS, TOKTEXT("\n"))
        	        	            	    #else
        	        	            	    	(pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, WS, (pANTLR3_UINT8)"\n")
        	        	            	    #endif
        	        	            	    );

        	        	            	}
        	        	            	else // 275:11: -> WS[\"\\t\"] REQUIRED REPEATED WS[\" \"] field_type WS[\" \"] field_name WS[\" \"] EQUALS WS[\" \"] field_offset ITEM_TERMINATOR WS[\"\\n\"]
        	        	            	{
        	        	            	    ADAPTOR->addChild(ADAPTOR, root_0, 
        	        	            	    #if 1 == 2
        	        	            	    	(pANTLR3_BASE_TREE)ADAPTOR->createTypeTokenText(ADAPTOR, WS, TOKTEXT("\t"))
        	        	            	    #else
        	        	            	    	(pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, WS, (pANTLR3_UINT8)"\t")
        	        	            	    #endif
        	        	            	    );
        	        	            	    ADAPTOR->addChild(ADAPTOR, root_0, stream_REQUIRED == NULL ? NULL : stream_REQUIRED->nextNode(stream_REQUIRED));
        	        	            	    ADAPTOR->addChild(ADAPTOR, root_0, stream_REPEATED == NULL ? NULL : stream_REPEATED->nextNode(stream_REPEATED));
        	        	            	    ADAPTOR->addChild(ADAPTOR, root_0, 
        	        	            	    #if 1 == 2
        	        	            	    	(pANTLR3_BASE_TREE)ADAPTOR->createTypeTokenText(ADAPTOR, WS, TOKTEXT(" "))
        	        	            	    #else
        	        	            	    	(pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, WS, (pANTLR3_UINT8)" ")
        	        	            	    #endif
        	        	            	    );
        	        	            	    ADAPTOR->addChild(ADAPTOR, root_0, stream_field_type == NULL ? NULL : stream_field_type->nextTree(stream_field_type));
        	        	            	    ADAPTOR->addChild(ADAPTOR, root_0, 
        	        	            	    #if 1 == 2
        	        	            	    	(pANTLR3_BASE_TREE)ADAPTOR->createTypeTokenText(ADAPTOR, WS, TOKTEXT(" "))
        	        	            	    #else
        	        	            	    	(pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, WS, (pANTLR3_UINT8)" ")
        	        	            	    #endif
        	        	            	    );
        	        	            	    ADAPTOR->addChild(ADAPTOR, root_0, stream_field_name == NULL ? NULL : stream_field_name->nextTree(stream_field_name));
        	        	            	    ADAPTOR->addChild(ADAPTOR, root_0, 
        	        	            	    #if 1 == 2
        	        	            	    	(pANTLR3_BASE_TREE)ADAPTOR->createTypeTokenText(ADAPTOR, WS, TOKTEXT(" "))
        	        	            	    #else
        	        	            	    	(pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, WS, (pANTLR3_UINT8)" ")
        	        	            	    #endif
        	        	            	    );
        	        	            	    ADAPTOR->addChild(ADAPTOR, root_0, stream_EQUALS == NULL ? NULL : stream_EQUALS->nextNode(stream_EQUALS));
        	        	            	    ADAPTOR->addChild(ADAPTOR, root_0, 
        	        	            	    #if 1 == 2
        	        	            	    	(pANTLR3_BASE_TREE)ADAPTOR->createTypeTokenText(ADAPTOR, WS, TOKTEXT(" "))
        	        	            	    #else
        	        	            	    	(pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, WS, (pANTLR3_UINT8)" ")
        	        	            	    #endif
        	        	            	    );
        	        	            	    ADAPTOR->addChild(ADAPTOR, root_0, stream_field_offset == NULL ? NULL : stream_field_offset->nextTree(stream_field_offset));
        	        	            	    ADAPTOR->addChild(ADAPTOR, root_0, stream_ITEM_TERMINATOR == NULL ? NULL : stream_ITEM_TERMINATOR->nextNode(stream_ITEM_TERMINATOR));
        	        	            	    ADAPTOR->addChild(ADAPTOR, root_0, 
        	        	            	    #if 1 == 2
        	        	            	    	(pANTLR3_BASE_TREE)ADAPTOR->createTypeTokenText(ADAPTOR, WS, TOKTEXT("\n"))
        	        	            	    #else
        	        	            	    	(pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, WS, (pANTLR3_UINT8)"\n")
        	        	            	    #endif
        	        	            	    );

        	        	            	}

        	        	            	retval.tree = root_0; // set result root
        	        	            	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        	            }
        	        	        }


        	        	    }
        	        	    break;

        	            }
        	        }
        	        {

        	                    defineField(ctx, 	(SCOPE_TOP(field))->fieldType,	(SCOPE_TOP(field))->fieldName,	(SCOPE_TOP(field))->defaultValue,	(SCOPE_TOP(field))->fieldOffset,REPEATED82==NULL,REQUIRED81!=NULL,0);
        	                    stringFree(	(SCOPE_TOP(field))->fieldName);
        	                    stringFree(	(SCOPE_TOP(field))->fieldType);
        	                    stringFree(	(SCOPE_TOP(field))->defaultValue);
        	                
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulefieldEx; /* Prevent compiler warnings */
    rulefieldEx: ;
    pPBJParser_fieldPop(ctx);

    retval.stop = LT(-1);

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_REPEATED != NULL) stream_REPEATED->free(stream_REPEATED);
        if (stream_EQUALS != NULL) stream_EQUALS->free(stream_EQUALS);
        if (stream_REQUIRED != NULL) stream_REQUIRED->free(stream_REQUIRED);
        if (stream_PBJOPTIONAL != NULL) stream_PBJOPTIONAL->free(stream_PBJOPTIONAL);
        if (stream_ITEM_TERMINATOR != NULL) stream_ITEM_TERMINATOR->free(stream_ITEM_TERMINATOR);
        if (stream_field_name != NULL) stream_field_name->free(stream_field_name);
        if (stream_field_type != NULL) stream_field_type->free(stream_field_type);
        if (stream_field_offset != NULL) stream_field_offset->free(stream_field_offset);
        if (stream_default_value != NULL) stream_default_value->free(stream_default_value);
        if (stream_multiplicitive_type != NULL) stream_multiplicitive_type->free(stream_multiplicitive_type);

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end field */

/** 
 * $ANTLR start field_offset
 * PBJ.g:284:1: field_offset : integer ;
 */
static PBJParser_field_offset_return
field_offset(pPBJParser ctx)
{   
    PBJParser_field_offset_return retval;

    pANTLR3_BASE_TREE root_0;

    PBJParser_integer_return integer88;
    #undef	RETURN_TYPE_integer88
    #define	RETURN_TYPE_integer88 PBJParser_integer_return


    /* Initialize rule variables
     */


    root_0 = NULL;

    integer88.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;



    retval.tree  = NULL;
    {
        // PBJ.g:285:5: ( integer )
        // PBJ.g:285:7: integer
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            FOLLOWPUSH(FOLLOW_integer_in_field_offset1391);
            integer88=integer(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulefield_offsetEx;
            }

            ADAPTOR->addChild(ADAPTOR, root_0, integer88.tree);
            {

                        
                        	(SCOPE_TOP(field))->fieldOffset=atoi((char*)((STRSTREAM->toStringTT(STRSTREAM, integer88.start, integer88.stop))->chars));
                    
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulefield_offsetEx; /* Prevent compiler warnings */
    rulefield_offsetEx: ;
    retval.stop = LT(-1);

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end field_offset */

/** 
 * $ANTLR start field_name
 * PBJ.g:292:1: field_name : IDENTIFIER ;
 */
static PBJParser_field_name_return
field_name(pPBJParser ctx)
{   
    PBJParser_field_name_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    IDENTIFIER89;

    pANTLR3_BASE_TREE IDENTIFIER89_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    IDENTIFIER89       = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    IDENTIFIER89_tree   = NULL;


    retval.tree  = NULL;
    {
        // PBJ.g:293:5: ( IDENTIFIER )
        // PBJ.g:293:7: IDENTIFIER
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            IDENTIFIER89 = (pANTLR3_COMMON_TOKEN) MATCHT(IDENTIFIER, &FOLLOW_IDENTIFIER_in_field_name1414); 
            if  (HASEXCEPTION())
            {
                goto rulefield_nameEx;
            }

            IDENTIFIER89_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, IDENTIFIER89));
            ADAPTOR->addChild(ADAPTOR, root_0, IDENTIFIER89_tree);

            {

                        	(SCOPE_TOP(field))->fieldName=stringDup((IDENTIFIER89->getText(IDENTIFIER89)));
                    
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulefield_nameEx; /* Prevent compiler warnings */
    rulefield_nameEx: ;
    retval.stop = LT(-1);

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end field_name */

/** 
 * $ANTLR start field_type
 * PBJ.g:299:1: field_type : ( numeric_type | array_type | advanced_numeric_type | advanced_array_type | ( IDENTIFIER -> {SCOPE_TOP(Symbols)->flag_sizes->get(SCOPE_TOP(Symbols)->flag_sizes,$IDENTIFIER.text->chars)!=NULL\n && *(unsigned int*)SCOPE_TOP(Symbols)->flag_sizes->get(SCOPE_TOP(Symbols)->flag_sizes,$IDENTIFIER.text->chars)<28}? UINT32[\"uint32\"] -> {SCOPE_TOP(Symbols)->flag_sizes->get(SCOPE_TOP(Symbols)->flag_sizes,$IDENTIFIER.text->chars)!=NULL\n && *(unsigned int*)SCOPE_TOP(Symbols)->flag_sizes->get(SCOPE_TOP(Symbols)->flag_sizes,$IDENTIFIER.text->chars)<=32}? UINT32[\"uint32\"] -> {SCOPE_TOP(Symbols)->flag_sizes->get(SCOPE_TOP(Symbols)->flag_sizes,$IDENTIFIER.text->chars)!=NULL\n && *(unsigned int*)SCOPE_TOP(Symbols)->flag_sizes->get(SCOPE_TOP(Symbols)->flag_sizes,$IDENTIFIER.text->chars)==64}? UINT64[\"uint64\"] -> IDENTIFIER ) );
 */
static PBJParser_field_type_return
field_type(pPBJParser ctx)
{   
    PBJParser_field_type_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    IDENTIFIER94;
    PBJParser_numeric_type_return numeric_type90;
    #undef	RETURN_TYPE_numeric_type90
    #define	RETURN_TYPE_numeric_type90 PBJParser_numeric_type_return

    PBJParser_array_type_return array_type91;
    #undef	RETURN_TYPE_array_type91
    #define	RETURN_TYPE_array_type91 PBJParser_array_type_return

    PBJParser_advanced_numeric_type_return advanced_numeric_type92;
    #undef	RETURN_TYPE_advanced_numeric_type92
    #define	RETURN_TYPE_advanced_numeric_type92 PBJParser_advanced_numeric_type_return

    PBJParser_advanced_array_type_return advanced_array_type93;
    #undef	RETURN_TYPE_advanced_array_type93
    #define	RETURN_TYPE_advanced_array_type93 PBJParser_advanced_array_type_return

    pANTLR3_BASE_TREE IDENTIFIER94_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_IDENTIFIER;

    /* Initialize rule variables
     */


    root_0 = NULL;

    IDENTIFIER94       = NULL;
    numeric_type90.tree = NULL;

    array_type91.tree = NULL;

    advanced_numeric_type92.tree = NULL;

    advanced_array_type93.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    IDENTIFIER94_tree   = NULL;

    stream_IDENTIFIER   = NULL;
    #define CREATE_stream_IDENTIFIER  if (stream_IDENTIFIER == NULL) {stream_IDENTIFIER = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token IDENTIFIER"); } 

    retval.tree  = NULL;
    {
        {
            //  PBJ.g:300:5: ( numeric_type | array_type | advanced_numeric_type | advanced_array_type | ( IDENTIFIER -> {SCOPE_TOP(Symbols)->flag_sizes->get(SCOPE_TOP(Symbols)->flag_sizes,$IDENTIFIER.text->chars)!=NULL\n && *(unsigned int*)SCOPE_TOP(Symbols)->flag_sizes->get(SCOPE_TOP(Symbols)->flag_sizes,$IDENTIFIER.text->chars)<28}? UINT32[\"uint32\"] -> {SCOPE_TOP(Symbols)->flag_sizes->get(SCOPE_TOP(Symbols)->flag_sizes,$IDENTIFIER.text->chars)!=NULL\n && *(unsigned int*)SCOPE_TOP(Symbols)->flag_sizes->get(SCOPE_TOP(Symbols)->flag_sizes,$IDENTIFIER.text->chars)<=32}? UINT32[\"uint32\"] -> {SCOPE_TOP(Symbols)->flag_sizes->get(SCOPE_TOP(Symbols)->flag_sizes,$IDENTIFIER.text->chars)!=NULL\n && *(unsigned int*)SCOPE_TOP(Symbols)->flag_sizes->get(SCOPE_TOP(Symbols)->flag_sizes,$IDENTIFIER.text->chars)==64}? UINT64[\"uint64\"] -> IDENTIFIER ) )
            
            ANTLR3_UINT32 alt19;

            alt19=5;

            switch ( LA(1) ) 
            {
            case UINT32:
            case INT32:
            case SINT32:
            case FIXED32:
            case SFIXED32:
            case UINT64:
            case INT64:
            case SINT64:
            case FIXED64:
            case SFIXED64:
            case FLOAT:
            case DOUBLE:
            case BOOL:
            	{
            		alt19=1;
            	}
                break;
            case STRING:
            case BYTES:
            	{
            		alt19=2;
            	}
                break;
            case UINT8:
            case INT8:
            case SINT8:
            case FIXED8:
            case SFIXED8:
            case INT16:
            case SINT16:
            case FIXED16:
            case SFIXED16:
            case UINT16:
            case ANGLE:
            case TIME:
            case DURATION:
            	{
            		alt19=3;
            	}
                break;
            case UUID:
            case SHA256:
            	{
            		alt19=4;
            	}
                break;
            case IDENTIFIER:
            	{
            		alt19=5;
            	}
                break;

            default:
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 19;
                EXCEPTION->state        = 0;


                goto rulefield_typeEx;
            }

            switch (alt19) 
            {
        	case 1:
        	    // PBJ.g:300:7: numeric_type
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_numeric_type_in_field_type1437);
        	        numeric_type90=numeric_type(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulefield_typeEx;
        	        }

        	        ADAPTOR->addChild(ADAPTOR, root_0, numeric_type90.tree);
        	        {

        	                    	(SCOPE_TOP(field))->isNumericType=1;
        	                    	(SCOPE_TOP(field))->fieldType=stringDup((STRSTREAM->toStringTT(STRSTREAM, numeric_type90.start, numeric_type90.stop)));
        	                
        	        }

        	    }
        	    break;
        	case 2:
        	    // PBJ.g:305:7: array_type
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_array_type_in_field_type1451);
        	        array_type91=array_type(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulefield_typeEx;
        	        }

        	        ADAPTOR->addChild(ADAPTOR, root_0, array_type91.tree);
        	        {

        	                    	(SCOPE_TOP(field))->isNumericType=0;
        	                    	(SCOPE_TOP(field))->fieldType=stringDup((STRSTREAM->toStringTT(STRSTREAM, array_type91.start, array_type91.stop)));
        	                
        	        }

        	    }
        	    break;
        	case 3:
        	    // PBJ.g:310:7: advanced_numeric_type
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_advanced_numeric_type_in_field_type1465);
        	        advanced_numeric_type92=advanced_numeric_type(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulefield_typeEx;
        	        }

        	        ADAPTOR->addChild(ADAPTOR, root_0, advanced_numeric_type92.tree);
        	        {

        	                   	(SCOPE_TOP(field))->isNumericType=1;
        	                   	(SCOPE_TOP(field))->fieldType=stringDup((STRSTREAM->toStringTT(STRSTREAM, advanced_numeric_type92.start, advanced_numeric_type92.stop)));
        	                
        	        }

        	    }
        	    break;
        	case 4:
        	    // PBJ.g:315:7: advanced_array_type
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_advanced_array_type_in_field_type1479);
        	        advanced_array_type93=advanced_array_type(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulefield_typeEx;
        	        }

        	        ADAPTOR->addChild(ADAPTOR, root_0, advanced_array_type93.tree);
        	        {

        	                   	(SCOPE_TOP(field))->isNumericType=0;
        	                   	(SCOPE_TOP(field))->fieldType=stringDup((STRSTREAM->toStringTT(STRSTREAM, advanced_array_type93.start, advanced_array_type93.stop)));
        	                
        	        }

        	    }
        	    break;
        	case 5:
        	    // PBJ.g:320:7: ( IDENTIFIER -> {SCOPE_TOP(Symbols)->flag_sizes->get(SCOPE_TOP(Symbols)->flag_sizes,$IDENTIFIER.text->chars)!=NULL\n && *(unsigned int*)SCOPE_TOP(Symbols)->flag_sizes->get(SCOPE_TOP(Symbols)->flag_sizes,$IDENTIFIER.text->chars)<28}? UINT32[\"uint32\"] -> {SCOPE_TOP(Symbols)->flag_sizes->get(SCOPE_TOP(Symbols)->flag_sizes,$IDENTIFIER.text->chars)!=NULL\n && *(unsigned int*)SCOPE_TOP(Symbols)->flag_sizes->get(SCOPE_TOP(Symbols)->flag_sizes,$IDENTIFIER.text->chars)<=32}? UINT32[\"uint32\"] -> {SCOPE_TOP(Symbols)->flag_sizes->get(SCOPE_TOP(Symbols)->flag_sizes,$IDENTIFIER.text->chars)!=NULL\n && *(unsigned int*)SCOPE_TOP(Symbols)->flag_sizes->get(SCOPE_TOP(Symbols)->flag_sizes,$IDENTIFIER.text->chars)==64}? UINT64[\"uint64\"] -> IDENTIFIER )
        	    {
        	        // PBJ.g:320:7: ( IDENTIFIER -> {SCOPE_TOP(Symbols)->flag_sizes->get(SCOPE_TOP(Symbols)->flag_sizes,$IDENTIFIER.text->chars)!=NULL\n && *(unsigned int*)SCOPE_TOP(Symbols)->flag_sizes->get(SCOPE_TOP(Symbols)->flag_sizes,$IDENTIFIER.text->chars)<28}? UINT32[\"uint32\"] -> {SCOPE_TOP(Symbols)->flag_sizes->get(SCOPE_TOP(Symbols)->flag_sizes,$IDENTIFIER.text->chars)!=NULL\n && *(unsigned int*)SCOPE_TOP(Symbols)->flag_sizes->get(SCOPE_TOP(Symbols)->flag_sizes,$IDENTIFIER.text->chars)<=32}? UINT32[\"uint32\"] -> {SCOPE_TOP(Symbols)->flag_sizes->get(SCOPE_TOP(Symbols)->flag_sizes,$IDENTIFIER.text->chars)!=NULL\n && *(unsigned int*)SCOPE_TOP(Symbols)->flag_sizes->get(SCOPE_TOP(Symbols)->flag_sizes,$IDENTIFIER.text->chars)==64}? UINT64[\"uint64\"] -> IDENTIFIER )
        	        // PBJ.g:320:9: IDENTIFIER
        	        {
        	            IDENTIFIER94 = (pANTLR3_COMMON_TOKEN) MATCHT(IDENTIFIER, &FOLLOW_IDENTIFIER_in_field_type1495); 
        	            if  (HASEXCEPTION())
        	            {
        	                goto rulefield_typeEx;
        	            }
        	             
        	            CREATE_stream_IDENTIFIER; stream_IDENTIFIER->add(stream_IDENTIFIER, IDENTIFIER94, NULL);


        	             
        	            /* AST REWRITE
        	             * elements          : IDENTIFIER
        	             * token labels      : 
        	             * rule labels       : retval
        	             * token list labels : 
        	             * rule list labels  : 
        	             */
        	            {
        	            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	            	retval.tree    = root_0;
        	            	// 321:9: -> {SCOPE_TOP(Symbols)->flag_sizes->get(SCOPE_TOP(Symbols)->flag_sizes,$IDENTIFIER.text->chars)!=NULL\n && *(unsigned int*)SCOPE_TOP(Symbols)->flag_sizes->get(SCOPE_TOP(Symbols)->flag_sizes,$IDENTIFIER.text->chars)<28}? UINT32[\"uint32\"]
        	            	if (SCOPE_TOP(Symbols)->flag_sizes->get(SCOPE_TOP(Symbols)->flag_sizes,(IDENTIFIER94->getText(IDENTIFIER94))->chars)!=NULL
        	            	            && *(unsigned int*)SCOPE_TOP(Symbols)->flag_sizes->get(SCOPE_TOP(Symbols)->flag_sizes,(IDENTIFIER94->getText(IDENTIFIER94))->chars)<28) 
        	            	{
        	            	    ADAPTOR->addChild(ADAPTOR, root_0, 
        	            	    #if 1 == 2
        	            	    	(pANTLR3_BASE_TREE)ADAPTOR->createTypeTokenText(ADAPTOR, UINT32, TOKTEXT("uint32"))
        	            	    #else
        	            	    	(pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, UINT32, (pANTLR3_UINT8)"uint32")
        	            	    #endif
        	            	    );

        	            	}
        	            	else // 324:9: -> {SCOPE_TOP(Symbols)->flag_sizes->get(SCOPE_TOP(Symbols)->flag_sizes,$IDENTIFIER.text->chars)!=NULL\n && *(unsigned int*)SCOPE_TOP(Symbols)->flag_sizes->get(SCOPE_TOP(Symbols)->flag_sizes,$IDENTIFIER.text->chars)<=32}? UINT32[\"uint32\"]
        	            	if (SCOPE_TOP(Symbols)->flag_sizes->get(SCOPE_TOP(Symbols)->flag_sizes,(IDENTIFIER94->getText(IDENTIFIER94))->chars)!=NULL
        	            	            && *(unsigned int*)SCOPE_TOP(Symbols)->flag_sizes->get(SCOPE_TOP(Symbols)->flag_sizes,(IDENTIFIER94->getText(IDENTIFIER94))->chars)<=32) 
        	            	{
        	            	    ADAPTOR->addChild(ADAPTOR, root_0, 
        	            	    #if 1 == 2
        	            	    	(pANTLR3_BASE_TREE)ADAPTOR->createTypeTokenText(ADAPTOR, UINT32, TOKTEXT("uint32"))
        	            	    #else
        	            	    	(pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, UINT32, (pANTLR3_UINT8)"uint32")
        	            	    #endif
        	            	    );

        	            	}
        	            	else // 327:9: -> {SCOPE_TOP(Symbols)->flag_sizes->get(SCOPE_TOP(Symbols)->flag_sizes,$IDENTIFIER.text->chars)!=NULL\n && *(unsigned int*)SCOPE_TOP(Symbols)->flag_sizes->get(SCOPE_TOP(Symbols)->flag_sizes,$IDENTIFIER.text->chars)==64}? UINT64[\"uint64\"]
        	            	if (SCOPE_TOP(Symbols)->flag_sizes->get(SCOPE_TOP(Symbols)->flag_sizes,(IDENTIFIER94->getText(IDENTIFIER94))->chars)!=NULL
        	            	            && *(unsigned int*)SCOPE_TOP(Symbols)->flag_sizes->get(SCOPE_TOP(Symbols)->flag_sizes,(IDENTIFIER94->getText(IDENTIFIER94))->chars)==64) 
        	            	{
        	            	    ADAPTOR->addChild(ADAPTOR, root_0, 
        	            	    #if 1 == 2
        	            	    	(pANTLR3_BASE_TREE)ADAPTOR->createTypeTokenText(ADAPTOR, UINT64, TOKTEXT("uint64"))
        	            	    #else
        	            	    	(pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, UINT64, (pANTLR3_UINT8)"uint64")
        	            	    #endif
        	            	    );

        	            	}
        	            	else // 330:9: -> IDENTIFIER
        	            	{
        	            	    ADAPTOR->addChild(ADAPTOR, root_0, stream_IDENTIFIER == NULL ? NULL : stream_IDENTIFIER->nextNode(stream_IDENTIFIER));

        	            	}

        	            	retval.tree = root_0; // set result root
        	            	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	            }
        	        }

        	        {

        	                   	(SCOPE_TOP(field))->isNumericType=(SCOPE_TOP(Symbols)->flag_sizes->get(SCOPE_TOP(Symbols)->flag_sizes,(IDENTIFIER94->getText(IDENTIFIER94))->chars)!=NULL||
        	                                            SCOPE_TOP(Symbols)->enum_sizes->get(SCOPE_TOP(Symbols)->enum_sizes,(IDENTIFIER94->getText(IDENTIFIER94))->chars)!=NULL);
        	                   	(SCOPE_TOP(field))->fieldType=stringDup((IDENTIFIER94->getText(IDENTIFIER94)));
        	                
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulefield_typeEx; /* Prevent compiler warnings */
    rulefield_typeEx: ;
    retval.stop = LT(-1);

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_IDENTIFIER != NULL) stream_IDENTIFIER->free(stream_IDENTIFIER);

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end field_type */

/** 
 * $ANTLR start multiplicitive_type
 * PBJ.g:337:1: multiplicitive_type : multiplicitive_advanced_type ;
 */
static PBJParser_multiplicitive_type_return
multiplicitive_type(pPBJParser ctx)
{   
    PBJParser_multiplicitive_type_return retval;

    pANTLR3_BASE_TREE root_0;

    PBJParser_multiplicitive_advanced_type_return multiplicitive_advanced_type95;
    #undef	RETURN_TYPE_multiplicitive_advanced_type95
    #define	RETURN_TYPE_multiplicitive_advanced_type95 PBJParser_multiplicitive_advanced_type_return


    /* Initialize rule variables
     */


    root_0 = NULL;

    multiplicitive_advanced_type95.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;



    retval.tree  = NULL;
    {
        // PBJ.g:338:5: ( multiplicitive_advanced_type )
        // PBJ.g:339:5: multiplicitive_advanced_type
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            FOLLOWPUSH(FOLLOW_multiplicitive_advanced_type_in_multiplicitive_type1626);
            multiplicitive_advanced_type95=multiplicitive_advanced_type(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulemultiplicitive_typeEx;
            }

            ADAPTOR->addChild(ADAPTOR, root_0, multiplicitive_advanced_type95.tree);
            {

                       	(SCOPE_TOP(field))->fieldType=stringDup((STRSTREAM->toStringTT(STRSTREAM, multiplicitive_advanced_type95.start, multiplicitive_advanced_type95.stop)));        
                    
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulemultiplicitive_typeEx; /* Prevent compiler warnings */
    rulemultiplicitive_typeEx: ;
    retval.stop = LT(-1);

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end multiplicitive_type */

/** 
 * $ANTLR start array_spec
 * PBJ.g:345:1: array_spec : SQBRACKET_OPEN ( integer )? SQBRACKET_CLOSE ;
 */
static PBJParser_array_spec_return
array_spec(pPBJParser ctx)
{   
    PBJParser_array_spec_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    SQBRACKET_OPEN96;
    pANTLR3_COMMON_TOKEN    SQBRACKET_CLOSE98;
    PBJParser_integer_return integer97;
    #undef	RETURN_TYPE_integer97
    #define	RETURN_TYPE_integer97 PBJParser_integer_return

    pANTLR3_BASE_TREE SQBRACKET_OPEN96_tree;
    pANTLR3_BASE_TREE SQBRACKET_CLOSE98_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    SQBRACKET_OPEN96       = NULL;
    SQBRACKET_CLOSE98       = NULL;
    integer97.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    SQBRACKET_OPEN96_tree   = NULL;
    SQBRACKET_CLOSE98_tree   = NULL;


    retval.tree  = NULL;
    {
        // PBJ.g:346:2: ( SQBRACKET_OPEN ( integer )? SQBRACKET_CLOSE )
        // PBJ.g:346:4: SQBRACKET_OPEN ( integer )? SQBRACKET_CLOSE
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            SQBRACKET_OPEN96 = (pANTLR3_COMMON_TOKEN) MATCHT(SQBRACKET_OPEN, &FOLLOW_SQBRACKET_OPEN_in_array_spec1647); 
            if  (HASEXCEPTION())
            {
                goto rulearray_specEx;
            }

            SQBRACKET_OPEN96_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, SQBRACKET_OPEN96));
            ADAPTOR->addChild(ADAPTOR, root_0, SQBRACKET_OPEN96_tree);


            // PBJ.g:346:19: ( integer )?
            {
                int alt20=2;
                {
                    int LA20_0 = LA(1);
                    if ( (((LA20_0 >= HEX_LITERAL) && (LA20_0 <= OCTAL_LITERAL))) ) 
                    {
                        alt20=1;
                    }
                }
                switch (alt20) 
                {
            	case 1:
            	    // PBJ.g:346:19: integer
            	    {
            	        FOLLOWPUSH(FOLLOW_integer_in_array_spec1649);
            	        integer97=integer(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulearray_specEx;
            	        }

            	        ADAPTOR->addChild(ADAPTOR, root_0, integer97.tree);

            	    }
            	    break;

                }
            }
            SQBRACKET_CLOSE98 = (pANTLR3_COMMON_TOKEN) MATCHT(SQBRACKET_CLOSE, &FOLLOW_SQBRACKET_CLOSE_in_array_spec1652); 
            if  (HASEXCEPTION())
            {
                goto rulearray_specEx;
            }

            SQBRACKET_CLOSE98_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, SQBRACKET_CLOSE98));
            ADAPTOR->addChild(ADAPTOR, root_0, SQBRACKET_CLOSE98_tree);


        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulearray_specEx; /* Prevent compiler warnings */
    rulearray_specEx: ;
    retval.stop = LT(-1);

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end array_spec */

/** 
 * $ANTLR start default_value
 * PBJ.g:349:1: default_value : SQBRACKET_OPEN DEFAULT EQUALS literal_value SQBRACKET_CLOSE ;
 */
static PBJParser_default_value_return
default_value(pPBJParser ctx)
{   
    PBJParser_default_value_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    SQBRACKET_OPEN99;
    pANTLR3_COMMON_TOKEN    DEFAULT100;
    pANTLR3_COMMON_TOKEN    EQUALS101;
    pANTLR3_COMMON_TOKEN    SQBRACKET_CLOSE103;
    PBJParser_literal_value_return literal_value102;
    #undef	RETURN_TYPE_literal_value102
    #define	RETURN_TYPE_literal_value102 PBJParser_literal_value_return

    pANTLR3_BASE_TREE SQBRACKET_OPEN99_tree;
    pANTLR3_BASE_TREE DEFAULT100_tree;
    pANTLR3_BASE_TREE EQUALS101_tree;
    pANTLR3_BASE_TREE SQBRACKET_CLOSE103_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    SQBRACKET_OPEN99       = NULL;
    DEFAULT100       = NULL;
    EQUALS101       = NULL;
    SQBRACKET_CLOSE103       = NULL;
    literal_value102.tree = NULL;

    retval.start = LT(1); retval.stop = retval.start;

    SQBRACKET_OPEN99_tree   = NULL;
    DEFAULT100_tree   = NULL;
    EQUALS101_tree   = NULL;
    SQBRACKET_CLOSE103_tree   = NULL;


    retval.tree  = NULL;
    {
        // PBJ.g:350:2: ( SQBRACKET_OPEN DEFAULT EQUALS literal_value SQBRACKET_CLOSE )
        // PBJ.g:350:4: SQBRACKET_OPEN DEFAULT EQUALS literal_value SQBRACKET_CLOSE
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            SQBRACKET_OPEN99 = (pANTLR3_COMMON_TOKEN) MATCHT(SQBRACKET_OPEN, &FOLLOW_SQBRACKET_OPEN_in_default_value1663); 
            if  (HASEXCEPTION())
            {
                goto ruledefault_valueEx;
            }

            SQBRACKET_OPEN99_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, SQBRACKET_OPEN99));
            ADAPTOR->addChild(ADAPTOR, root_0, SQBRACKET_OPEN99_tree);

            DEFAULT100 = (pANTLR3_COMMON_TOKEN) MATCHT(DEFAULT, &FOLLOW_DEFAULT_in_default_value1665); 
            if  (HASEXCEPTION())
            {
                goto ruledefault_valueEx;
            }

            DEFAULT100_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, DEFAULT100));
            ADAPTOR->addChild(ADAPTOR, root_0, DEFAULT100_tree);

            EQUALS101 = (pANTLR3_COMMON_TOKEN) MATCHT(EQUALS, &FOLLOW_EQUALS_in_default_value1667); 
            if  (HASEXCEPTION())
            {
                goto ruledefault_valueEx;
            }

            EQUALS101_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, EQUALS101));
            ADAPTOR->addChild(ADAPTOR, root_0, EQUALS101_tree);

            FOLLOWPUSH(FOLLOW_literal_value_in_default_value1669);
            literal_value102=literal_value(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruledefault_valueEx;
            }

            ADAPTOR->addChild(ADAPTOR, root_0, literal_value102.tree);
            SQBRACKET_CLOSE103 = (pANTLR3_COMMON_TOKEN) MATCHT(SQBRACKET_CLOSE, &FOLLOW_SQBRACKET_CLOSE_in_default_value1671); 
            if  (HASEXCEPTION())
            {
                goto ruledefault_valueEx;
            }

            SQBRACKET_CLOSE103_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, SQBRACKET_CLOSE103));
            ADAPTOR->addChild(ADAPTOR, root_0, SQBRACKET_CLOSE103_tree);

            {

                        	(SCOPE_TOP(field))->defaultValue=defaultValuePreprocess(ctx, 	(SCOPE_TOP(field))->fieldType, (STRSTREAM->toStringTT(STRSTREAM, literal_value102.start, literal_value102.stop)));
                    
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruledefault_valueEx; /* Prevent compiler warnings */
    ruledefault_valueEx: ;
    retval.stop = LT(-1);

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end default_value */

/** 
 * $ANTLR start numeric_type
 * PBJ.g:356:1: numeric_type : ( UINT32 | INT32 | SINT32 | FIXED32 | SFIXED32 | UINT64 | INT64 | SINT64 | FIXED64 | SFIXED64 | FLOAT | DOUBLE | BOOL );
 */
static PBJParser_numeric_type_return
numeric_type(pPBJParser ctx)
{   
    PBJParser_numeric_type_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    set104;

    pANTLR3_BASE_TREE set104_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    set104       = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    set104_tree   = NULL;


    retval.tree  = NULL;
    {
        // PBJ.g:356:13: ( UINT32 | INT32 | SINT32 | FIXED32 | SFIXED32 | UINT64 | INT64 | SINT64 | FIXED64 | SFIXED64 | FLOAT | DOUBLE | BOOL )
        // PBJ.g:
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            set104=(pANTLR3_COMMON_TOKEN)LT(1);
            if ( ((LA(1) >= UINT32) && (LA(1) <= BOOL)) )
            {
                CONSUME();
                ADAPTOR->addChild(ADAPTOR, root_0, (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, set104)));
                PERRORRECOVERY=ANTLR3_FALSE;
            }
            else 
            {
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
                EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;
                EXCEPTION->expectingSet = &FOLLOW_set_in_numeric_type0;
                RECOVERFROMMISMATCHEDSET(&FOLLOW_set_in_numeric_type0);    goto rulenumeric_typeEx;
            }


        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulenumeric_typeEx; /* Prevent compiler warnings */
    rulenumeric_typeEx: ;
    retval.stop = LT(-1);

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end numeric_type */

/** 
 * $ANTLR start array_type
 * PBJ.g:370:1: array_type : ( STRING | BYTES );
 */
static PBJParser_array_type_return
array_type(pPBJParser ctx)
{   
    PBJParser_array_type_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    set105;

    pANTLR3_BASE_TREE set105_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    set105       = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    set105_tree   = NULL;


    retval.tree  = NULL;
    {
        // PBJ.g:370:11: ( STRING | BYTES )
        // PBJ.g:
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            set105=(pANTLR3_COMMON_TOKEN)LT(1);
            if ( ((LA(1) >= STRING) && (LA(1) <= BYTES)) )
            {
                CONSUME();
                ADAPTOR->addChild(ADAPTOR, root_0, (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, set105)));
                PERRORRECOVERY=ANTLR3_FALSE;
            }
            else 
            {
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
                EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;
                EXCEPTION->expectingSet = &FOLLOW_set_in_array_type0;
                RECOVERFROMMISMATCHEDSET(&FOLLOW_set_in_array_type0);    goto rulearray_typeEx;
            }


        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulearray_typeEx; /* Prevent compiler warnings */
    rulearray_typeEx: ;
    retval.stop = LT(-1);

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end array_type */

/** 
 * $ANTLR start multiplicitive_advanced_type
 * PBJ.g:374:1: multiplicitive_advanced_type : ( | NORMAL -> FLOAT[\"float\"] | VECTOR2F -> FLOAT[\"float\"] | VECTOR2D -> DOUBLE[\"double\"] | VECTOR3F -> FLOAT[\"float\"] | VECTOR3D -> DOUBLE[\"double\"] | VECTOR4F -> FLOAT[\"float\"] | VECTOR4D -> DOUBLE[\"double\"] | QUATERNION -> FLOAT[\"float\"] | BOUNDINGSPHERE3F -> FLOAT[\"float\"] | BOUNDINGSPHERE3D -> DOUBLE[\"double\"] | BOUNDINGBOX3F3F -> FLOAT[\"float\"] | BOUNDINGBOX3D3F -> DOUBLE[\"double\"] );
 */
static PBJParser_multiplicitive_advanced_type_return
multiplicitive_advanced_type(pPBJParser ctx)
{   
    PBJParser_multiplicitive_advanced_type_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    NORMAL106;
    pANTLR3_COMMON_TOKEN    VECTOR2F107;
    pANTLR3_COMMON_TOKEN    VECTOR2D108;
    pANTLR3_COMMON_TOKEN    VECTOR3F109;
    pANTLR3_COMMON_TOKEN    VECTOR3D110;
    pANTLR3_COMMON_TOKEN    VECTOR4F111;
    pANTLR3_COMMON_TOKEN    VECTOR4D112;
    pANTLR3_COMMON_TOKEN    QUATERNION113;
    pANTLR3_COMMON_TOKEN    BOUNDINGSPHERE3F114;
    pANTLR3_COMMON_TOKEN    BOUNDINGSPHERE3D115;
    pANTLR3_COMMON_TOKEN    BOUNDINGBOX3F3F116;
    pANTLR3_COMMON_TOKEN    BOUNDINGBOX3D3F117;

    pANTLR3_BASE_TREE NORMAL106_tree;
    pANTLR3_BASE_TREE VECTOR2F107_tree;
    pANTLR3_BASE_TREE VECTOR2D108_tree;
    pANTLR3_BASE_TREE VECTOR3F109_tree;
    pANTLR3_BASE_TREE VECTOR3D110_tree;
    pANTLR3_BASE_TREE VECTOR4F111_tree;
    pANTLR3_BASE_TREE VECTOR4D112_tree;
    pANTLR3_BASE_TREE QUATERNION113_tree;
    pANTLR3_BASE_TREE BOUNDINGSPHERE3F114_tree;
    pANTLR3_BASE_TREE BOUNDINGSPHERE3D115_tree;
    pANTLR3_BASE_TREE BOUNDINGBOX3F3F116_tree;
    pANTLR3_BASE_TREE BOUNDINGBOX3D3F117_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_BOUNDINGSPHERE3D;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_VECTOR4D;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_BOUNDINGBOX3F3F;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_QUATERNION;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_BOUNDINGSPHERE3F;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_VECTOR4F;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_VECTOR2D;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_NORMAL;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_VECTOR3F;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_VECTOR2F;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_VECTOR3D;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_BOUNDINGBOX3D3F;

    /* Initialize rule variables
     */


    root_0 = NULL;

    NORMAL106       = NULL;
    VECTOR2F107       = NULL;
    VECTOR2D108       = NULL;
    VECTOR3F109       = NULL;
    VECTOR3D110       = NULL;
    VECTOR4F111       = NULL;
    VECTOR4D112       = NULL;
    QUATERNION113       = NULL;
    BOUNDINGSPHERE3F114       = NULL;
    BOUNDINGSPHERE3D115       = NULL;
    BOUNDINGBOX3F3F116       = NULL;
    BOUNDINGBOX3D3F117       = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    NORMAL106_tree   = NULL;
    VECTOR2F107_tree   = NULL;
    VECTOR2D108_tree   = NULL;
    VECTOR3F109_tree   = NULL;
    VECTOR3D110_tree   = NULL;
    VECTOR4F111_tree   = NULL;
    VECTOR4D112_tree   = NULL;
    QUATERNION113_tree   = NULL;
    BOUNDINGSPHERE3F114_tree   = NULL;
    BOUNDINGSPHERE3D115_tree   = NULL;
    BOUNDINGBOX3F3F116_tree   = NULL;
    BOUNDINGBOX3D3F117_tree   = NULL;

    stream_BOUNDINGSPHERE3D   = NULL;
    #define CREATE_stream_BOUNDINGSPHERE3D  if (stream_BOUNDINGSPHERE3D == NULL) {stream_BOUNDINGSPHERE3D = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token BOUNDINGSPHERE3D"); } 
    stream_VECTOR4D   = NULL;
    #define CREATE_stream_VECTOR4D  if (stream_VECTOR4D == NULL) {stream_VECTOR4D = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token VECTOR4D"); } 
    stream_BOUNDINGBOX3F3F   = NULL;
    #define CREATE_stream_BOUNDINGBOX3F3F  if (stream_BOUNDINGBOX3F3F == NULL) {stream_BOUNDINGBOX3F3F = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token BOUNDINGBOX3F3F"); } 
    stream_QUATERNION   = NULL;
    #define CREATE_stream_QUATERNION  if (stream_QUATERNION == NULL) {stream_QUATERNION = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token QUATERNION"); } 
    stream_BOUNDINGSPHERE3F   = NULL;
    #define CREATE_stream_BOUNDINGSPHERE3F  if (stream_BOUNDINGSPHERE3F == NULL) {stream_BOUNDINGSPHERE3F = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token BOUNDINGSPHERE3F"); } 
    stream_VECTOR4F   = NULL;
    #define CREATE_stream_VECTOR4F  if (stream_VECTOR4F == NULL) {stream_VECTOR4F = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token VECTOR4F"); } 
    stream_VECTOR2D   = NULL;
    #define CREATE_stream_VECTOR2D  if (stream_VECTOR2D == NULL) {stream_VECTOR2D = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token VECTOR2D"); } 
    stream_NORMAL   = NULL;
    #define CREATE_stream_NORMAL  if (stream_NORMAL == NULL) {stream_NORMAL = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token NORMAL"); } 
    stream_VECTOR3F   = NULL;
    #define CREATE_stream_VECTOR3F  if (stream_VECTOR3F == NULL) {stream_VECTOR3F = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token VECTOR3F"); } 
    stream_VECTOR2F   = NULL;
    #define CREATE_stream_VECTOR2F  if (stream_VECTOR2F == NULL) {stream_VECTOR2F = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token VECTOR2F"); } 
    stream_VECTOR3D   = NULL;
    #define CREATE_stream_VECTOR3D  if (stream_VECTOR3D == NULL) {stream_VECTOR3D = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token VECTOR3D"); } 
    stream_BOUNDINGBOX3D3F   = NULL;
    #define CREATE_stream_BOUNDINGBOX3D3F  if (stream_BOUNDINGBOX3D3F == NULL) {stream_BOUNDINGBOX3D3F = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token BOUNDINGBOX3D3F"); } 

    retval.tree  = NULL;
    {
        {
            //  PBJ.g:374:29: ( | NORMAL -> FLOAT[\"float\"] | VECTOR2F -> FLOAT[\"float\"] | VECTOR2D -> DOUBLE[\"double\"] | VECTOR3F -> FLOAT[\"float\"] | VECTOR3D -> DOUBLE[\"double\"] | VECTOR4F -> FLOAT[\"float\"] | VECTOR4D -> DOUBLE[\"double\"] | QUATERNION -> FLOAT[\"float\"] | BOUNDINGSPHERE3F -> FLOAT[\"float\"] | BOUNDINGSPHERE3D -> DOUBLE[\"double\"] | BOUNDINGBOX3F3F -> FLOAT[\"float\"] | BOUNDINGBOX3D3F -> DOUBLE[\"double\"] )
            
            ANTLR3_UINT32 alt21;

            alt21=13;

            switch ( LA(1) ) 
            {
            case IDENTIFIER:
            	{
            		alt21=1;
            	}
                break;
            case NORMAL:
            	{
            		alt21=2;
            	}
                break;
            case VECTOR2F:
            	{
            		alt21=3;
            	}
                break;
            case VECTOR2D:
            	{
            		alt21=4;
            	}
                break;
            case VECTOR3F:
            	{
            		alt21=5;
            	}
                break;
            case VECTOR3D:
            	{
            		alt21=6;
            	}
                break;
            case VECTOR4F:
            	{
            		alt21=7;
            	}
                break;
            case VECTOR4D:
            	{
            		alt21=8;
            	}
                break;
            case QUATERNION:
            	{
            		alt21=9;
            	}
                break;
            case BOUNDINGSPHERE3F:
            	{
            		alt21=10;
            	}
                break;
            case BOUNDINGSPHERE3D:
            	{
            		alt21=11;
            	}
                break;
            case BOUNDINGBOX3F3F:
            	{
            		alt21=12;
            	}
                break;
            case BOUNDINGBOX3D3F:
            	{
            		alt21=13;
            	}
                break;

            default:
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 21;
                EXCEPTION->state        = 0;


                goto rulemultiplicitive_advanced_typeEx;
            }

            switch (alt21) 
            {
        	case 1:
        	    // PBJ.g:375:5: 
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	    }
        	    break;
        	case 2:
        	    // PBJ.g:375:9: NORMAL
        	    {
        	        NORMAL106 = (pANTLR3_COMMON_TOKEN) MATCHT(NORMAL, &FOLLOW_NORMAL_in_multiplicitive_advanced_type1777); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemultiplicitive_advanced_typeEx;
        	        }
        	         
        	        CREATE_stream_NORMAL; stream_NORMAL->add(stream_NORMAL, NORMAL106, NULL);


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 375:16: -> FLOAT[\"float\"]
        	        	{
        	        	    ADAPTOR->addChild(ADAPTOR, root_0, 
        	        	    #if 1 == 2
        	        	    	(pANTLR3_BASE_TREE)ADAPTOR->createTypeTokenText(ADAPTOR, FLOAT, TOKTEXT("float"))
        	        	    #else
        	        	    	(pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, FLOAT, (pANTLR3_UINT8)"float")
        	        	    #endif
        	        	    );

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 3:
        	    // PBJ.g:376:9: VECTOR2F
        	    {
        	        VECTOR2F107 = (pANTLR3_COMMON_TOKEN) MATCHT(VECTOR2F, &FOLLOW_VECTOR2F_in_multiplicitive_advanced_type1792); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemultiplicitive_advanced_typeEx;
        	        }
        	         
        	        CREATE_stream_VECTOR2F; stream_VECTOR2F->add(stream_VECTOR2F, VECTOR2F107, NULL);


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 376:18: -> FLOAT[\"float\"]
        	        	{
        	        	    ADAPTOR->addChild(ADAPTOR, root_0, 
        	        	    #if 1 == 2
        	        	    	(pANTLR3_BASE_TREE)ADAPTOR->createTypeTokenText(ADAPTOR, FLOAT, TOKTEXT("float"))
        	        	    #else
        	        	    	(pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, FLOAT, (pANTLR3_UINT8)"float")
        	        	    #endif
        	        	    );

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 4:
        	    // PBJ.g:377:9: VECTOR2D
        	    {
        	        VECTOR2D108 = (pANTLR3_COMMON_TOKEN) MATCHT(VECTOR2D, &FOLLOW_VECTOR2D_in_multiplicitive_advanced_type1807); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemultiplicitive_advanced_typeEx;
        	        }
        	         
        	        CREATE_stream_VECTOR2D; stream_VECTOR2D->add(stream_VECTOR2D, VECTOR2D108, NULL);


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 377:18: -> DOUBLE[\"double\"]
        	        	{
        	        	    ADAPTOR->addChild(ADAPTOR, root_0, 
        	        	    #if 1 == 2
        	        	    	(pANTLR3_BASE_TREE)ADAPTOR->createTypeTokenText(ADAPTOR, DOUBLE, TOKTEXT("double"))
        	        	    #else
        	        	    	(pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, DOUBLE, (pANTLR3_UINT8)"double")
        	        	    #endif
        	        	    );

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 5:
        	    // PBJ.g:378:9: VECTOR3F
        	    {
        	        VECTOR3F109 = (pANTLR3_COMMON_TOKEN) MATCHT(VECTOR3F, &FOLLOW_VECTOR3F_in_multiplicitive_advanced_type1822); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemultiplicitive_advanced_typeEx;
        	        }
        	         
        	        CREATE_stream_VECTOR3F; stream_VECTOR3F->add(stream_VECTOR3F, VECTOR3F109, NULL);


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 378:18: -> FLOAT[\"float\"]
        	        	{
        	        	    ADAPTOR->addChild(ADAPTOR, root_0, 
        	        	    #if 1 == 2
        	        	    	(pANTLR3_BASE_TREE)ADAPTOR->createTypeTokenText(ADAPTOR, FLOAT, TOKTEXT("float"))
        	        	    #else
        	        	    	(pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, FLOAT, (pANTLR3_UINT8)"float")
        	        	    #endif
        	        	    );

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 6:
        	    // PBJ.g:379:9: VECTOR3D
        	    {
        	        VECTOR3D110 = (pANTLR3_COMMON_TOKEN) MATCHT(VECTOR3D, &FOLLOW_VECTOR3D_in_multiplicitive_advanced_type1837); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemultiplicitive_advanced_typeEx;
        	        }
        	         
        	        CREATE_stream_VECTOR3D; stream_VECTOR3D->add(stream_VECTOR3D, VECTOR3D110, NULL);


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 379:18: -> DOUBLE[\"double\"]
        	        	{
        	        	    ADAPTOR->addChild(ADAPTOR, root_0, 
        	        	    #if 1 == 2
        	        	    	(pANTLR3_BASE_TREE)ADAPTOR->createTypeTokenText(ADAPTOR, DOUBLE, TOKTEXT("double"))
        	        	    #else
        	        	    	(pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, DOUBLE, (pANTLR3_UINT8)"double")
        	        	    #endif
        	        	    );

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 7:
        	    // PBJ.g:380:9: VECTOR4F
        	    {
        	        VECTOR4F111 = (pANTLR3_COMMON_TOKEN) MATCHT(VECTOR4F, &FOLLOW_VECTOR4F_in_multiplicitive_advanced_type1852); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemultiplicitive_advanced_typeEx;
        	        }
        	         
        	        CREATE_stream_VECTOR4F; stream_VECTOR4F->add(stream_VECTOR4F, VECTOR4F111, NULL);


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 380:18: -> FLOAT[\"float\"]
        	        	{
        	        	    ADAPTOR->addChild(ADAPTOR, root_0, 
        	        	    #if 1 == 2
        	        	    	(pANTLR3_BASE_TREE)ADAPTOR->createTypeTokenText(ADAPTOR, FLOAT, TOKTEXT("float"))
        	        	    #else
        	        	    	(pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, FLOAT, (pANTLR3_UINT8)"float")
        	        	    #endif
        	        	    );

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 8:
        	    // PBJ.g:381:9: VECTOR4D
        	    {
        	        VECTOR4D112 = (pANTLR3_COMMON_TOKEN) MATCHT(VECTOR4D, &FOLLOW_VECTOR4D_in_multiplicitive_advanced_type1867); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemultiplicitive_advanced_typeEx;
        	        }
        	         
        	        CREATE_stream_VECTOR4D; stream_VECTOR4D->add(stream_VECTOR4D, VECTOR4D112, NULL);


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 381:18: -> DOUBLE[\"double\"]
        	        	{
        	        	    ADAPTOR->addChild(ADAPTOR, root_0, 
        	        	    #if 1 == 2
        	        	    	(pANTLR3_BASE_TREE)ADAPTOR->createTypeTokenText(ADAPTOR, DOUBLE, TOKTEXT("double"))
        	        	    #else
        	        	    	(pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, DOUBLE, (pANTLR3_UINT8)"double")
        	        	    #endif
        	        	    );

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 9:
        	    // PBJ.g:382:9: QUATERNION
        	    {
        	        QUATERNION113 = (pANTLR3_COMMON_TOKEN) MATCHT(QUATERNION, &FOLLOW_QUATERNION_in_multiplicitive_advanced_type1882); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemultiplicitive_advanced_typeEx;
        	        }
        	         
        	        CREATE_stream_QUATERNION; stream_QUATERNION->add(stream_QUATERNION, QUATERNION113, NULL);


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 382:20: -> FLOAT[\"float\"]
        	        	{
        	        	    ADAPTOR->addChild(ADAPTOR, root_0, 
        	        	    #if 1 == 2
        	        	    	(pANTLR3_BASE_TREE)ADAPTOR->createTypeTokenText(ADAPTOR, FLOAT, TOKTEXT("float"))
        	        	    #else
        	        	    	(pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, FLOAT, (pANTLR3_UINT8)"float")
        	        	    #endif
        	        	    );

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 10:
        	    // PBJ.g:383:9: BOUNDINGSPHERE3F
        	    {
        	        BOUNDINGSPHERE3F114 = (pANTLR3_COMMON_TOKEN) MATCHT(BOUNDINGSPHERE3F, &FOLLOW_BOUNDINGSPHERE3F_in_multiplicitive_advanced_type1897); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemultiplicitive_advanced_typeEx;
        	        }
        	         
        	        CREATE_stream_BOUNDINGSPHERE3F; stream_BOUNDINGSPHERE3F->add(stream_BOUNDINGSPHERE3F, BOUNDINGSPHERE3F114, NULL);


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 383:26: -> FLOAT[\"float\"]
        	        	{
        	        	    ADAPTOR->addChild(ADAPTOR, root_0, 
        	        	    #if 1 == 2
        	        	    	(pANTLR3_BASE_TREE)ADAPTOR->createTypeTokenText(ADAPTOR, FLOAT, TOKTEXT("float"))
        	        	    #else
        	        	    	(pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, FLOAT, (pANTLR3_UINT8)"float")
        	        	    #endif
        	        	    );

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 11:
        	    // PBJ.g:384:9: BOUNDINGSPHERE3D
        	    {
        	        BOUNDINGSPHERE3D115 = (pANTLR3_COMMON_TOKEN) MATCHT(BOUNDINGSPHERE3D, &FOLLOW_BOUNDINGSPHERE3D_in_multiplicitive_advanced_type1912); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemultiplicitive_advanced_typeEx;
        	        }
        	         
        	        CREATE_stream_BOUNDINGSPHERE3D; stream_BOUNDINGSPHERE3D->add(stream_BOUNDINGSPHERE3D, BOUNDINGSPHERE3D115, NULL);


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 384:26: -> DOUBLE[\"double\"]
        	        	{
        	        	    ADAPTOR->addChild(ADAPTOR, root_0, 
        	        	    #if 1 == 2
        	        	    	(pANTLR3_BASE_TREE)ADAPTOR->createTypeTokenText(ADAPTOR, DOUBLE, TOKTEXT("double"))
        	        	    #else
        	        	    	(pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, DOUBLE, (pANTLR3_UINT8)"double")
        	        	    #endif
        	        	    );

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 12:
        	    // PBJ.g:385:9: BOUNDINGBOX3F3F
        	    {
        	        BOUNDINGBOX3F3F116 = (pANTLR3_COMMON_TOKEN) MATCHT(BOUNDINGBOX3F3F, &FOLLOW_BOUNDINGBOX3F3F_in_multiplicitive_advanced_type1927); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemultiplicitive_advanced_typeEx;
        	        }
        	         
        	        CREATE_stream_BOUNDINGBOX3F3F; stream_BOUNDINGBOX3F3F->add(stream_BOUNDINGBOX3F3F, BOUNDINGBOX3F3F116, NULL);


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 385:25: -> FLOAT[\"float\"]
        	        	{
        	        	    ADAPTOR->addChild(ADAPTOR, root_0, 
        	        	    #if 1 == 2
        	        	    	(pANTLR3_BASE_TREE)ADAPTOR->createTypeTokenText(ADAPTOR, FLOAT, TOKTEXT("float"))
        	        	    #else
        	        	    	(pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, FLOAT, (pANTLR3_UINT8)"float")
        	        	    #endif
        	        	    );

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 13:
        	    // PBJ.g:386:9: BOUNDINGBOX3D3F
        	    {
        	        BOUNDINGBOX3D3F117 = (pANTLR3_COMMON_TOKEN) MATCHT(BOUNDINGBOX3D3F, &FOLLOW_BOUNDINGBOX3D3F_in_multiplicitive_advanced_type1942); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulemultiplicitive_advanced_typeEx;
        	        }
        	         
        	        CREATE_stream_BOUNDINGBOX3D3F; stream_BOUNDINGBOX3D3F->add(stream_BOUNDINGBOX3D3F, BOUNDINGBOX3D3F117, NULL);


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 386:25: -> DOUBLE[\"double\"]
        	        	{
        	        	    ADAPTOR->addChild(ADAPTOR, root_0, 
        	        	    #if 1 == 2
        	        	    	(pANTLR3_BASE_TREE)ADAPTOR->createTypeTokenText(ADAPTOR, DOUBLE, TOKTEXT("double"))
        	        	    #else
        	        	    	(pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, DOUBLE, (pANTLR3_UINT8)"double")
        	        	    #endif
        	        	    );

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulemultiplicitive_advanced_typeEx; /* Prevent compiler warnings */
    rulemultiplicitive_advanced_typeEx: ;
    retval.stop = LT(-1);

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_BOUNDINGSPHERE3D != NULL) stream_BOUNDINGSPHERE3D->free(stream_BOUNDINGSPHERE3D);
        if (stream_VECTOR4D != NULL) stream_VECTOR4D->free(stream_VECTOR4D);
        if (stream_BOUNDINGBOX3F3F != NULL) stream_BOUNDINGBOX3F3F->free(stream_BOUNDINGBOX3F3F);
        if (stream_QUATERNION != NULL) stream_QUATERNION->free(stream_QUATERNION);
        if (stream_BOUNDINGSPHERE3F != NULL) stream_BOUNDINGSPHERE3F->free(stream_BOUNDINGSPHERE3F);
        if (stream_VECTOR4F != NULL) stream_VECTOR4F->free(stream_VECTOR4F);
        if (stream_VECTOR2D != NULL) stream_VECTOR2D->free(stream_VECTOR2D);
        if (stream_NORMAL != NULL) stream_NORMAL->free(stream_NORMAL);
        if (stream_VECTOR3F != NULL) stream_VECTOR3F->free(stream_VECTOR3F);
        if (stream_VECTOR2F != NULL) stream_VECTOR2F->free(stream_VECTOR2F);
        if (stream_VECTOR3D != NULL) stream_VECTOR3D->free(stream_VECTOR3D);
        if (stream_BOUNDINGBOX3D3F != NULL) stream_BOUNDINGBOX3D3F->free(stream_BOUNDINGBOX3D3F);

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end multiplicitive_advanced_type */

/** 
 * $ANTLR start advanced_numeric_type
 * PBJ.g:389:1: advanced_numeric_type : ( UINT8 -> UINT32[\"uint32\"] | INT8 -> INT32[\"int32\"] | SINT8 -> SINT32[\"sint32\"] | FIXED8 -> INT32[\"uint32\"] | SFIXED8 -> INT32[\"sint32\"] | INT16 -> INT32[\"int32\"] | SINT16 -> SINT32[\"sint32\"] | FIXED16 -> INT32[\"uint32\"] | SFIXED16 -> INT32[\"sint32\"] | UINT16 -> UINT32[\"uint32\"] | ANGLE -> FLOAT[\"float\"] | TIME -> FIXED64[\"fixed64\"] | DURATION -> SFIXED64[\"sfixed64\"] );
 */
static PBJParser_advanced_numeric_type_return
advanced_numeric_type(pPBJParser ctx)
{   
    PBJParser_advanced_numeric_type_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    UINT8118;
    pANTLR3_COMMON_TOKEN    INT8119;
    pANTLR3_COMMON_TOKEN    SINT8120;
    pANTLR3_COMMON_TOKEN    FIXED8121;
    pANTLR3_COMMON_TOKEN    SFIXED8122;
    pANTLR3_COMMON_TOKEN    INT16123;
    pANTLR3_COMMON_TOKEN    SINT16124;
    pANTLR3_COMMON_TOKEN    FIXED16125;
    pANTLR3_COMMON_TOKEN    SFIXED16126;
    pANTLR3_COMMON_TOKEN    UINT16127;
    pANTLR3_COMMON_TOKEN    ANGLE128;
    pANTLR3_COMMON_TOKEN    TIME129;
    pANTLR3_COMMON_TOKEN    DURATION130;

    pANTLR3_BASE_TREE UINT8118_tree;
    pANTLR3_BASE_TREE INT8119_tree;
    pANTLR3_BASE_TREE SINT8120_tree;
    pANTLR3_BASE_TREE FIXED8121_tree;
    pANTLR3_BASE_TREE SFIXED8122_tree;
    pANTLR3_BASE_TREE INT16123_tree;
    pANTLR3_BASE_TREE SINT16124_tree;
    pANTLR3_BASE_TREE FIXED16125_tree;
    pANTLR3_BASE_TREE SFIXED16126_tree;
    pANTLR3_BASE_TREE UINT16127_tree;
    pANTLR3_BASE_TREE ANGLE128_tree;
    pANTLR3_BASE_TREE TIME129_tree;
    pANTLR3_BASE_TREE DURATION130_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_SINT16;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_TIME;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_SINT8;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_UINT8;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_ANGLE;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_FIXED16;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_SFIXED16;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_UINT16;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_INT8;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_FIXED8;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_SFIXED8;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_DURATION;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_INT16;

    /* Initialize rule variables
     */


    root_0 = NULL;

    UINT8118       = NULL;
    INT8119       = NULL;
    SINT8120       = NULL;
    FIXED8121       = NULL;
    SFIXED8122       = NULL;
    INT16123       = NULL;
    SINT16124       = NULL;
    FIXED16125       = NULL;
    SFIXED16126       = NULL;
    UINT16127       = NULL;
    ANGLE128       = NULL;
    TIME129       = NULL;
    DURATION130       = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    UINT8118_tree   = NULL;
    INT8119_tree   = NULL;
    SINT8120_tree   = NULL;
    FIXED8121_tree   = NULL;
    SFIXED8122_tree   = NULL;
    INT16123_tree   = NULL;
    SINT16124_tree   = NULL;
    FIXED16125_tree   = NULL;
    SFIXED16126_tree   = NULL;
    UINT16127_tree   = NULL;
    ANGLE128_tree   = NULL;
    TIME129_tree   = NULL;
    DURATION130_tree   = NULL;

    stream_SINT16   = NULL;
    #define CREATE_stream_SINT16  if (stream_SINT16 == NULL) {stream_SINT16 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token SINT16"); } 
    stream_TIME   = NULL;
    #define CREATE_stream_TIME  if (stream_TIME == NULL) {stream_TIME = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token TIME"); } 
    stream_SINT8   = NULL;
    #define CREATE_stream_SINT8  if (stream_SINT8 == NULL) {stream_SINT8 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token SINT8"); } 
    stream_UINT8   = NULL;
    #define CREATE_stream_UINT8  if (stream_UINT8 == NULL) {stream_UINT8 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token UINT8"); } 
    stream_ANGLE   = NULL;
    #define CREATE_stream_ANGLE  if (stream_ANGLE == NULL) {stream_ANGLE = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token ANGLE"); } 
    stream_FIXED16   = NULL;
    #define CREATE_stream_FIXED16  if (stream_FIXED16 == NULL) {stream_FIXED16 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token FIXED16"); } 
    stream_SFIXED16   = NULL;
    #define CREATE_stream_SFIXED16  if (stream_SFIXED16 == NULL) {stream_SFIXED16 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token SFIXED16"); } 
    stream_UINT16   = NULL;
    #define CREATE_stream_UINT16  if (stream_UINT16 == NULL) {stream_UINT16 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token UINT16"); } 
    stream_INT8   = NULL;
    #define CREATE_stream_INT8  if (stream_INT8 == NULL) {stream_INT8 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token INT8"); } 
    stream_FIXED8   = NULL;
    #define CREATE_stream_FIXED8  if (stream_FIXED8 == NULL) {stream_FIXED8 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token FIXED8"); } 
    stream_SFIXED8   = NULL;
    #define CREATE_stream_SFIXED8  if (stream_SFIXED8 == NULL) {stream_SFIXED8 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token SFIXED8"); } 
    stream_DURATION   = NULL;
    #define CREATE_stream_DURATION  if (stream_DURATION == NULL) {stream_DURATION = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token DURATION"); } 
    stream_INT16   = NULL;
    #define CREATE_stream_INT16  if (stream_INT16 == NULL) {stream_INT16 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token INT16"); } 

    retval.tree  = NULL;
    {
        {
            //  PBJ.g:389:22: ( UINT8 -> UINT32[\"uint32\"] | INT8 -> INT32[\"int32\"] | SINT8 -> SINT32[\"sint32\"] | FIXED8 -> INT32[\"uint32\"] | SFIXED8 -> INT32[\"sint32\"] | INT16 -> INT32[\"int32\"] | SINT16 -> SINT32[\"sint32\"] | FIXED16 -> INT32[\"uint32\"] | SFIXED16 -> INT32[\"sint32\"] | UINT16 -> UINT32[\"uint32\"] | ANGLE -> FLOAT[\"float\"] | TIME -> FIXED64[\"fixed64\"] | DURATION -> SFIXED64[\"sfixed64\"] )
            
            ANTLR3_UINT32 alt22;

            alt22=13;

            switch ( LA(1) ) 
            {
            case UINT8:
            	{
            		alt22=1;
            	}
                break;
            case INT8:
            	{
            		alt22=2;
            	}
                break;
            case SINT8:
            	{
            		alt22=3;
            	}
                break;
            case FIXED8:
            	{
            		alt22=4;
            	}
                break;
            case SFIXED8:
            	{
            		alt22=5;
            	}
                break;
            case INT16:
            	{
            		alt22=6;
            	}
                break;
            case SINT16:
            	{
            		alt22=7;
            	}
                break;
            case FIXED16:
            	{
            		alt22=8;
            	}
                break;
            case SFIXED16:
            	{
            		alt22=9;
            	}
                break;
            case UINT16:
            	{
            		alt22=10;
            	}
                break;
            case ANGLE:
            	{
            		alt22=11;
            	}
                break;
            case TIME:
            	{
            		alt22=12;
            	}
                break;
            case DURATION:
            	{
            		alt22=13;
            	}
                break;

            default:
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 22;
                EXCEPTION->state        = 0;


                goto ruleadvanced_numeric_typeEx;
            }

            switch (alt22) 
            {
        	case 1:
        	    // PBJ.g:389:24: UINT8
        	    {
        	        UINT8118 = (pANTLR3_COMMON_TOKEN) MATCHT(UINT8, &FOLLOW_UINT8_in_advanced_numeric_type1959); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleadvanced_numeric_typeEx;
        	        }
        	         
        	        CREATE_stream_UINT8; stream_UINT8->add(stream_UINT8, UINT8118, NULL);


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 389:30: -> UINT32[\"uint32\"]
        	        	{
        	        	    ADAPTOR->addChild(ADAPTOR, root_0, 
        	        	    #if 1 == 2
        	        	    	(pANTLR3_BASE_TREE)ADAPTOR->createTypeTokenText(ADAPTOR, UINT32, TOKTEXT("uint32"))
        	        	    #else
        	        	    	(pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, UINT32, (pANTLR3_UINT8)"uint32")
        	        	    #endif
        	        	    );

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 2:
        	    // PBJ.g:390:4: INT8
        	    {
        	        INT8119 = (pANTLR3_COMMON_TOKEN) MATCHT(INT8, &FOLLOW_INT8_in_advanced_numeric_type1969); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleadvanced_numeric_typeEx;
        	        }
        	         
        	        CREATE_stream_INT8; stream_INT8->add(stream_INT8, INT8119, NULL);


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 390:9: -> INT32[\"int32\"]
        	        	{
        	        	    ADAPTOR->addChild(ADAPTOR, root_0, 
        	        	    #if 1 == 2
        	        	    	(pANTLR3_BASE_TREE)ADAPTOR->createTypeTokenText(ADAPTOR, INT32, TOKTEXT("int32"))
        	        	    #else
        	        	    	(pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, INT32, (pANTLR3_UINT8)"int32")
        	        	    #endif
        	        	    );

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 3:
        	    // PBJ.g:391:4: SINT8
        	    {
        	        SINT8120 = (pANTLR3_COMMON_TOKEN) MATCHT(SINT8, &FOLLOW_SINT8_in_advanced_numeric_type1979); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleadvanced_numeric_typeEx;
        	        }
        	         
        	        CREATE_stream_SINT8; stream_SINT8->add(stream_SINT8, SINT8120, NULL);


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 391:10: -> SINT32[\"sint32\"]
        	        	{
        	        	    ADAPTOR->addChild(ADAPTOR, root_0, 
        	        	    #if 1 == 2
        	        	    	(pANTLR3_BASE_TREE)ADAPTOR->createTypeTokenText(ADAPTOR, SINT32, TOKTEXT("sint32"))
        	        	    #else
        	        	    	(pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, SINT32, (pANTLR3_UINT8)"sint32")
        	        	    #endif
        	        	    );

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 4:
        	    // PBJ.g:392:4: FIXED8
        	    {
        	        FIXED8121 = (pANTLR3_COMMON_TOKEN) MATCHT(FIXED8, &FOLLOW_FIXED8_in_advanced_numeric_type1989); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleadvanced_numeric_typeEx;
        	        }
        	         
        	        CREATE_stream_FIXED8; stream_FIXED8->add(stream_FIXED8, FIXED8121, NULL);


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 392:11: -> INT32[\"uint32\"]
        	        	{
        	        	    ADAPTOR->addChild(ADAPTOR, root_0, 
        	        	    #if 1 == 2
        	        	    	(pANTLR3_BASE_TREE)ADAPTOR->createTypeTokenText(ADAPTOR, INT32, TOKTEXT("uint32"))
        	        	    #else
        	        	    	(pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, INT32, (pANTLR3_UINT8)"uint32")
        	        	    #endif
        	        	    );

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 5:
        	    // PBJ.g:393:4: SFIXED8
        	    {
        	        SFIXED8122 = (pANTLR3_COMMON_TOKEN) MATCHT(SFIXED8, &FOLLOW_SFIXED8_in_advanced_numeric_type1999); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleadvanced_numeric_typeEx;
        	        }
        	         
        	        CREATE_stream_SFIXED8; stream_SFIXED8->add(stream_SFIXED8, SFIXED8122, NULL);


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 393:12: -> INT32[\"sint32\"]
        	        	{
        	        	    ADAPTOR->addChild(ADAPTOR, root_0, 
        	        	    #if 1 == 2
        	        	    	(pANTLR3_BASE_TREE)ADAPTOR->createTypeTokenText(ADAPTOR, INT32, TOKTEXT("sint32"))
        	        	    #else
        	        	    	(pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, INT32, (pANTLR3_UINT8)"sint32")
        	        	    #endif
        	        	    );

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 6:
        	    // PBJ.g:394:4: INT16
        	    {
        	        INT16123 = (pANTLR3_COMMON_TOKEN) MATCHT(INT16, &FOLLOW_INT16_in_advanced_numeric_type2009); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleadvanced_numeric_typeEx;
        	        }
        	         
        	        CREATE_stream_INT16; stream_INT16->add(stream_INT16, INT16123, NULL);


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 394:10: -> INT32[\"int32\"]
        	        	{
        	        	    ADAPTOR->addChild(ADAPTOR, root_0, 
        	        	    #if 1 == 2
        	        	    	(pANTLR3_BASE_TREE)ADAPTOR->createTypeTokenText(ADAPTOR, INT32, TOKTEXT("int32"))
        	        	    #else
        	        	    	(pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, INT32, (pANTLR3_UINT8)"int32")
        	        	    #endif
        	        	    );

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 7:
        	    // PBJ.g:395:4: SINT16
        	    {
        	        SINT16124 = (pANTLR3_COMMON_TOKEN) MATCHT(SINT16, &FOLLOW_SINT16_in_advanced_numeric_type2019); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleadvanced_numeric_typeEx;
        	        }
        	         
        	        CREATE_stream_SINT16; stream_SINT16->add(stream_SINT16, SINT16124, NULL);


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 395:11: -> SINT32[\"sint32\"]
        	        	{
        	        	    ADAPTOR->addChild(ADAPTOR, root_0, 
        	        	    #if 1 == 2
        	        	    	(pANTLR3_BASE_TREE)ADAPTOR->createTypeTokenText(ADAPTOR, SINT32, TOKTEXT("sint32"))
        	        	    #else
        	        	    	(pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, SINT32, (pANTLR3_UINT8)"sint32")
        	        	    #endif
        	        	    );

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 8:
        	    // PBJ.g:396:4: FIXED16
        	    {
        	        FIXED16125 = (pANTLR3_COMMON_TOKEN) MATCHT(FIXED16, &FOLLOW_FIXED16_in_advanced_numeric_type2029); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleadvanced_numeric_typeEx;
        	        }
        	         
        	        CREATE_stream_FIXED16; stream_FIXED16->add(stream_FIXED16, FIXED16125, NULL);


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 396:12: -> INT32[\"uint32\"]
        	        	{
        	        	    ADAPTOR->addChild(ADAPTOR, root_0, 
        	        	    #if 1 == 2
        	        	    	(pANTLR3_BASE_TREE)ADAPTOR->createTypeTokenText(ADAPTOR, INT32, TOKTEXT("uint32"))
        	        	    #else
        	        	    	(pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, INT32, (pANTLR3_UINT8)"uint32")
        	        	    #endif
        	        	    );

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 9:
        	    // PBJ.g:397:4: SFIXED16
        	    {
        	        SFIXED16126 = (pANTLR3_COMMON_TOKEN) MATCHT(SFIXED16, &FOLLOW_SFIXED16_in_advanced_numeric_type2039); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleadvanced_numeric_typeEx;
        	        }
        	         
        	        CREATE_stream_SFIXED16; stream_SFIXED16->add(stream_SFIXED16, SFIXED16126, NULL);


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 397:13: -> INT32[\"sint32\"]
        	        	{
        	        	    ADAPTOR->addChild(ADAPTOR, root_0, 
        	        	    #if 1 == 2
        	        	    	(pANTLR3_BASE_TREE)ADAPTOR->createTypeTokenText(ADAPTOR, INT32, TOKTEXT("sint32"))
        	        	    #else
        	        	    	(pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, INT32, (pANTLR3_UINT8)"sint32")
        	        	    #endif
        	        	    );

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 10:
        	    // PBJ.g:398:9: UINT16
        	    {
        	        UINT16127 = (pANTLR3_COMMON_TOKEN) MATCHT(UINT16, &FOLLOW_UINT16_in_advanced_numeric_type2054); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleadvanced_numeric_typeEx;
        	        }
        	         
        	        CREATE_stream_UINT16; stream_UINT16->add(stream_UINT16, UINT16127, NULL);


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 398:16: -> UINT32[\"uint32\"]
        	        	{
        	        	    ADAPTOR->addChild(ADAPTOR, root_0, 
        	        	    #if 1 == 2
        	        	    	(pANTLR3_BASE_TREE)ADAPTOR->createTypeTokenText(ADAPTOR, UINT32, TOKTEXT("uint32"))
        	        	    #else
        	        	    	(pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, UINT32, (pANTLR3_UINT8)"uint32")
        	        	    #endif
        	        	    );

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 11:
        	    // PBJ.g:399:9: ANGLE
        	    {
        	        ANGLE128 = (pANTLR3_COMMON_TOKEN) MATCHT(ANGLE, &FOLLOW_ANGLE_in_advanced_numeric_type2069); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleadvanced_numeric_typeEx;
        	        }
        	         
        	        CREATE_stream_ANGLE; stream_ANGLE->add(stream_ANGLE, ANGLE128, NULL);


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 399:15: -> FLOAT[\"float\"]
        	        	{
        	        	    ADAPTOR->addChild(ADAPTOR, root_0, 
        	        	    #if 1 == 2
        	        	    	(pANTLR3_BASE_TREE)ADAPTOR->createTypeTokenText(ADAPTOR, FLOAT, TOKTEXT("float"))
        	        	    #else
        	        	    	(pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, FLOAT, (pANTLR3_UINT8)"float")
        	        	    #endif
        	        	    );

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 12:
        	    // PBJ.g:400:9: TIME
        	    {
        	        TIME129 = (pANTLR3_COMMON_TOKEN) MATCHT(TIME, &FOLLOW_TIME_in_advanced_numeric_type2084); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleadvanced_numeric_typeEx;
        	        }
        	         
        	        CREATE_stream_TIME; stream_TIME->add(stream_TIME, TIME129, NULL);


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 400:14: -> FIXED64[\"fixed64\"]
        	        	{
        	        	    ADAPTOR->addChild(ADAPTOR, root_0, 
        	        	    #if 1 == 2
        	        	    	(pANTLR3_BASE_TREE)ADAPTOR->createTypeTokenText(ADAPTOR, FIXED64, TOKTEXT("fixed64"))
        	        	    #else
        	        	    	(pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, FIXED64, (pANTLR3_UINT8)"fixed64")
        	        	    #endif
        	        	    );

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 13:
        	    // PBJ.g:401:9: DURATION
        	    {
        	        DURATION130 = (pANTLR3_COMMON_TOKEN) MATCHT(DURATION, &FOLLOW_DURATION_in_advanced_numeric_type2099); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleadvanced_numeric_typeEx;
        	        }
        	         
        	        CREATE_stream_DURATION; stream_DURATION->add(stream_DURATION, DURATION130, NULL);


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 401:18: -> SFIXED64[\"sfixed64\"]
        	        	{
        	        	    ADAPTOR->addChild(ADAPTOR, root_0, 
        	        	    #if 1 == 2
        	        	    	(pANTLR3_BASE_TREE)ADAPTOR->createTypeTokenText(ADAPTOR, SFIXED64, TOKTEXT("sfixed64"))
        	        	    #else
        	        	    	(pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, SFIXED64, (pANTLR3_UINT8)"sfixed64")
        	        	    #endif
        	        	    );

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleadvanced_numeric_typeEx; /* Prevent compiler warnings */
    ruleadvanced_numeric_typeEx: ;
    retval.stop = LT(-1);

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_SINT16 != NULL) stream_SINT16->free(stream_SINT16);
        if (stream_TIME != NULL) stream_TIME->free(stream_TIME);
        if (stream_SINT8 != NULL) stream_SINT8->free(stream_SINT8);
        if (stream_UINT8 != NULL) stream_UINT8->free(stream_UINT8);
        if (stream_ANGLE != NULL) stream_ANGLE->free(stream_ANGLE);
        if (stream_FIXED16 != NULL) stream_FIXED16->free(stream_FIXED16);
        if (stream_SFIXED16 != NULL) stream_SFIXED16->free(stream_SFIXED16);
        if (stream_UINT16 != NULL) stream_UINT16->free(stream_UINT16);
        if (stream_INT8 != NULL) stream_INT8->free(stream_INT8);
        if (stream_FIXED8 != NULL) stream_FIXED8->free(stream_FIXED8);
        if (stream_SFIXED8 != NULL) stream_SFIXED8->free(stream_SFIXED8);
        if (stream_DURATION != NULL) stream_DURATION->free(stream_DURATION);
        if (stream_INT16 != NULL) stream_INT16->free(stream_INT16);

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end advanced_numeric_type */

/** 
 * $ANTLR start advanced_array_type
 * PBJ.g:404:1: advanced_array_type : ( UUID -> BYTES[\"bytes\"] | SHA256 -> BYTES[\"bytes\"] );
 */
static PBJParser_advanced_array_type_return
advanced_array_type(pPBJParser ctx)
{   
    PBJParser_advanced_array_type_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    UUID131;
    pANTLR3_COMMON_TOKEN    SHA256132;

    pANTLR3_BASE_TREE UUID131_tree;
    pANTLR3_BASE_TREE SHA256132_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_SHA256;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_UUID;

    /* Initialize rule variables
     */


    root_0 = NULL;

    UUID131       = NULL;
    SHA256132       = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    UUID131_tree   = NULL;
    SHA256132_tree   = NULL;

    stream_SHA256   = NULL;
    #define CREATE_stream_SHA256  if (stream_SHA256 == NULL) {stream_SHA256 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token SHA256"); } 
    stream_UUID   = NULL;
    #define CREATE_stream_UUID  if (stream_UUID == NULL) {stream_UUID = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token UUID"); } 

    retval.tree  = NULL;
    {
        {
            //  PBJ.g:404:20: ( UUID -> BYTES[\"bytes\"] | SHA256 -> BYTES[\"bytes\"] )
            
            ANTLR3_UINT32 alt23;

            alt23=2;


            {
                int LA23_0 = LA(1);
                if ( (LA23_0 == UUID) ) 
                {
                    alt23=1;
                }
                else if ( (LA23_0 == SHA256) ) 
                {
                    alt23=2;
                }
                else 
                {
                
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 23;
                    EXCEPTION->state        = 0;


                    goto ruleadvanced_array_typeEx;
                }
            }
            switch (alt23) 
            {
        	case 1:
        	    // PBJ.g:404:25: UUID
        	    {
        	        UUID131 = (pANTLR3_COMMON_TOKEN) MATCHT(UUID, &FOLLOW_UUID_in_advanced_array_type2120); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleadvanced_array_typeEx;
        	        }
        	         
        	        CREATE_stream_UUID; stream_UUID->add(stream_UUID, UUID131, NULL);


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 404:30: -> BYTES[\"bytes\"]
        	        	{
        	        	    ADAPTOR->addChild(ADAPTOR, root_0, 
        	        	    #if 1 == 2
        	        	    	(pANTLR3_BASE_TREE)ADAPTOR->createTypeTokenText(ADAPTOR, BYTES, TOKTEXT("bytes"))
        	        	    #else
        	        	    	(pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, BYTES, (pANTLR3_UINT8)"bytes")
        	        	    #endif
        	        	    );

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 2:
        	    // PBJ.g:405:9: SHA256
        	    {
        	        SHA256132 = (pANTLR3_COMMON_TOKEN) MATCHT(SHA256, &FOLLOW_SHA256_in_advanced_array_type2135); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleadvanced_array_typeEx;
        	        }
        	         
        	        CREATE_stream_SHA256; stream_SHA256->add(stream_SHA256, SHA256132, NULL);


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 405:16: -> BYTES[\"bytes\"]
        	        	{
        	        	    ADAPTOR->addChild(ADAPTOR, root_0, 
        	        	    #if 1 == 2
        	        	    	(pANTLR3_BASE_TREE)ADAPTOR->createTypeTokenText(ADAPTOR, BYTES, TOKTEXT("bytes"))
        	        	    #else
        	        	    	(pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, BYTES, (pANTLR3_UINT8)"bytes")
        	        	    #endif
        	        	    );

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleadvanced_array_typeEx; /* Prevent compiler warnings */
    ruleadvanced_array_typeEx: ;
    retval.stop = LT(-1);

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_SHA256 != NULL) stream_SHA256->free(stream_SHA256);
        if (stream_UUID != NULL) stream_UUID->free(stream_UUID);

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end advanced_array_type */

/** 
 * $ANTLR start literal_value
 * PBJ.g:408:1: literal_value : ( HEX_LITERAL | DECIMAL_LITERAL | OCTAL_LITERAL | FLOATING_POINT_LITERAL | BOOL_LITERAL | STRING_LITERAL );
 */
static PBJParser_literal_value_return
literal_value(pPBJParser ctx)
{   
    PBJParser_literal_value_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    set133;

    pANTLR3_BASE_TREE set133_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    set133       = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    set133_tree   = NULL;


    retval.tree  = NULL;
    {
        // PBJ.g:409:2: ( HEX_LITERAL | DECIMAL_LITERAL | OCTAL_LITERAL | FLOATING_POINT_LITERAL | BOOL_LITERAL | STRING_LITERAL )
        // PBJ.g:
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            set133=(pANTLR3_COMMON_TOKEN)LT(1);
            if ( LA(1) == STRING_LITERAL || ((LA(1) >= HEX_LITERAL) && (LA(1) <= BOOL_LITERAL)) )
            {
                CONSUME();
                ADAPTOR->addChild(ADAPTOR, root_0, (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, set133)));
                PERRORRECOVERY=ANTLR3_FALSE;
            }
            else 
            {
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
                EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;
                EXCEPTION->expectingSet = &FOLLOW_set_in_literal_value0;
                RECOVERFROMMISMATCHEDSET(&FOLLOW_set_in_literal_value0);    goto ruleliteral_valueEx;
            }


        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleliteral_valueEx; /* Prevent compiler warnings */
    ruleliteral_valueEx: ;
    retval.stop = LT(-1);

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end literal_value */

/** 
 * $ANTLR start flags
 * PBJ.g:431:1: flags : ( FLAGS8 | FLAGS16 | FLAGS32 | FLAGS64 );
 */
static PBJParser_flags_return
flags(pPBJParser ctx)
{   
    PBJParser_flags_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    FLAGS8134;
    pANTLR3_COMMON_TOKEN    FLAGS16135;
    pANTLR3_COMMON_TOKEN    FLAGS32136;
    pANTLR3_COMMON_TOKEN    FLAGS64137;

    pANTLR3_BASE_TREE FLAGS8134_tree;
    pANTLR3_BASE_TREE FLAGS16135_tree;
    pANTLR3_BASE_TREE FLAGS32136_tree;
    pANTLR3_BASE_TREE FLAGS64137_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    FLAGS8134       = NULL;
    FLAGS16135       = NULL;
    FLAGS32136       = NULL;
    FLAGS64137       = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    FLAGS8134_tree   = NULL;
    FLAGS16135_tree   = NULL;
    FLAGS32136_tree   = NULL;
    FLAGS64137_tree   = NULL;


    retval.tree  = NULL;
    {
        {
            //  PBJ.g:431:7: ( FLAGS8 | FLAGS16 | FLAGS32 | FLAGS64 )
            
            ANTLR3_UINT32 alt24;

            alt24=4;

            switch ( LA(1) ) 
            {
            case FLAGS8:
            	{
            		alt24=1;
            	}
                break;
            case FLAGS16:
            	{
            		alt24=2;
            	}
                break;
            case FLAGS32:
            	{
            		alt24=3;
            	}
                break;
            case FLAGS64:
            	{
            		alt24=4;
            	}
                break;

            default:
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 24;
                EXCEPTION->state        = 0;


                goto ruleflagsEx;
            }

            switch (alt24) 
            {
        	case 1:
        	    // PBJ.g:432:6: FLAGS8
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FLAGS8134 = (pANTLR3_COMMON_TOKEN) MATCHT(FLAGS8, &FOLLOW_FLAGS8_in_flags2300); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleflagsEx;
        	        }

        	        FLAGS8134_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, FLAGS8134));
        	        ADAPTOR->addChild(ADAPTOR, root_0, FLAGS8134_tree);

        	        {

        	                    	(SCOPE_TOP(flags_def))->flagBits=8;
        	                 
        	        }

        	    }
        	    break;
        	case 2:
        	    // PBJ.g:437:6: FLAGS16
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FLAGS16135 = (pANTLR3_COMMON_TOKEN) MATCHT(FLAGS16, &FOLLOW_FLAGS16_in_flags2321); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleflagsEx;
        	        }

        	        FLAGS16135_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, FLAGS16135));
        	        ADAPTOR->addChild(ADAPTOR, root_0, FLAGS16135_tree);

        	        {

        	                    	(SCOPE_TOP(flags_def))->flagBits=16;
        	                 
        	        }

        	    }
        	    break;
        	case 3:
        	    // PBJ.g:442:6: FLAGS32
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FLAGS32136 = (pANTLR3_COMMON_TOKEN) MATCHT(FLAGS32, &FOLLOW_FLAGS32_in_flags2342); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleflagsEx;
        	        }

        	        FLAGS32136_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, FLAGS32136));
        	        ADAPTOR->addChild(ADAPTOR, root_0, FLAGS32136_tree);

        	        {

        	                    	(SCOPE_TOP(flags_def))->flagBits=32;
        	                 
        	        }

        	    }
        	    break;
        	case 4:
        	    // PBJ.g:447:6: FLAGS64
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FLAGS64137 = (pANTLR3_COMMON_TOKEN) MATCHT(FLAGS64, &FOLLOW_FLAGS64_in_flags2363); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleflagsEx;
        	        }

        	        FLAGS64137_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, FLAGS64137));
        	        ADAPTOR->addChild(ADAPTOR, root_0, FLAGS64137_tree);

        	        {

        	                    	(SCOPE_TOP(flags_def))->flagBits=64;
        	                 
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleflagsEx; /* Prevent compiler warnings */
    ruleflagsEx: ;
    retval.stop = LT(-1);

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end flags */

/** 
 * $ANTLR start integer
 * PBJ.g:525:1: integer : ( DECIMAL_LITERAL | HEX_LITERAL | OCTAL_LITERAL );
 */
static PBJParser_integer_return
integer(pPBJParser ctx)
{   
    PBJParser_integer_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    set138;

    pANTLR3_BASE_TREE set138_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    set138       = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    set138_tree   = NULL;


    retval.tree  = NULL;
    {
        // PBJ.g:526:5: ( DECIMAL_LITERAL | HEX_LITERAL | OCTAL_LITERAL )
        // PBJ.g:
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            set138=(pANTLR3_COMMON_TOKEN)LT(1);
            if ( ((LA(1) >= HEX_LITERAL) && (LA(1) <= OCTAL_LITERAL)) )
            {
                CONSUME();
                ADAPTOR->addChild(ADAPTOR, root_0, (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, set138)));
                PERRORRECOVERY=ANTLR3_FALSE;
            }
            else 
            {
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
                EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;
                EXCEPTION->expectingSet = &FOLLOW_set_in_integer0;
                RECOVERFROMMISMATCHEDSET(&FOLLOW_set_in_integer0);    goto ruleintegerEx;
            }


        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleintegerEx; /* Prevent compiler warnings */
    ruleintegerEx: ;
    retval.stop = LT(-1);

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);

    if (HASEXCEPTION())
    {
        PREPORTERROR();
        PRECOVER();
        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
    }

    return retval;
}
/* $ANTLR end integer */
/* End of parsing rules
 * ==============================================
 */

/* ==============================================
 * Syntactic predicates
 */
/* End of syntactic predicates
 * ==============================================
 */

 
 



/* End of code
 * =============================================================================
 */
